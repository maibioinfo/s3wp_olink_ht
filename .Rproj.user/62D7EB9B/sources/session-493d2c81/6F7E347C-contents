# % values above LOD >80% per protein
# Multiple Linear Regression Model to show covariates with significant effect = p<0.05, bonferroni adjusted
# 
# Correlation between proteins and relevant variables was calculated separately for each measured protein by fitting a generalized linear model using the ’glm’ function including all covariates simultaneously. 
# The significance of the each covariate’s contribution to the total variance was estimated using an analysis of variance approach as implemented by the ‘anova.glm’ function on the resulting generalized linear model. 
# Covariates were considered significant for a specific protein if their Bonferroni adjusted P-values were below 0.05 (P-valueo3.16104, 0.05/158). 
# 
# Each PEA measurement was individually adjusted for significant covariates (Supplementary Data 2) and rank-transformed to normality by using the ‘rntransform’ function available from the R-package GenABEL (v1.6.7)61. 
# Correlations between pairs of PEA measurements were carried out, on the adjusted and rank-transformed values,using the ‘cor’ function applying Spearman’s Rho statistics on pairwise complete observations.
# Calculate 

#aktivitetsdata
activity.table<-read.table("derived_features_2017_Feb_20.tsv", header=T, sep="\t")
activity.table<-dplyr::tbl_df(activity.table)
activity.table<-arrange(activity.table, subject_id)
num.act.col<-ncol(activity.table)
activity.table.complete<-matrix(nrow=nrow(wellness.data), ncol=num.act.col)
for(i in 1:nrow(wellness.data)) {
  pos<-which(activity.table$subject_id %in% subject.id[i])
  if(length(pos)>0) {
    activity.table.complete[i,]<-as.numeric(activity.table[pos,])
  } else { #subject finns inte med
    activity.table.complete[i,1]<-subject.id[i]
  } 
}
activity.table.complete<-as.data.frame(activity.table.complete)
names(activity.table.complete)<-colnames(activity.table)


activity.table

activity.table.complete$sex<-wellness.data$sex

ggplot(activity.table.complete, aes(x=Sleep_v2tov3, y=Sleep_v3tov4)) + geom_point()
ggplot(activity.table.complete, aes(x=Sleep_v2tov3, color=sex)) + geom_density()
ggplot(activity.table.complete, aes(x=Sleep_v2tov3)) + geom_hist()

activity.table.complete$mean.steps<-apply(activity.table.complete[,4:5], 1, mean, na.rm=T)
activity.table.complete$mean.sleep<-apply(activity.table.complete[,2:3], 1, mean, na.rm=T)

avg.steps<-activity.table.complete %>% group_by(sex) %>% summarize(steps.mean=mean(mean.steps, na.rm=T))
avg.sleep<-activity.table.complete %>% group_by(sex) %>% summarize(sleep.mean=mean(mean.sleep, na.rm=T))


pdf("average.steps.pdf",w=7, h=7)
ggplot(activity.table.complete, aes(x=mean.steps, col=sex,fill=sex)) +  geom_density(alpha=.3) +  geom_vline(data=avg.steps, aes(xintercept=steps.mean, colour=sex),linetype="dashed", size=1)+ xlab("Average steps per day") +ggtitle("Steps")+theme_light()#+ facet_wrap( ~ sex)
dev.off()

pdf("average.sleep.pdf",w=7, h=7)
ggplot(activity.table.complete, aes(x=mean.sleep, col=sex,fill=sex)) +  geom_density(alpha=.3) +  geom_vline(data=avg.sleep, aes(xintercept=sleep.mean, colour=sex),linetype="dashed", size=1)+ xlab("Average sleep (hours)") +ggtitle("Sleep")+theme_light()#+ facet_wrap( ~ sex)
dev.off()


ggplot(activity.table.complete, aes(x=Steps_v2tov3, col=sex, fill=sex)) + geom_density(alpha=.3) + theme_light()


#Hämta co-variatdata
variable.df.visit1<-select(wellness.data, subject_id, gender=sex, age, weight=visit1_anthropometry_weight, waist=visit1_anthropometry_waist, fat=visit1_bioimpedance_fat,muscle=visit1_bioimpedance_muscle,bone=visit1_bioimpedance_bone, 
                           systolic=visit1_bloodpressure_systolic, diastolic=visit1_bloodpressure_diastolic, CRP=visit1_analysis_code_S.CRPUS.A1_result, 
                           LDL=visit1_analysis_code_S.LDL.A1_result, HDL=visit1_analysis_code_S.HDL.A1_result , GLUK=visit1_analysis_code_P.GLUK.A1_result, 
                           LYMF=visit1_analysis_code_B.LYMF.A7_result, HB=visit1_analysis_code_B.HB.A1_result, HBA1C=visit1_analysis_code_B.HBA1C.A3_result, KOL=visit1_analysis_code_S.KOL.A1_result, 
                           TG=visit1_analysis_code_S.TG.A1_result, APOB.APOA1=visit1_analysis_code_S.APOB.AB1_result, ALAT=visit1_analysis_code_S.ALAT.A1_result, KREA=visit1_analysis_code_S.KREA.A3_result, 
                           CYSTC=visit1_analysis_code_S.CYSTC.A3_result, VITD=visit1_analysis_code_S.1.25OHF1_result, TNTHS=visit1_analysis_code_S.TNTHS.A1_result, PROBNP=visit1_analysis_code_S.PROBNPA1_result,
                           LPK=visit1_analysis_code_B.LPK.A1_result,URAT=visit1_analysis_code_S.URAT.A1_result, EVF=visit1_analysis_code_B.EVF.A4_result,NEUT=visit1_analysis_code_B.NEUT.A5_result,
                           LYMF=visit1_analysis_code_B.LYMF.A7_result, MONO=visit1_analysis_code_B.MONO.A7_result, EOS=visit1_analysis_code_B.EOS.A7_result, BASO=visit1_analysis_code_B.BASO.A7_result,risk.score=SCORE.visit1,imt.cca, athero, blood.type)

variable.df.visit2<-select(wellness.data, subject_id, gender=sex, age, weight=visit2_anthropometry_weight, waist=visit2_anthropometry_waist, fat=visit2_bioimpedance_fat,muscle=visit2_bioimpedance_muscle,bone=visit2_bioimpedance_bone, 
                           systolic=visit2_bloodpressure_systolic, diastolic=visit2_bloodpressure_diastolic, CRP=visit2_analysis_code_S.CRPUS.A1_result, 
                           LDL=visit2_analysis_code_S.LDL.A1_result, HDL=visit2_analysis_code_S.HDL.A1_result , GLUK=visit2_analysis_code_P.GLUK.A1_result, 
                           LYMF=visit2_analysis_code_B.LYMF.A7_result, HB=visit2_analysis_code_B.HB.A1_result, HBA1C=visit2_analysis_code_B.HBA1C.A3_result, KOL=visit2_analysis_code_S.KOL.A1_result, 
                           TG=visit2_analysis_code_S.TG.A1_result, APOB.APOA1=visit2_analysis_code_S.APOB.AB1_result, ALAT=visit2_analysis_code_S.ALAT.A1_result, KREA=visit2_analysis_code_S.KREA.A3_result, 
                           CYSTC=visit2_analysis_code_S.CYSTC.A3_result, VITD=visit2_analysis_code_S.1.25OHF1_result, TNTHS=visit2_analysis_code_S.TNTHS.A1_result, PROBNP=visit2_analysis_code_S.PROBNPA1_result,
                           LPK=visit2_analysis_code_B.LPK.A1_result,URAT=visit2_analysis_code_S.URAT.A1_result, EVF=visit2_analysis_code_B.EVF.A4_result,NEUT=visit2_analysis_code_B.NEUT.A5_result,
                           LYMF=visit2_analysis_code_B.LYMF.A7_result, MONO=visit2_analysis_code_B.MONO.A7_result, EOS=visit2_analysis_code_B.EOS.A7_result, BASO=visit2_analysis_code_B.BASO.A7_result,risk.score=SCORE.visit2,imt.cca, athero, blood.type)

variable.df.visit3<-select(wellness.data, subject_id, gender=sex, age, weight=visit3_anthropometry_weight, waist=visit3_anthropometry_waist, fat=visit3_bioimpedance_fat,muscle=visit3_bioimpedance_muscle,bone=visit3_bioimpedance_bone, 
                           systolic=visit3_bloodpressure_systolic, diastolic=visit3_bloodpressure_diastolic, CRP=visit3_analysis_code_S.CRPUS.A1_result, 
                           LDL=visit3_analysis_code_S.LDL.A1_result, HDL=visit3_analysis_code_S.HDL.A1_result , GLUK=visit3_analysis_code_P.GLUK.A1_result, 
                           LYMF=visit3_analysis_code_B.LYMF.A7_result, HB=visit3_analysis_code_B.HB.A1_result, HBA1C=visit3_analysis_code_B.HBA1C.A3_result, KOL=visit3_analysis_code_S.KOL.A1_result, 
                           TG=visit3_analysis_code_S.TG.A1_result, APOB.APOA1=visit3_analysis_code_S.APOB.AB1_result, ALAT=visit3_analysis_code_S.ALAT.A1_result, KREA=visit3_analysis_code_S.KREA.A3_result, 
                           CYSTC=visit3_analysis_code_S.CYSTC.A3_result, VITD=visit3_analysis_code_S.1.25OHF1_result, TNTHS=visit3_analysis_code_S.TNTHS.A1_result, PROBNP=visit3_analysis_code_S.PROBNPA1_result,
                           LPK=visit3_analysis_code_B.LPK.A1_result,URAT=visit3_analysis_code_S.URAT.A1_result, EVF=visit3_analysis_code_B.EVF.A4_result,NEUT=visit3_analysis_code_B.NEUT.A5_result,
                           LYMF=visit3_analysis_code_B.LYMF.A7_result, MONO=visit3_analysis_code_B.MONO.A7_result, EOS=visit3_analysis_code_B.EOS.A7_result, BASO=visit3_analysis_code_B.BASO.A7_result,risk.score=SCORE.visit3,imt.cca, athero, blood.type)

variable.df.visit4<-select(wellness.data, subject_id, gender=sex, age, weight=visit4_anthropometry_weight, waist=visit4_anthropometry_waist, fat=visit4_bioimpedance_fat,muscle=visit4_bioimpedance_muscle,bone=visit4_bioimpedance_bone, 
                           systolic=visit4_bloodpressure_systolic, diastolic=visit4_bloodpressure_diastolic, CRP=visit4_analysis_code_S.CRPUS.A1_result, 
                           LDL=visit4_analysis_code_S.LDL.A1_result, HDL=visit4_analysis_code_S.HDL.A1_result , GLUK=visit4_analysis_code_P.GLUK.A1_result, 
                           LYMF=visit4_analysis_code_B.LYMF.A7_result, HB=visit4_analysis_code_B.HB.A1_result, HBA1C=visit4_analysis_code_B.HBA1C.A3_result, KOL=visit4_analysis_code_S.KOL.A1_result, 
                           TG=visit4_analysis_code_S.TG.A1_result, APOB.APOA1=visit4_analysis_code_S.APOB.AB1_result, ALAT=visit4_analysis_code_S.ALAT.A1_result, KREA=visit4_analysis_code_S.KREA.A3_result, 
                           CYSTC=visit4_analysis_code_S.CYSTC.A3_result, VITD=visit4_analysis_code_S.1.25OHF1_result, TNTHS=visit4_analysis_code_S.TNTHS.A1_result, PROBNP=visit4_analysis_code_S.PROBNPA1_result,
                           LPK=visit4_analysis_code_B.LPK.A1_result,URAT=visit4_analysis_code_S.URAT.A1_result, EVF=visit4_analysis_code_B.EVF.A4_result,NEUT=visit4_analysis_code_B.NEUT.A5_result,
                           LYMF=visit4_analysis_code_B.LYMF.A7_result, MONO=visit4_analysis_code_B.MONO.A7_result, EOS=visit4_analysis_code_B.EOS.A7_result, BASO=visit4_analysis_code_B.BASO.A7_result,risk.score=SCORE.visit4,imt.cca, athero, blood.type)

variable.df.visit1$BMI<-weight.data$visit1_bmi
variable.df.visit1<-variable.df.visit1[,c(1:4,38,5:37)]
variable.df.visit1$mean.steps<-apply(select(activity.table.complete, contains("Steps")), 1, mean, na.rm=T)
variable.df.visit1$mean.sleep<-apply(select(activity.table.complete, contains("Sleep")), 1, mean, na.rm=T)
variable.df.visit2$BMI<-weight.data$visit2_bmi
variable.df.visit2<-variable.df.visit2[,c(1:4,38,5:37)]
variable.df.visit2$mean.steps<-apply(select(activity.table.complete, contains("Steps")), 1, mean, na.rm=T)
variable.df.visit2$mean.sleep<-apply(select(activity.table.complete, contains("Sleep")), 1, mean, na.rm=T)
variable.df.visit3$BMI<-weight.data$visit3_bmi
variable.df.visit3<-variable.df.visit3[,c(1:4,38,5:37)]
variable.df.visit3$mean.steps<-apply(select(activity.table.complete, contains("Steps")), 1, mean, na.rm=T)
variable.df.visit3$mean.sleep<-apply(select(activity.table.complete, contains("Sleep")), 1, mean, na.rm=T)
variable.df.visit4$BMI<-weight.data$visit4_bmi
variable.df.visit4<-variable.df.visit4[,c(1:4,38,5:37)]
variable.df.visit4$mean.steps<-apply(select(activity.table.complete, contains("Steps")), 1, mean, na.rm=T)
variable.df.visit4$mean.sleep<-apply(select(activity.table.complete, contains("Sleep")), 1, mean, na.rm=T)

#Check the variation and make a heatmap
names(variable.df.visit1)[4:35]<-paste0(names(variable.df.visit1)[4:35],"_1")
names(variable.df.visit2)[4:35]<-paste0(names(variable.df.visit2)[4:35],"_2")
names(variable.df.visit3)[4:35]<-paste0(names(variable.df.visit3)[4:35],"_3")
names(variable.df.visit4)[4:35]<-paste0(names(variable.df.visit4)[4:35],"_4")
variable.df.wide<-cbind(variable.df.visit1[,4:35], variable.df.visit2[,4:35], variable.df.visit3[,4:35], variable.df.visit4[4:35])

variable.color.vec<-rep("black",ncol(variable.df.visit1))
names(variable.color.vec)<-names(variable.df.visit1)
for(i in 1:length(variable.color.vec)) {
  variable<-names(variable.color.vec)[i]
  variable<-substr(variable, 1,nchar(variable)-2)
  col.pos<-grep(variable, names(group.cols))
  if(length(col.pos)>0) {
    variable.color.vec[i]<-group.cols[col.pos[1]]
  }
  if(variable=="VITD") {
    variable.color.vec[i]<-"#7570b3"
  } 
  
}
variable.color.vec[4:9]<-"red"
variable.color.vec[10:11]<-"blue"
rownames(variable.df.wide)<-variable.df.visit1$subject_id

cor<-cor(variable.df.wide, method="spearman", use="pairwise.complete.obs")
cor.subj<-cor(t(variable.df.wide), method="spearman", use="pairwise.complete.obs")

d <- 1 - cor
hcl <- hclust(as.dist(d), "average") 
plot(hcl, hang=-1, cex=1)

d.subj <- 1 - cor.subj
hcl.subj <- hclust(as.dist(d.subj), "average") 
plot(hcl.subj, hang=-1, cex=1)
#maPalette(high="mediumblue", mid="mediumturquoise",low="#EEEEFF") -> cols
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)

variable.sex.col<-variable.df.visit1$gender
variable.sex.col[which(variable.sex.col=="f")]<-"#F8766D"
variable.sex.col[which(variable.sex.col=="m")]<-"#00BFC4"

variable.wide.colors<-rep(variable.color.vec[4:35],4)

pdf(file="heatmap.clinicalvariables.and.anthropometry.1.4.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(cor, Rowv=as.dendrogram(hcl), Colv=rev(as.dendrogram(hcl)), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.5, cexRow=0.5, col=my_palette, RowSideColors=variable.wide.colors, ColSideColors=variable.wide.colors)
dev.off()

pdf(file="heatmap.clinicalvariables.and.anthropometry.subjects.1.4.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("#EEEEFF", "mediumturquoise", "mediumblue"))(n = 100)
heatmap.2(cor.subj, Rowv=as.dendrogram(hcl.subj), Colv=as.dendrogram(hcl.subj), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.6, cexRow=0.6, col=my_palette, RowSideColors=variable.sex.col)
dev.off()


###### Räkna på within och between variation

co.var <- function(x,na.rm=TRUE) 100*(sd(x,na.rm=na.rm)/mean(x,na.rm=na.rm))

num.variables<-ncol(variable.df.wide)/4
variables<-names(variable.df.wide)[1:32]
clinical.intra.inter.cv<-matrix(0,nrow=num.variables, ncol=2)
colnames(clinical.intra.inter.cv)<-c("mean.cv.between.subjects","mean.cv.within.subjects")
rownames(clinical.intra.inter.cv)<-variables

clinical.intra.inter.cv.all.visits<-matrix(0,nrow=num.variables, ncol=5)
colnames(clinical.intra.inter.cv.all.visits)<-c("cv.visit.1","cv.visit.2","cv.visit.3","cv.visit.4","mean.cv.within.subjects")
rownames(clinical.intra.inter.cv.all.visits)<-variables

clinical.person.cv.mat<-matrix(0,nrow=num.variables, ncol=nrow(variable.df.wide))
rownames(clinical.person.cv.mat)<-variables
colnames(clinical.person.cv.mat)<-rownames(variable.df.wide)

for(j in 1:num.variables) {
  variable<-variables[j]
 var.data<-variable.df.wide[,c(j, j+num.variables, j+num.variables*2, j+ num.variables*3)]
  colnames(prot.data)<-c("visit 1","visit 2", "visit 3","visit 4")
  person.cv<- apply(var.data, 1, co.var)
  clinical.person.cv.mat[j,]<-person.cv
  names(person.cv)<-rownames(variable.df.wide)
  visit.cv<- apply(var.data, 2, co.var)
  clinical.intra.inter.cv.all.visits[j,]<-c(visit.cv, mean(person.cv, na.rm=T))
  clinical.intra.inter.cv[j,]<-c(mean(visit.cv, na.rm=T), mean(person.cv, na.rm=T))
}

clinical.intra.inter.cv.df<-as.data.frame(clinical.intra.inter.cv)
#clinical.intra.inter.cv.df$clinical<-rownames(clinical.intra.inter.cv)
clinical.intra.inter.cv.df$variable<-substr(rownames(clinical.intra.inter.cv), 1, nchar(rownames(clinical.intra.inter.cv))-2)
clinical.intra.inter.cv.df<-select(clinical.intra.inter.cv.df, variable, everything())
clinical.person.cv.df<-as.data.frame(clinical.person.cv.mat)
clinical.person.cv.df$variable<-substr(rownames(clinical.intra.inter.cv), 1, nchar(rownames(clinical.intra.inter.cv))-2)
clinical.person.cv.df<-select(clinical.person.cv.df, variable, everything())

pdf(file="clinical.between.within.subject.pdf",7,7)
xlim<-0
ylim<-0
p <- ggplot(clinical.intra.inter.cv.df, aes(x=mean.cv.between.subjects, y=mean.cv.within.subjects)) + geom_point(alpha=0.4)
#p <- p + geom_point(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd <= xlim & mean.intraindividual.sd <= ylim),aes(mean.intravisit.sd,mean.intraindividual.sd), alpha=0.5)
p <- p + geom_text_repel(data=subset(clinical.intra.inter.cv.df, mean.cv.between.subjects > xlim | mean.cv.within.subjects> ylim),aes(mean.cv.between.subjects,mean.cv.within.subjects,label=variable))
p <- p + xlab("variation between individuals")+ ylab("variation within individuals")#+ggtitle("Protein standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))+ coord_fixed()#ratio=1)
#p <- p + geom_hline(yintercept=ylim, linetype=2) + geom_vline(xintercept=xlim, linetype=2) 
p <- p + scale_x_continuous(limits = c(0, max(clinical.intra.inter.cv.df$mean.cv.between.subjects))) + scale_y_continuous(limits =c(0, max(clinical.intra.inter.cv.df$mean.cv.within.subjects))) 
p
dev.off()


############## Mixed effect för Olink-data

names(variable.df.visit1)[4:35]<-substring(names(variable.df.visit1)[4:35],0,nchar(names(variable.df.visit1)[4:35])-2)
names(variable.df.visit2)[4:35]<-substring(names(variable.df.visit2)[4:35],0,nchar(names(variable.df.visit2)[4:35])-2)
names(variable.df.visit3)[4:35]<-substring(names(variable.df.visit3)[4:35],0,nchar(names(variable.df.visit3)[4:35])-2)
names(variable.df.visit4)[4:35]<-substring(names(variable.df.visit4)[4:35],0,nchar(names(variable.df.visit4)[4:35])-2)


variable.df.visit1<-filter(variable.df.visit1, subject_id %in% olink.subjects)
variable.df.visit2<-filter(variable.df.visit2, subject_id %in% olink.subjects)
variable.df.visit3<-filter(variable.df.visit3, subject_id %in% olink.subjects)
variable.df.visit4<-filter(variable.df.visit4, subject_id %in% olink.subjects)


origin.country.olink<-origin_country[which(origin.df$subject_id %in% olink.subjects)]
origin.country.4<-rep(origin.country.olink,4)

origin.country.olink.binary<-origin_country_binary[which(origin.df$subject_id %in% olink.subjects)]
origin.country.olink.binary<-rep(origin.country.olink.binary, 4)

olink.1.4.df<-rbind(olink.visit1.tot[,-1], olink.visit2.tot[,-1], olink.visit3.tot[,-1], olink.visit4.tot[,-1])
variable.1.4.df<-rbind(variable.df.visit1[,-1], variable.df.visit2[,-1], variable.df.visit3[,-1], variable.df.visit4[,-1])
variable.1.4.df<-cbind(variable.1.4.df,origin.country.4,origin.country.olink.binary)
names(variable.1.4.df)[40:41]<-c("origin_country","origin_binary")
num.prot<-ncol(olink.1.4.df)
num.vars<-ncol(variable.1.4.df)
all.subjects<-rep(olink.visit1.tot$subject_id, 4)
num.person<-length(olink.visit1.tot$subject_id)
all.visits<-c(rep(1, num.person), rep(2, num.person),rep(3, num.person),rep(4, num.person))
all.gender<-rep(olink.gender, 4)

variable.1.4.df.to.sanela<-cbind(all.subjects, all.visits, variable.1.4.df)
names(variable.1.4.df.to.sanela)[1:2]<-c("subject_id","visit")
#write.table(variable.1.4.df.to.sanela,file="wellness.mixed.effect.covariates.txt",dec=".", quote=F,row.names=F, sep="\t")


coef.mat<-matrix(ncol=num.prot, nrow=num.vars)
colnames(coef.mat)<-colnames(olink.1.4.df)
rownames(coef.mat)<-colnames(variable.1.4.df)
p.mat<-matrix(ncol=num.prot, nrow=num.vars)
colnames(p.mat)<-colnames(olink.1.4.df)
rownames(p.mat)<-colnames(variable.1.4.df)

for(i in 1:num.prot) {
#for(i in 1:10) {
  if(i%%10==0) { print(i) }
  protein<-olink.1.4.df[,i]
  if(length(which(!is.na(protein)))>(0.2*length(protein))) { #Endast 20% får vara NA
    for(j in 1:num.vars) {
      variable<-unlist(variable.1.4.df[, j])
      test.df<-data.frame(protein, variable, all.subjects, all.visits,all.gender)
      test.df$all.subjects<-as.factor(test.df$all.subjects)
      test.df$all.visits<-as.factor(test.df$all.visits)
      
      test.df<-test.df[complete.cases(test.df),]
      test.df$protein.scaled<-scale(test.df$protein)
      if(j!=1 & j!=31 & j!=32 & j!=37 & j!=40 & j!=41) {
        test.df$variable.scaled<-scale(test.df$variable)
      } else {
        test.df$variable.scaled<-test.df$variable
      }
      if(j==1) { #Kön
        model<-lmer(protein.scaled ~ variable.scaled  + (1 | all.subjects) + (1 | all.visits) , data=test.df)
        model.red<-lmer(protein.scaled ~ (1 | all.subjects) + (1 | all.visits) , data=test.df)
      } else {
        model<-lmer(protein.scaled ~ variable.scaled + all.gender + (1 | all.subjects) + (1 | all.visits) , data=test.df)
        model.red<-lmer(protein.scaled ~ all.gender +(1 | all.subjects) + (1 | all.visits) , data=test.df)
      }  
      #https://seriousstats.wordpress.com/tag/kenward-roger-approximation/
      kenward<-KRmodcomp(model, model.red)
      p.val<-kenward$stats$p.value
      estimate<-coef(summary(model))[2,1]
      coef.mat[j,i]<-estimate
      p.mat[j,i]<-p.val
    } 
  } else {
    coef.mat[,i]<-NA
    p.mat[,i]<-NA
  }  
 
}

up.mat<-matrix(nrow=400, ncol=nrow(p.mat))
colnames(up.mat)<-rownames(p.mat)
down.mat<-matrix(nrow=400, ncol=nrow(p.mat))
colnames(down.mat)<-rownames(p.mat)
result.mat.up.down<-matrix(nrow=0, ncol=6)
colnames(result.mat.up.down)<-c("Covariate","No of proteins","Up/down", "Protein","Adj p-val","Coef")
p.mat.adj<-matrix(nrow=nrow(p.mat), ncol=ncol(p.mat))
colnames(p.mat.adj)<-colnames(p.mat)
rownames(p.mat.adj)<-rownames(p.mat)
protein.result.mat<-matrix(nrow=0, ncol=4)
colnames(protein.result.mat)<-c("covariate","protein","adjusted p-value","coefficient")
for(j in 1:nrow(p.mat)) {
  p.col<-p.mat[j,]
  p.adj<-p.adjust(p.col, method="fdr")
  p.mat.adj[j,]<-p.adj
  sig.pos<-which(p.adj<0.05)
  coefs<-coef.mat[j, sig.pos]
  p.adj.sig<-p.adj[sig.pos]
  p.sig.ord<-order(p.adj.sig)
  coefs<-coefs[p.sig.ord]
  p.adj.sig.ord<-p.adj.sig[p.sig.ord]
  if(length(p.adj.sig.ord)>0) {
    protein.result.mat<-rbind(protein.result.mat,   cbind(rownames(p.mat)[j],names(p.adj.sig.ord), p.adj.sig.ord, coefs))
  }
  #coefs<-sort(coefs)
  positive<-names(p.adj.sig.ord[which(coefs>0)])
  negative<-names(p.adj.sig.ord[which(coefs<=0)])
  
  p.adj.sig.ord.pos<-p.adj.sig.ord[which(coefs>0)]
  p.adj.sig.ord.neg<-p.adj.sig.ord[which(coefs<=0)]
  coefs.pos<-coefs[which(coefs>0)]
  coefs.neg<-coefs[which(coefs<=0)]
  
  
  if(length(positive)>0) {
    print(c(rownames(p.mat)[j], " Up: ", paste(positive, collapse=" ")))  
    up.mat[1:length(positive),j]<-positive
 
  }
  if(length(negative)>0) {
    print(c(rownames(p.mat)[j], " Down: ", paste(negative,collapse=" ")))
   down.mat[1:length(negative),j]<-negative
  }
  result.mat.up.down<-rbind(result.mat.up.down, c(rownames(p.mat)[j], length(positive), "Up:",paste(positive, collapse=", "), paste(p.adj.sig.ord.pos, collapse=", "),paste(coefs.pos, collapse=", ")))
  result.mat.up.down<-rbind(result.mat.up.down, c(rownames(p.mat)[j], length(negative), "Down:",paste(negative, collapse=", "), paste(p.adj.sig.ord.neg, collapse=", ") ,paste(coefs.neg, collapse=", ")))
}
write.xls(result.mat.up.down, file="180628.mixed.effects.41.covariates.scaled.11.panels.pvals.xls")

#write.xls(protein.result.mat, file="180529.mixed.effects.41.covariates.protein.table.pvals.xls")
write.xls(cbind(rownames(coef.mat), coef.mat), file="180628.mixed.effects.41.covariates.coefficient.matrix.xls")
write.xls(cbind(rownames(p.mat.adj), p.mat.adj), file="180628.mixed.effects.41.covariates.adj.p.value.matrix.xls")


#plotta resultaten

for(j in 1:ncol(up.mat)) {
  var.name<-colnames(up.mat)[j]
  up.vec<-up.mat[which(!is.na(up.mat[,j])),j]
  down.vec<-down.mat[which(!is.na(down.mat[,j])),j]
  if(length(up.vec)>0) {
    pdf(file=paste0("180627.upregulated.proteins.plot.visit.1.4.",var.name,".mixed.effects.scaled.pdf"),h=5,w=5, useDingbats = FALSE)
    plot.up.or.down.proteins(var.name, up.vec, j)
    dev.off()
   }
  if(length(down.vec)>0) {
    pdf(file=paste0("180627.downregulated.proteins.plot.visit.1.4.",var.name,".mixed.effects.scaled.pdf"),h=5,w=5, useDingbats = FALSE)
    plot.up.or.down.proteins(var.name, down.vec, j)
    dev.off()
  }
}
plot.up.or.down.proteins<-function(var.name, up.down.vec, j) {
  for(k in 1:length(up.down.vec)) {
    prot.name<-up.down.vec[k]
    protein<-olink.1.4.df[,prot.name]
    protein.visit1<-olink.visit1.tot[,prot.name]
    protein.visit2<-olink.visit2.tot[,prot.name]
    variable<-unlist(variable.1.4.df[, var.name])
    #   df.1.2<-data.frame(protein, protein.visit2, protein.change, variable.change)
    visit<-c(rep(1, num.person), rep(2, num.person),rep(3, num.person),rep(4, num.person))
    visit<-as.character(visit)
    df<-data.frame(protein, variable,visit)
    if(j==1) { #Gender
      df.1.2<-data.frame(protein.visit1, protein.visit2, variable)
      df.1.2$variable<-as.factor(df.1.2$variable)
      plot1<-  ggplot(df, aes(y=protein,x=visit, color=variable))+ geom_quasirandom(size=1)  +xlab("") + ylab("LOG NPX visit1") + scale_fill_discrete(name = "Gender")+ labs(color='sex') 
      plot1<-plot1 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
      p<-p.mat[var.name,prot.name]
      coef<-coef.mat[var.name,prot.name]
      grid.arrange(plot1, ncol=1, top=textGrob(paste0(prot.name," / ",var.name, "\n", "Coef: ", round(coef, 3)," Adj. p-val: ", round(p, 3) ), gp=gpar(fontsize=15,fontface="bold")))
    } else
    if(j==37) { #Blood type
      df.1.2<-data.frame(protein.visit1, protein.visit2, variable)
      df.1.2$variable<-as.factor(df.1.2$variable)
      plot1<-  ggplot(df, aes(y=protein,x=visit, color=variable))+ geom_quasirandom(size=1)  +xlab("") + ylab("LOG NPX visit1") + scale_fill_discrete(name = "Blood type")+ labs(color='Blood type') 
      plot1<-plot1 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
      
      p<-p.mat[var.name,prot.name]
      coef<-coef.mat[var.name,prot.name]
      grid.arrange(plot1, ncol=1, top=textGrob(paste0(prot.name," / ",var.name, "\n", "Coef: ", round(coef, 3)," Adj. p-val: ", round(p, 3) ), gp=gpar(fontsize=15,fontface="bold")))
    } else
      if(j>=40 ) { #origin country
      df.1.2<-data.frame(protein.visit1, protein.visit2, variable)
      df.1.2$variable<-as.factor(df.1.2$variable)
      plot1<-  ggplot(df, aes(y=protein,x=visit, color=variable))+ geom_quasirandom(size=1)  +xlab("") + ylab("LOG NPX visit1") + scale_fill_discrete(name = "Origin country")+ labs(color='origin country') 
      plot1<-plot1 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
      p<-p.mat[var.name,prot.name]
      coef<-coef.mat[var.name,prot.name]
      grid.arrange(plot1, ncol=1, top=textGrob(paste0(prot.name," / ",var.name, "\n", "Coef: ", round(coef, 3)," Adj. p-val: ", round(p, 3) ), gp=gpar(fontsize=15,fontface="bold")))
    }
    else {
      plot1<-ggplot(df, aes(x=protein, y=variable, color=variable, shape=visit)) + geom_point(size=2)  +xlab("LOG NPX") + ylab(var.name) + scale_colour_gradientn(name=var.name, colours = rainbow(4))##+ scale_colour_brewer(palette = "Spectral")
      plot1<-plot1 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
      
      cor.val<-cor(protein, variable, method="pearson", use="pairwise.complete.obs")
      p<-p.mat[var.name,prot.name]
      coef<-coef.mat[var.name,prot.name]
      #grid.arrange(plot1, plot2,ncol=2, top=textGrob(paste0(prot.name," / ",var.name, "\nCor: ", round(cor.val, 3), " Coef: ", round(coef, 3)," Adj. p-val: ", round(p, 3) ), gp=gpar(fontsize=15,fontface="bold")))
      grid.arrange(plot1, top=textGrob(paste0(prot.name," / ",var.name, "\nCor: ", round(cor.val, 3), " Coef: ", round(coef, 3)," Adj. p-val: ", round(p, 3) ), gp=gpar(fontsize=15,fontface="bold")))
    }  
  }
}


 
  
#Loopa igenom alla resulterande proteiner och gör en ny lista med vilka covariater de är intressanta i

protein.result.mat.up.down<-matrix(nrow=0, ncol=4)
colnames(protein.result.mat.up.down)<-c("Protein","No of covariates","Up/down", "Covariates")
sig.proteins<-unique(unique(up.mat[which(!is.na(up.mat))]), unique(down.mat[which(!is.na(down.mat))]))
for(j in 1:length(sig.proteins)) {
  prot.name<-sig.proteins[j]
  up.vars<-vector()
  down.vars<-vector()
  for(k in 1:ncol(up.mat)) {
    if(length(grep(prot.name, up.mat[,k]))>0) {
      up.vars<-c(up.vars, colnames(up.mat)[k])
    }
    if(length(grep(prot.name, down.mat[,k]))>0) {
      down.vars<-c(down.vars, colnames(down.mat)[k])
    }
  }
  protein.result.mat.up.down<-rbind(protein.result.mat.up.down, c(prot.name, length(up.vars), "Up:",paste(up.vars, collapse=", ")))
  protein.result.mat.up.down<-rbind(protein.result.mat.up.down, c(prot.name, length(down.vars), "Down:",paste(down.vars, collapse=", ")))
}

protein.result.mat.up.down.many<-protein.result.mat.up.down[which(protein.result.mat.up.down[,2]>4),]
protein.result.mat.up.down.many.sort<-protein.result.mat.up.down.many[order(as.numeric(protein.result.mat.up.down.many[,2]), decreasing=T),]

protein.result.mat.up.down.sort<-protein.result.mat.up.down[order(as.numeric(protein.result.mat.up.down[,2]),decreasing=T),]
#write.xls(protein.result.mat.up.down.many.sort, file="180524.mixed.effects.40.covariates.scaled.11.panels.significant.proteins.xls") 
#write.xls(protein.result.mat.up.down.many.sort, file="180524.mixed.effects.40.covariates.scaled.11.panels.significant.proteins.xls") 
write.xls(protein.result.mat.up.down.many.sort, file="18068.mixed.effects.40.covariates.scaled.11.panels.significant.proteins.all.xls") 


######## Gör cirkulär plot

#http://zuguang.de/circlize_book/book/advanced-usage-of-chorddiagram.html#customize-sector-labels

rownames(p.mat.adj)<-rownames(p.mat)
colnames(p.mat.adj)<-colnames(p.mat)
circos.mat<-p.mat.adj
circos.coef.mat<-coef.mat
circos.mat.many<-circos.mat[3:34,]

circos.mat.clinical<-circos.mat[11:33,]
circos.mat.weight<-circos.mat[c(3:6),]
circos.coef.mat.weight<-circos.coef.mat[c(3:6),]

circos.mat.weight.combined<-rbind(circos.mat.weight, circos.coef.mat.weight)
circos.mat.weight.combined<-t(circos.mat.weight.combined)
colnames(circos.mat.weight.combined)[1:4]<-paste0(colnames(circos.mat.weight.combined)[1:4], "_adjusted_p_value")
colnames(circos.mat.weight.combined)[5:8]<-paste0(colnames(circos.mat.weight.combined)[5:8], "_coefficient")
circos.mat.weight.combined<-cbind(rownames(circos.mat.weight.combined), circos.mat.weight.combined)
write.xls(circos.mat.weight.combined, file="weight.related.table.xls")
circos.mat.clinical[which(circos.mat.clinical>=0.0001)]<-NA
circos.mat.weight[which(circos.mat.weight>=0.005)]<-NA
circos.coef.mat.weight[which(circos.mat.weight>=0.005)]<-NA
circos.mat.crp<-circos.mat[which(rownames(circos.mat)=="CRP"),]
circos.mat.crp<-circos.mat.crp[which(circos.mat.crp<0.005)]

#circos.mat[which(circos.mat>=0.001)]<-NA
#circos.mat.filtered<-circos.mat[ , apply(circos.mat, 2, function(x) !all(is.na(x)))] #Ta bort kolumner som bara är NA
#circos.mat.filtered<-circos.mat.filtered[  apply(circos.mat.filtered, 1, function(x) !all(is.na(x))),] #Ta bort rader som bara är NA

circos.mat.clinical<-circos.mat.clinical[ , apply(circos.mat.clinical, 2, function(x) !all(is.na(x)))] #Ta bort kolumner som bara är NA
circos.mat.clinical<-circos.mat.clinical[  apply(circos.mat.clinical, 1, function(x) !all(is.na(x))),] #Ta bort rader som bara är NA
circos.mat.weight.tot<-circos.mat.weight

circos.mat.weight<-circos.mat.weight[ , apply(circos.mat.weight, 2, function(x) !all(is.na(x)))] #Ta bort kolumner som bara är NA
circos.coef.mat.weight<-circos.coef.mat.weight[ , apply(circos.mat.weight.tot, 2, function(x) !all(is.na(x)))] #Ta bort kolumner som bara är NA
#circos.mat.weight.tot<-circos.mat.weight
#circos.mat.weight<-circos.mat.weight[  apply(circos.mat.weight, 1, function(x) !all(is.na(x))),] #Ta bort rader som bara är NA
#circos.coef.mat.weight<-circos.coef.mat.weight[  apply(circos.mat.weight.tot, 1, function(x) !all(is.na(x))),] #Ta bort rader som bara är NA
circos.mat.weight.tot<-circos.mat.weight
circos.mat.weight<-circos.mat.weight[,order(apply(circos.mat.weight,2,min, na.rm=T))]
circos.coef.mat.weight<-circos.coef.mat.weight[,order(apply(circos.mat.weight.tot,2,min, na.rm=T))]

circos.coef.mat.weight.50<-circos.coef.mat.weight[,1:50]
circos.mat.weight.50<-circos.mat.weight[,1:50]
circos.coef.mat.weight.50<-circos.coef.mat.weight[,1:50]
circos.mat.weight.50.min.p<-apply(circos.mat.weight.50, 2, min, na.rm=T)
circos.mat.weight.50.min.coef<-vector(length=50)
#Ta fram lista till Sanela och Ingenuity
for(j in 1:50) {
  coefs.vec<-circos.coef.mat.weight.50[,j]
  p.vec<-circos.mat.weight.50[,j]
  p.min<-circos.mat.weight.50.min.p[j]
  circos.mat.weight.50.min.coef[j]<-coefs.vec[which(p.vec==p.min)]
}
circos.weight.50.p.coef<-cbind(colnames(circos.mat.weight.50), circos.mat.weight.50.min.p, circos.mat.weight.50.min.coef)
colnames(circos.weight.50.p.coef)<-c("protein","p-value","coef")
write.table(circos.weight.50.p.coef, file="weight.bmi.fat.waist.50.most.significant.proteins.p.coef.txt", sep="\t", quote=F, row.names = F)

#Samma med CRP
crp.p.vec<-circos.mat[which(rownames(circos.mat)=="CRP"),]
crp.p.vec<-crp.p.vec[which(!is.na(crp.p.vec))]
crp.p.vec<-crp.p.vec[which(crp.p.vec<0.05)]
crp.p.vec.50<-sort(crp.p.vec)[1:50]
coefs.vec.crp<-coef.mat[11,]
coefs.vec.crp.50<-vector(length=50)
for(j in 1:50){
  prot<-names(crp.p.vec.50)[j]
  coefs.vec.crp.50[j]<-coefs.vec.crp[prot]
}
circos.crp.p.coef<-cbind(names(crp.p.vec.50), crp.p.vec.50, coefs.vec.crp.50)
colnames(circos.crp.p.coef)<-c("protein","p-value","coef")
write.table(circos.crp.p.coef, file="crp.50.most.significant.proteins.p.coef.txt", sep="\t", quote=F, row.names = F)

circos.mat.clinical<-circos.mat.clinical[,order(apply(circos.mat.clinical,2,min, na.rm=T))]
#circos.mat.test<-circos.mat.filtered[1:20,1:50]
#chordDiagram(circos.mat.test)
#chordDiagram(circos.mat.test, order = c(rownames(circos.mat.test),colnames(circos.mat.test)))
circos.mat.weight.log<-abs(log10(circos.mat.weight))
circos.mat.clinical.log<-abs(log10(circos.mat.clinical))
circos.mat.clinical.log.crp<-circos.mat.clinical.log[,which(!is.na(circos.mat.clinical.log[1,]))]
circos.mat.clinical.log.crp<-circos.mat.clinical.log.crp[  apply(circos.mat.clinical.log.crp, 1, function(x) !all(is.na(x))),] #Ta bort rader som bara är NA
circos.mat.clinical.log.crp<-circos.mat.clinical.log.crp[  apply(circos.mat.clinical.log.crp, 1, function(x) !all(is.na(x))),] #Ta bort rader som bara är NA
circos.mat.crp.log<-sort(abs(log10(circos.mat.crp)), decreasing=T)

circos.mat.many[which(circos.mat.many>=0.0005)]<-NA
circos.mat.many<-circos.mat.many[ , apply(circos.mat.many, 2, function(x) !all(is.na(x)))] #Ta bort kolumner som bara är NA
circos.mat.many<-circos.mat.many[  apply(circos.mat.many, 1, function(x) !all(is.na(x))),] #Ta bort rader som bara är NA
circos.mat.many<-circos.mat.many[,order(apply(circos.mat.many,2,min, na.rm=T))]
circos.mat.many.log<-abs(log10(circos.mat.many))
circos.mat.many.log.crp<-circos.mat.many.log[,which(!is.na(circos.mat.many.log["CRP",]))]
#circos.mat.many.log.crp<-circos.mat.many.log.crp[c(5,6:18,1:4),]
circos.mat.many.log.crp<-circos.mat.many.log.crp[c(7,8:24,1:6),]
circos.mat.many.log.crp<-circos.mat.many.log.crp[,order(circos.mat.many.log.crp[1,], decreasing=T)]
circos.mat.many.log.crp<-circos.mat.many.log.crp[,1:50]
circos.mat.many.log.crp<-circos.mat.many.log.crp[ -which(apply(circos.mat.many.log.crp, 1, function(x) all(is.na(x)))),] #Ta bort rader som bara är NA
top10.crp<-names(sort(apply(circos.mat.many.log.crp, 1, sum, na.rm=T), decreasing = T))[1:10]
circos.mat.many.log.crp<-circos.mat.many.log.crp[which(rownames(circos.mat.many.log.crp) %in% top10.crp),]

pdf("chord.diagram.many.pdf",w=15,h=15)
chordDiagram(circos.mat.many.log, order = c(rownames(circos.mat.many.log),colnames(circos.mat.many.log)), grid.col = c(rainbow(nrow(circos.mat.many.log)), rep("grey", ncol(circos.mat.many.log)))
             , annotationTrack = "grid", 
             preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(circos.mat.many.log))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, 
              facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA) # here set bg.border to NA is important
dev.off()


pdf("chord.diagram.many.crp.10.pdf",w=10,h=10)
chordDiagram(circos.mat.many.log.crp, #order = c(rownames(circos.mat.many.log.crp),colnames(circos.mat.many.log.crp)), 
           #  grid.col = c(c("#41b6c4",c("#d73027","#fc8d59","#fee08b","#d9ef8b","#91cf60","#1a9850"),rev(c("#1b9e77","#d95f02","#7570b3","#e7298a")), rep("grey", ncol(circos.mat.many.log.crp))))
             grid.col = c(rainbow(nrow(circos.mat.many.log.crp)), rep("grey", ncol(circos.mat.many.log.crp)))
             , annotationTrack = "grid", 
             preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(circos.mat.many.log.crp))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, 
              facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA) # here set bg.border to NA is important
dev.off()

#Vänd alla labels 90 grader
pdf("chord.diagram.weight.pdf",w=15,h=15)
#("red",  "green", "blue","purple"
chordDiagram(circos.mat.weight.log, order = c(rownames(circos.mat.weight),colnames(circos.mat.weight)), grid.col = c(rev(c("#1b9e77","#d95f02","#7570b3","#e7298a")), rep("grey", ncol(circos.mat.weight.log)))
             , annotationTrack = "grid", 
             preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(mat))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, 
              facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA) # here set bg.border to NA is important
dev.off()

pdf("chord.diagram.weight.50.pdf",w=10,h=10)
#("red",  "green", "blue","purple"
chordDiagram(circos.mat.weight.log[,1:50], order = c(rownames(circos.mat.weight.log[,1:50]),colnames(circos.mat.weight.log[,1:50])), grid.col = c(rev(c("#1b9e77","#d95f02","#7570b3","#e7298a")), rep("grey", ncol(circos.mat.weight.log[,1:50])))
             , annotationTrack = "grid", 
             preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(circos.mat.weight.log[,1:50]))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, 
              facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA) # here set bg.border to NA is important
dev.off()



pdf("chord.diagram.clinical.pdf",w=15,h=15)
chordDiagram(circos.mat.clinical.log, order = c(rownames(circos.mat.clinical.log),colnames(circos.mat.clinical.log)), grid.col = c(rainbow(nrow(circos.mat.clinical.log)), rep("grey", ncol(circos.mat.clinical.log)))
             , annotationTrack = "grid", 
             preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(circos.mat.clinical.log))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, 
              facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA) # here set bg.border to NA is important
dev.off()

pdf("chord.diagram.clinical.crp.pdf",w=9,h=9)
chordDiagram(circos.mat.clinical.log.crp, order = c(rownames(circos.mat.clinical.log.crp),colnames(circos.mat.clinical.log.crp)), grid.col = c(rainbow(nrow(circos.mat.clinical.log.crp)), rep("grey", ncol(circos.mat.clinical.log.crp)))
             , annotationTrack = "grid", 
             preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(circos.mat.clinical.log.crp))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, 
              facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA) # here set bg.border to NA is important
dev.off()

pdf("chord.diagram.clinical.auto.pdf",w=15,h=15)
chordDiagram(circos.mat.clinical.log,  
             , annotationTrack = "grid", 
             preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(circos.mat.clinical.log))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, 
              facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA) # here set bg.border to NA is important
dev.off()


chordDiagram(circos.mat.crp.log)


#Vönd enbart små segment 90 grader
chordDiagram(circos.mat.weight.log, order = c(rownames(circos.mat.weight),colnames(circos.mat.weight)),
             #grid.col = c(BMI = "red", weight = "green", waist = "blue",fat="purple", rep("grey", ncol(circos.mat.weight.log)))
             grid.col = c(c("red",  "green", "blue","purple"), rep("grey", ncol(circos.mat.weight.log)))
,row.col = 1:4,annotationTrack = "grid", 
             preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(circos.mat.weight.log))))))
circos.track(track.index = 1, panel.fun = function(x, y) {
  xlim = get.cell.meta.data("xlim")
  xplot = get.cell.meta.data("xplot")
  ylim = get.cell.meta.data("ylim")
  sector.name = get.cell.meta.data("sector.index")
  
  if(abs(xplot[2] - xplot[1]) < 20) {
    circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
                niceFacing = TRUE, adj = c(0, 0.5), col = "red")
  } else {
    circos.text(mean(xlim), ylim[1], sector.name, facing = "inside", 
                niceFacing = TRUE, adj = c(0.5, 0), col= "blue")
  }
}, bg.border = NA)

############################### Gör radarcharts och klustring på BMI/weight proteiner
bmi.weight.prot<-colnames(circos.mat.weight.log)[1:50]
bmi.weight.prot.up<-colnames(circos.coef.mat.weight.50)[which(circos.coef.mat.weight.50[1,]>0)]
bmi.weight.prot.down<-colnames(circos.coef.mat.weight.50)[which(circos.coef.mat.weight.50[1,]<0)]

bmi.weight.prot.pos<-which(names(olink.visit1.tot) %in% bmi.weight.prot)

make.circlize.dendrogram.radar.plot<-function(protein.vec, filename) {
  prot.pos<-which(names(olink.visit1.tot) %in% protein.vec)
  
  delta1 = (olink.visit2.tot[,prot.pos]-olink.visit1.tot[,prot.pos])
  delta2 =  (olink.visit3.tot[,prot.pos]-olink.visit2.tot[,prot.pos])
  delta3 =  (olink.visit4.tot[,prot.pos]-olink.visit3.tot[,prot.pos])
  delta = rbind(delta1, delta2, delta3)
  
  remove <- unique(which(is.na(delta),arr.ind=T)[,"col"])
  if(length(remove)>0) {
    names(delta)[remove] # [1] "CA5A"    "CTSD"    "CES1"    "TGFBR3"  "SSC4D"   "RTN4R"   "FBP1"    "SULT2A1" "P4HB"    "SPINT1" 
    delta <- delta[,-remove]
  }
  
  # F??rst en klustring f??r att f?? variablerna i en bra ordning
  hc = hclust(dist(cor(delta)))
  
  # Cirkul??rt dendrogram (obs, ej radarplot men jag tar med den ??nd?? som en bonus)
  dend <- as.dendrogram(hc) %>% dendextend::set("labels_cex", value = 0.5)
  dend <- dend %>% 
    color_branches(k=4) %>% 
    color_labels 
  
  pdf(file=filename, w=4,h=4)
  par(mar = rep(0,4)) 
  circlize_dendrogram(dend, dend_track_height = 0.8, labels_track_height = 0.1) 
  dev.off()
}
make.circlize.dendrogram.radar.plot(bmi.weight.prot, "weight.bmi.circle.dendrogram.50.pdf")
make.circlize.dendrogram.radar.plot(bmi.weight.prot.up, "weight.bmi.circle.dendrogram.positive.pdf")
make.circlize.dendrogram.radar.plot(bmi.weight.prot.down, "weight.bmi.circle.dendrogram.negative.pdf")

subj = "3834"
plot.radar.weight.prot.vec<-function(subj, protein.vec, filename) {
  prot.pos<-which(names(olink.visit1.tot) %in% protein.vec)
  
  delta1 = (olink.visit2.tot[,prot.pos]-olink.visit1.tot[,prot.pos])
  delta2 =  (olink.visit3.tot[,prot.pos]-olink.visit2.tot[,prot.pos])
  delta3 =  (olink.visit4.tot[,prot.pos]-olink.visit3.tot[,prot.pos])
  delta = rbind(delta1, delta2, delta3)
  
   remove <- unique(which(is.na(delta),arr.ind=T)[,"col"])
   if(length(remove)>0) {
     names(delta)[remove] # [1] "CA5A"    "CTSD"    "CES1"    "TGFBR3"  "SSC4D"   "RTN4R"   "FBP1"    "SULT2A1" "P4HB"    "SPINT1" 
     delta <- delta[,-remove]
   }
  
  # F??rst en klustring f??r att f?? variablerna i en bra ordning
  hc = hclust(dist(cor(delta)))
  
  # Cirkul??rt dendrogram (obs, ej radarplot men jag tar med den ??nd?? som en bonus)
  dend <- as.dendrogram(hc) %>% dendextend::set("labels_cex", value = 0.5)
  dend <- dend %>% 
    color_branches(k=4) %>% 
    color_labels 
  
  #pdf(file=filename, w=5,h=5)
  #par(mar = rep(0,4)) 
  #circlize_dendrogram(dend, dend_track_height = 0.8, labels_track_height = 0.1) 
  #dev.off()
  
  # Sortera datat enligt klustringsordningen f??r att f?? en snyggare radarplot
  data = cor(delta)
  rowInd = rev(order.dendrogram(dend))
  di = dim(data)
  nc = di[2L]
  nr = di[1L]
  colInd = 1L:nc
  data_ordered <- data[rowInd, colInd]
  
  subpos<-match(subj,olink.visit1.tot$subject_id )
  vars = rownames(data_ordered)
  ref_mx = rbind(olink.visit1.tot[, vars],
                 olink.visit2.tot[, vars],
                 olink.visit3.tot[, vars],
                 olink.visit4.tot[, vars])
  df = rbind(olink.visit1.tot[subpos, vars],
             olink.visit2.tot[subpos, vars],
             olink.visit3.tot[subpos, vars],
             olink.visit4.tot[subpos, vars])
  rownames(df) = paste0("visit",1:4)
  
  # H??r r??knar jag ut max- och minv??rdena f??r resp variabel i hela populationen, f??r att kunna skala radarplotten
 # maxes = apply(df, 2, max, na.rm=T)
#  mins = apply(df, 2, min, na.rm=T)
  maxes = apply(ref_mx, 2, max, na.rm=T)
  mins = apply(ref_mx, 2, min, na.rm=T)
 
 #  maxes[which(maxes==max(maxes))]<-max(maxes)-2
   df_maxmin = rbind(max=maxes, min=mins, df)
   
   pdf(file=filename,w=4,h=4)
  
  # Individual scaling
  # radarchart(df, pty=32, title=subj, centerzero=TRUE, vlcex=0.5, axistype=0,
  #            plty=1, cglwd=0.8, pcol=c("black","red","blue","yellow"), maxmin=FALSE,
  #            cglcol="grey")
  # # Scaling to population
  # pdf(file=filename,w=4,h=4)
  par(ps=5)
  radarchart(df_maxmin, pty=32, title=subj, centerzero=TRUE, vlcex=0.7, axistype=0,
             plty=1, cglwd=0.8, pcol=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"), maxmin=TRUE,
             cglcol="grey")
  legend("topright", col=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"), pch=20, legend=paste0("visit ",1:4), cex = 0.7, bty='n')
  dev.off()
}
#plot.radar.weight(3834)
#plot.radar.weight(3829)
#plot.radar.weight(3264)

plot.radar.weight.prot.vec(3834,bmi.weight.prot, "weight.bmi.radar.50.3834.pdf")
plot.radar.weight.prot.vec(3834,bmi.weight.prot.up, "weight.bmi.radar.50.3834.positive.pdf")
plot.radar.weight.prot.vec(3834,bmi.weight.prot.down, "weight.bmi.radar.50.3834.negative.pdf")


#Gör en PCA på alla personer baserat på dessa 50 proteiner och färga enligt BMI alt BMI-diff
bmi.weight.prot.pos<-which(names(olink.visit1.tot) %in% bmi.weight.prot)

bmi.weight.mat<-as.matrix(rbind(olink.visit1.tot[,bmi.weight.prot.pos], olink.visit2.tot[,bmi.weight.prot.pos],olink.visit3.tot[,bmi.weight.prot.pos], olink.visit4.tot[,bmi.weight.prot.pos]))
rownames(bmi.weight.mat)<-olink.tot$subject_id
bmi.weight.mat.no.na<-bmi.weight.mat[ , apply(bmi.weight.mat, 2, function(x) !any(is.na(x)))]
pca<-prcomp(bmi.weight.mat.no.na)
rot<-pca$r
scores<-pca$x

plot(rot[,1:2], pch="") 
text(rot[,1:2], colnames(bmi.weight.mat))



bmi.mat<-select(weight.data, subject_id,contains("_bmi"))
names(bmi.mat)[2:6]<-c("1","2","3", "4","5")
bmi.mat<-bmi.mat[,-6]
bmi.mat.olink<-bmi.mat[which(bmi.mat$subject_id %in% olink.subjects),]
bmi.vec.olink<-c(bmi.mat.olink$`1`, bmi.mat.olink$`2`, bmi.mat.olink$`3`, bmi.mat.olink$`4`)
bmi.diff.olink<- bmi.mat.olink$`4`-bmi.mat.olink$`1`
bmi.diff.vec<-rep(bmi.diff.olink, 4)

weight.mat<-select(weight.data, subject_id,contains("_weight"))
names(weight.mat)[2:6]<-c("1","2","3", "4","5")
weight.mat<-weight.mat[,-6]
weight.mat.olink<-weight.mat[which(weight.mat$subject_id %in% olink.subjects),]
weight.vec.olink<-c(weight.mat.olink$`1`, weight.mat.olink$`2`, weight.mat.olink$`3`, weight.mat.olink$`4`)
weight.diff.olink<- weight.mat.olink$`4`-weight.mat.olink$`1`
weight.diff.vec<-rep(weight.diff.olink, 4)


fat.mat<-select(weight.data, subject_id,contains("_fat"))
names(fat.mat)[2:6]<-c("1","2","3", "4","5")
fat.mat<-fat.mat[,-6]
fat.mat.olink<-fat.mat[which(fat.mat$subject_id %in% olink.subjects),]
fat.vec.olink<-c(fat.mat.olink$`1`, fat.mat.olink$`2`, fat.mat.olink$`3`, fat.mat.olink$`4`)
fat.diff.olink<- fat.mat.olink$`4`-fat.mat.olink$`1`
fat.diff.vec<-rep(fat.diff.olink, 4)


weight.bmi.df<-data.frame(subject=olink.tot$subject_id, bmi=bmi.vec.olink, bmi.diff=bmi.diff.vec,weight=weight.vec.olink, weight.diff=weight.diff.vec,fat=fat.vec.olink, fat.diff=fat.diff.vec, scores1=scores[,1],scores2=scores[,2])#, loadings1=rot[,1], loadings2=rot[,2])

b1<-ggplot(weight.bmi.df, aes(x=scores1, y=scores2, color=bmi))+geom_point()+ scale_colour_gradientn(colours = rainbow(4))+xlab("PC1")+ylab("PC2")
b2<-ggplot(weight.bmi.df, aes(x=scores1, y=scores2, color=bmi, label=subject))+geom_text(size=2.5)+ scale_colour_gradientn(colours = rainbow(4))+xlab("PC1")+ylab("PC2")
b3<-ggplot(weight.bmi.df, aes(x=scores1, y=scores2, color=bmi.diff, label=subject))+geom_text(size=2.5)+ scale_colour_gradientn(colours = rainbow(4))+xlab("PC1")+ylab("PC2")
pdf("weight.bmi.50.bmi.pca.pdf",w=16,h=5)
grid.arrange(b1,b2,b3, ncol=3)
dev.off()
w1<-ggplot(weight.bmi.df, aes(x=scores1, y=scores2, color=weight))+geom_point()+ scale_colour_gradientn(colours = rainbow(4))+xlab("PC1")+ylab("PC2")
w2<-ggplot(weight.bmi.df, aes(x=scores1, y=scores2, color=weight, label=subject))+geom_text(size=2.5)+ scale_colour_gradientn(colours = rainbow(4))+xlab("PC1")+ylab("PC2")
w3<-ggplot(weight.bmi.df, aes(x=scores1, y=scores2, color=weight.diff, label=subject))+geom_text(size=2.5)+ scale_colour_gradientn(colours = rainbow(4))+xlab("PC1")+ylab("PC2")
pdf("weight.bmi.50.weight.pca.pdf",w=16,h=5)
grid.arrange(w1,w2,w3, ncol=3)
dev.off()
f1<-ggplot(weight.bmi.df, aes(x=scores1, y=scores2, color=fat))+geom_point()+ scale_colour_gradientn(colours = rainbow(4))+xlab("PC1")+ylab("PC2")
f2<-ggplot(weight.bmi.df, aes(x=scores1, y=scores2, color=fat, label=subject))+geom_text(size=2.5)+ scale_colour_gradientn(colours = rainbow(4))+xlab("PC1")+ylab("PC2")
f3<-ggplot(weight.bmi.df, aes(x=scores1, y=scores2, color=fat.diff, label=subject))+geom_text(size=2.5)+ scale_colour_gradientn(colours = rainbow(4))+xlab("PC1")+ylab("PC2")
pdf("weight.bmi.50.fat.pca.pdf",w=16,h=5)
grid.arrange(f1,f2,f3, ncol=3)
dev.off()


pdf(file="bmi.weight.subjects.proseek.pdf",w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(scores[,1:2], pch="") 
text(scores[,1:2], olink.tot$subject_id, col=person.cols, cex=0.6) 
plot(scores[,1:2], pch=19, col=person.cols) 
dev.off()


############################### Gör radarcharts och klustring på CRP proteiner
crp.prot<-colnames(circos.mat.many.log.crp)[1:50]
crp.coef.mat<-circos.coef.mat["CRP",]
crp.coef.prot<-crp.coef.mat[crp.prot]
crp.prot.up<-names(crp.coef.prot)[which(crp.coef.prot>0)]
crp.prot.down<-names(crp.coef.prot)[which(crp.coef.prot<0)]

crp.prot.pos<-which(names(olink.visit1.tot) %in% crp.prot)

delta1 = (olink.visit2.tot[,crp.prot.pos]-olink.visit1.tot[,crp.prot.pos])
delta2 =  (olink.visit3.tot[,crp.prot.pos]-olink.visit2.tot[,crp.prot.pos])
delta3 =  (olink.visit4.tot[,crp.prot.pos]-olink.visit3.tot[,crp.prot.pos])
delta = rbind(delta1, delta2, delta3)

remove <- unique(which(is.na(delta),arr.ind=T)[,"col"])
names(delta)[remove]#[1] "CCL7"  "IL17C" "IL17A" "GCG"  
delta <- delta[,-remove]

# F??rst en klustring f??r att f?? variablerna i en bra ordning
hc = hclust(dist(cor(delta)))

# Cirkul??rt dendrogram (obs, ej radarplot men jag tar med den ??nd?? som en bonus)
dend <- as.dendrogram(hc) %>% dendextend::set("labels_cex", value = 0.5)
dend <- dend %>% 
  color_branches(k=4) %>% 
  color_labels 

pdf("crp.circle.dendrogram.50.pdf", w=4,h=4)
par(mar = rep(0,4)) 
circlize_dendrogram(dend, dend_track_height = 0.8, labels_track_height = 0.1) 
dev.off()

# Sortera datat enligt klustringsordningen f??r att f?? en snyggare radarplot
data = cor(delta)
rowInd = rev(order.dendrogram(dend))
di = dim(data)
nc = di[2L]
nr = di[1L]
colInd = 1L:nc
data_ordered <- data[rowInd, colInd]

subj = "3920"
plot.radar.crp<-function(subj) {
  subpos<-match(subj,olink.visit1.tot$subject_id )
  vars = rownames(data_ordered)
  ref_mx = rbind(olink.visit1.tot[, vars],
                 olink.visit2.tot[, vars],
                 olink.visit3.tot[, vars],
                 olink.visit4.tot[, vars])
  df = rbind(olink.visit1.tot[subpos, vars],
             olink.visit2.tot[subpos, vars],
             olink.visit3.tot[subpos, vars],
             olink.visit4.tot[subpos, vars])
  rownames(df) = paste0("visit",1:4)
  
  # H??r r??knar jag ut max- och minv??rdena f??r resp variabel i hela populationen, f??r att kunna skala radarplotten
  maxes = apply(ref_mx, 2, max, na.rm=T)
  mins = apply(ref_mx, 2, min, na.rm=T)
  df_maxmin = rbind(max=maxes, min=mins, df)
  par(ps=5)
  
  # Individual scaling
  #radarchart(df, pty=32, title=subj, centerzero=TRUE, vlcex=0.5, axistype=0,
  #           plty=1, cglwd=0.8, pcol=c("black","red","blue","yellow"), maxmin=FALSE,
  #           cglcol="grey")
  # Scaling to population
 
  pdf(paste0("radarchart_crp_50_",subj,".pdf"),w=4,h=4)
  par(ps=5)
  radarchart(df_maxmin, pty=32, title=subj, centerzero=TRUE, vlcex=0.7, axistype=0,
             plty=1, cglwd=0.8, pcol=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"), maxmin=TRUE,
             cglcol="grey")
  legend("topright", col=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"), pch=20, legend=paste0("visit ",1:4), cex = 0.7, bty='n')
  dev.off()
}
plot.radar.crp(3920)
plot.radar.crp(3512)


plot.radar.crp.prot.vec<-function(subj, protein.vec, filename) {
  prot.pos<-which(names(olink.visit1.tot) %in% protein.vec)
  
  delta1 = (olink.visit2.tot[,prot.pos]-olink.visit1.tot[,prot.pos])
  delta2 =  (olink.visit3.tot[,prot.pos]-olink.visit2.tot[,prot.pos])
  delta3 =  (olink.visit4.tot[,prot.pos]-olink.visit3.tot[,prot.pos])
  delta = rbind(delta1, delta2, delta3)
  
  remove <- unique(which(is.na(delta),arr.ind=T)[,"col"])
  if(length(remove)>0) {
    names(delta)[remove] # [1] "CA5A"    "CTSD"    "CES1"    "TGFBR3"  "SSC4D"   "RTN4R"   "FBP1"    "SULT2A1" "P4HB"    "SPINT1" 
    delta <- delta[,-remove]
  }
  
  # F??rst en klustring f??r att f?? variablerna i en bra ordning
  hc = hclust(dist(cor(delta)))
  
  # Cirkul??rt dendrogram (obs, ej radarplot men jag tar med den ??nd?? som en bonus)
  dend <- as.dendrogram(hc) %>% dendextend::set("labels_cex", value = 0.5)
  dend <- dend %>% 
    color_branches(k=4) %>% 
    color_labels 
  
  #pdf(file=filename, w=5,h=5)
  #par(mar = rep(0,4)) 
  #circlize_dendrogram(dend, dend_track_height = 0.8, labels_track_height = 0.1) 
  #dev.off()
  
  # Sortera datat enligt klustringsordningen f??r att f?? en snyggare radarplot
  data = cor(delta)
  rowInd = rev(order.dendrogram(dend))
  di = dim(data)
  nc = di[2L]
  nr = di[1L]
  colInd = 1L:nc
  data_ordered <- data[rowInd, colInd]
  
  subpos<-match(subj,olink.visit1.tot$subject_id )
  vars = rownames(data_ordered)
  ref_mx = rbind(olink.visit1.tot[, vars],
                 olink.visit2.tot[, vars],
                 olink.visit3.tot[, vars],
                 olink.visit4.tot[, vars])
  df = rbind(olink.visit1.tot[subpos, vars],
             olink.visit2.tot[subpos, vars],
             olink.visit3.tot[subpos, vars],
             olink.visit4.tot[subpos, vars])
  rownames(df) = paste0("visit",1:4)
  
  # H??r r??knar jag ut max- och minv??rdena f??r resp variabel i hela populationen, f??r att kunna skala radarplotten
  # maxes = apply(df, 2, max, na.rm=T)
  #  mins = apply(df, 2, min, na.rm=T)
  maxes = apply(ref_mx, 2, max, na.rm=T)
  mins = apply(ref_mx, 2, min, na.rm=T)
  
  #  maxes[which(maxes==max(maxes))]<-max(maxes)-2
  df_maxmin = rbind(max=maxes, min=mins, df)
  
  pdf(file=filename,w=4,h=4)
  
  # Individual scaling
  # radarchart(df, pty=32, title=subj, centerzero=TRUE, vlcex=0.5, axistype=0,
  #            plty=1, cglwd=0.8, pcol=c("black","red","blue","yellow"), maxmin=FALSE,
  #            cglcol="grey")
  # # Scaling to population
  # pdf(file=filename,w=4,h=4)
  par(ps=5)
  radarchart(df_maxmin, pty=32, title=subj, centerzero=TRUE, vlcex=0.7, axistype=0,
             plty=1, cglwd=0.8, pcol=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"), maxmin=TRUE,
             cglcol="grey")
  legend("topright", col=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"), pch=20, legend=paste0("visit ",1:4), cex = 0.7, bty='n')
  dev.off()
}
#plot.radar.crp(3834)
#plot.radar.crp(3829)
#plot.radar.crp(3264)

plot.radar.crp.prot.vec(3920,names(crp.coef.prot), "crp.radar.50.3920.pdf")
plot.radar.crp.prot.vec(3920,crp.prot.up, "crp.radar.50.3920.positive.pdf")
plot.radar.crp.prot.vec(3920,crp.prot.down, "crp.radar.50.3920.negative.pdf")


subj.vec<-c(4107, 4109, 4127, 4129, 4135, 4150, 4151, 4189, 4191, 4192, 4198, 4210, 4211, 4270, 4283, 4295)
plot.radar.crp.many<-function(subj.vec,filename,header.name) {
  subposes<-which(olink.visit1.tot$subject_id %in% subj.vec )
  vars = rownames(data_ordered)
  ref_mx = rbind(olink.visit1.tot[, vars],
                 olink.visit2.tot[, vars],
                 olink.visit3.tot[, vars],
                 olink.visit4.tot[, vars])
  df = rbind(olink.visit1.tot[subposes, vars],
             olink.visit2.tot[subposes, vars],
             olink.visit3.tot[subposes, vars],
             olink.visit4.tot[subposes, vars])
  rownames(df) = c(paste0(subj.vec,"_1"),paste0(subj.vec,"_2"),paste0(subj.vec,"_3"),paste0(subj.vec,"_4"))
  
  
  # H??r r??knar jag ut max- och minv??rdena f??r resp variabel i hela populationen, f??r att kunna skala radarplotten
  maxes = apply(ref_mx, 2, max, na.rm=T)
  mins = apply(ref_mx, 2, min, na.rm=T)
  df_maxmin = rbind(max=maxes, min=mins, df)
  par(ps=5)
  
  # Individual scaling
  #radarchart(df, pty=32, title=subj, centerzero=TRUE, vlcex=0.5, axistype=0,
  #           plty=1, cglwd=0.8, pcol=c("black","red","blue","yellow"), maxmin=FALSE,
  #           cglcol="grey")
  # Scaling to population
  
  pdf(filename,w=5,h=5)
  par(ps=5)
  radarchart(df_maxmin, pty=32, title=header.name,centerzero=TRUE, vlcex=0.7, axistype=0,
             plty=1, cglwd=0.8, pcol=c(rep("#e41a1c",length(subj.vec)), rep("#377eb8",length(subj.vec)),  rep("#4daf4a",length(subj.vec)), rep("#984ea3",length(subj.vec))), maxmin=TRUE,
             cglcol="grey")
  legend("topright", col=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"), pch=20, legend=paste0("visit ",1:4), cex = 0.7, bty='n')
  dev.off()
}
plot.radar.crp.many(olink.subjects,"radarchart_crp_50_all_subjects.pdf","All subjects")

######### Gör korrelationsmatris till Circos
proseek.df<-proseek.CVDII.visit1.NA[,-1]
cor.mat<-cor(proseek.df, method="pearson", use="pairwise.complete.obs")
high.prot<-vector()
for(j in 1:ncol(cor.mat)) {
  cor.vec<-cor.mat[-j,j]
  if(any(cor.vec>0.6)) {
    high.prot<-c(high.prot, j)
  }
}
cor.mat.high<-cor.mat[high.prot, high.prot]
cor.mat.high[which(cor.mat.high<0)]<-0
cor.mat.high.rounded<-round(cor.mat.high*100)

write.table(cor.mat.high.rounded, file="circos.correlation.mat.cvdII.txt", row.names=T, col.names=T, quote = FALSE, sep="\t")

proseek.df<-olink.visit1.tot[,-1]
cor.mat<-cor(proseek.df, method="pearson", use="pairwise.complete.obs")
high.prot<-vector()
for(j in 1:ncol(cor.mat)) {
  cor.vec<-cor.mat[-j,j]
  cor.vec<-cor.vec[!is.na(cor.vec)]
  if(any(cor.vec>0.8)) {
 # if(length(which(cor.vec>0.6))>=5) {
      high.prot<-c(high.prot, j)
  }
}
cor.mat.high<-cor.mat[high.prot, high.prot]
#cor.mat.high[which(cor.mat.high<0)]<-0
#cor.mat.high.rounded<-round(cor.mat.high*100)

d <- 1 - cor.mat.high
hcl.high <- hclust(as.dist(d), "average") 
plot(hcl.high, hang=-1, cex=1)

pdf(file="most.varying.heatmap.protein.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(highly.varying.protein.mat.cor.prot, Rowv=as.dendrogram(hcl.prot), Colv=rev(as.dendrogram(hcl.prot)), trace="none", na.col="gray" ,margins=c(7,7), cexCol=0.8, cexRow=0.8, col=my_palette)
dev.off()


heatmap.2(cor.mat.high)


coef.mat<-matrix(nrow=0, ncol=ncol(test.well)+1)
colnames(coef.mat)<-c("Intercept",colnames(test.well))
anova.p.mat<-matrix(nrow=0, ncol=ncol(test.well))
colnames(anova.p.mat)<-colnames(test.well)

for(i in 2:num.prot) {
  prot.name<-olink.proteins[i]
  prot.mat<-as.data.frame(cbind(olink.visit1.tot$subject_id, olink.visit1.tot[,prot.name],olink.visit2.tot[,prot.name],olink.visit3.tot[,prot.name],olink.visit4.tot[,prot.name]))
  names(prot.mat)<-c("subject_id",1,2,3,4)
  prot.mat.melt<-melt(prot.mat, id.vars="subject_id")
  names(prot.mat.melt)<-c( "subject_id", "visit","expression")
  
  fit <- aov(expression ~ visit + subject_id, data=prot.mat.melt) 
  summary(fit)
  names(test.data)[1]<-"y"
  model<-glm(formula =  y ~ . , data=test.data)
#  model<- lm(formula =  y ~ . , data=test.data)
  summary(model)
  #anova.glm(model)
  coef.mat<-rbind(coef.mat, model$coefficients)
  anova.res<-anova(model, test="Chisq")
  anova.p<-anova.res$P[-1]
  anova.p.mat<-rbind(anova.p.mat, anova.p)
  
}  
rownames(coef.mat)<-colnames(olink.data)[-1]
rownames(anova.p.mat)<-colnames(olink.data)[-1]


for(j in 1:ncol(anova.p.mat)) {
  p.col<-anova.p.mat[,j]
  p.adj<-p.adjust(p.col, method="bonferroni")
  sig.pos<-which(p.adj<0.05)
  coefs<-coef.mat[sig.pos,j]
  positive<-names(coefs[which(coefs>0)])
  negative<-names(coefs[which(coefs<0)])
  if(length(positive>0)) {
    print(c(colnames(anova.p.mat)[j], " Up: ", paste(positive, collapse=" ")))  
  }
  if(length(negative>0)) {
    print(c(colnames(anova.p.mat)[j], " Down: ", paste(negative,collapse=" ")))
  }
}


  
  