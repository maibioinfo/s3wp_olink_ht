olink.wellness<-read.delim("wellness_932_proteins.txt", sep="\t", header=T)
olink.wellness$subject_id<-as.numeric(substring(olink.wellness$subject_id, 3))

olink.visit1.tot<-filter(olink.wellness, visit==1)[,-1]
olink.visit2.tot<-filter(olink.wellness, visit==2)[,-1]
olink.visit3.tot<-filter(olink.wellness, visit==3)[,-1]
olink.visit4.tot<-filter(olink.wellness, visit==4)[,-1]
olink.visit5.tot<-filter(olink.wellness, visit==5)[,-1]
olink.visit6.tot<-filter(olink.wellness, visit==6)[,-1]

visit.cols<-c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","turquoise")#"#f781bf")
names(visit.cols)<-1:6
visit.col<-visit.cols

olink.proteins<-names(olink.visit1.tot)[-1]
num.prot<-length(olink.proteins)
num.col<-ncol(olink.visit1.tot)
num.person<-nrow(olink.visit1.tot)
olink.subjects<-as.vector(olink.visit1.tot$subject_id)

olink.tot<-rbind(olink.visit1.tot, olink.visit2.tot, olink.visit3.tot,olink.visit4.tot, olink.visit5.tot, olink.visit6.tot)
subs<-paste0(olink.wellness$subject_id, "_", olink.wellness$visit)
olink.tot$subject_id<-subs

sex<-unlist((wellness.data[which(wellness.data$subject_id %in% olink.visit1.tot$subject_id ),"sex"]))
olink.sex.tot<-rep(sex,6)

ensg.info<-read.table("protein_coding_gene_info_ensembl_88.txt", header=T, sep="\t")

uniprot.olink.selected<-matrix(nrow=num.prot, ncol=7)
colnames(uniprot.olink.selected)<-c("olink_name","olink_uniprot","ensg_id","hgnc_gene","all_uniprot_for_gene","gene_description","ncbi_gene_summary")
for(j in 1:num.prot) {
  prot<-olink.proteins[j]
  uni<-proseek.uniprot.reduced[j]
  vec<-c(prot, uni, "","","","","")
  if(!is.na(uni)) {
     if(nchar(uni)>6) {
       uni<-substr(uni, 0,6) 
     }  
    #Hämta även ensg och HGNC för dessa
    pos<-grep(uni, ensg.info$uniprot_id)
    if(length(pos)>0) {
        row<-ensg.info[pos,]
        if(nrow(row)>1) {
          row<-apply(row, 2, paste, collapse="/")
        }
        vec[3:7]<-as.vector(unlist(row[c(1,2,5,6,7)]))
    }
  }
  uniprot.olink.selected[j,]<-vec
}
#write.table(uniprot.olink.selected, file="olink.uniprot.gene.info.txt", quote=F,row.names=F, sep="\t")
uniprot.olink.selected.df<-as.data.frame(uniprot.olink.selected)

setdiff(uniprot.olink.selected.df$olink_name, uniprot.olink.selected.df$hgnc_gene)
tot.uniprot.olink.info<-cbind(uniprot.olink.selected.df, olink.go.uniprot.reduced.mat[,-1])
#write.table(tot.uniprot.olink.info, file="olink.uniprot.go.gene.info.txt", quote=F,row.names=F, sep="\t")

uniprot.olink.selected[which(is.na(uniprot.olink.selected[,2])),]



############# UMAP

wellness.t2d<-read.table("S3_Wellness_T2D_Linn_190423.csv", header=T, sep=",")
wellness.t2d$VisitName<-as.numeric(substring(wellness.t2d$VisitName, 7))
names(wellness.t2d)[1:2]<-c("subject_id", "visit")
wellness.t2d<-arrange(wellness.t2d, subject_id)
wellness.t2d$TNT<-as.numeric(as.character(wellness.t2d$TNT))
wellness.t2d$subject_id_short<-as.numeric(substring(wellness.t2d$subject_id, 3))



olink.table.1.6<-read.delim("wellness_932_proteins.txt", sep="\t", header=T)
olink.table.1.6$subject_id<-as.numeric(substring(olink.table.1.6$subject_id, 3))

olink.subjects<-olink.table.1.6$subject_id
olink.visits<-olink.table.1.6$visit
olink.subject.visit<-paste0(olink.table.1.6$subject_id, "_", olink.table.1.6$visit)
olink.table.1.6<-as.matrix(olink.table.1.6[,-c(1:2)])
rownames(olink.table.1.6)<-olink.subject.visit

olink.exprs.knn <- impute.knn(t(olink.table.1.6))
olink.exprs.data<-t(olink.exprs.knn$data)
olink.exprs.data.scale<-scale(olink.exprs.data)

write.table(cbind(rownames(olink.exprs.data), olink.exprs.data), file="umap.olink.input.932.txt", sep="\t",quote =  F)
write.table(cbind(rownames(olink.exprs.data.scale),olink.exprs.data.scale), file="umap.olink.input.932.scaled.txt", sep="\t", quote=F)

#Diabetes
olink.t2d.table.1.6<-read.delim("T2D_932_proteins.txt", sep="\t", header=T)
olink.t2d.table.1.6$subject_id<-as.numeric(substring(olink.t2d.table.1.6$subject_id, 3))

olink.t2d.subjects<-olink.t2d.table.1.6$subject_id
olink.t2d.subject.visit<-paste0(olink.t2d.table.1.6$subject_id, "_", olink.t2d.table.1.6$visit)
olink.t2d.table.1.6<-as.matrix(olink.t2d.table.1.6[,-c(1:2)])
rownames(olink.t2d.table.1.6)<-olink.t2d.subject.visit

olink.t2d.exprs.knn <- impute.knn(t(olink.t2d.table.1.6))
olink.t2d.exprs.data<-t(olink.t2d.exprs.knn$data)
olink.t2d.exprs.data.scale<-scale(olink.t2d.exprs.data)
#olink.table.no.na<-olink.table.1.6[ , apply(olink.table.1.6, 2, function(x) !any(is.na(x)))]
umap.olink = umap(olink.exprs.data)
umap.olink.scale = umap(olink.exprs.data.scale)
umap.olink.t2d = umap(olink.t2d.exprs.data)
umap.olink.t2d.scale = umap(olink.t2d.exprs.data.scale)


olink.wellness.t2d.exprs.data<-rbind(olink.exprs.data,olink.t2d.exprs.data)
olink.wellness.t2d.exprs.data<-olink.wellness.t2d.exprs.data[-grep("3293", rownames(olink.wellness.t2d.exprs.data)),]# %in% c(4082, 3986)), ]
#olink.wellness.t2d.exprs.data<-olink.wellness.t2d.exprs.data[-grep("3986", rownames(olink.wellness.t2d.exprs.data)),]
olink.wellness.t2d.exprs.data.scale<-rbind(olink.exprs.data.scale,olink.t2d.exprs.data.scale)
olink.wellness.t2d.exprs.data.scale<-olink.wellness.t2d.exprs.data.scale[-grep("4082", rownames(olink.wellness.t2d.exprs.data.scale)),]
olink.wellness.t2d.exprs.data.scale<-olink.wellness.t2d.exprs.data.scale[-grep("3986", rownames(olink.wellness.t2d.exprs.data.scale)),]
olink.wellness.t2d.exprs.data.scale<-olink.wellness.t2d.exprs.data.scale[-grep("3293", rownames(olink.wellness.t2d.exprs.data.scale)),]
olink.wellness.t2d.exprs.data.scale<-olink.wellness.t2d.exprs.data.scale[-grep("3828", rownames(olink.wellness.t2d.exprs.data.scale)),]

umap.olink.wellness.t2d = umap(olink.wellness.t2d.exprs.data)
umap.olink.wellness.t2d.scale = umap(olink.wellness.t2d.exprs.data.scale)


num.t2d.subjects<-length(unique(olink.t2d.subjects))

wellness.subject.colors<-c("#8b6fed","#55be40","#ac42be","#5ed867","#902da6","#57a621","#3c66e8","#a5c533","#ad6beb","#7cb939","#d065e1","#3dc26b","#d539a4","#90d15e","#7348bd","#b7c035","#7377ec","#d1bb38","#4c7ff1","#e89b1b","#2e8bf3","#cca430","#4455bb","#799f2b","#a153c0","#3c8d25","#ee81e3","#32a24b","#e73379","#38cc94","#a53790","#81c675","#9e7ee9","#9a9d2c","#cf83e9","#6ba149","#c75fb4","#3b772c","#e25aa4","#4b9d65","#df3952","#47cebe","#d7412d","#5fc7f2","#da6224","#4b96eb","#ac850f","#5d7ad5","#d78330","#8065c2","#c4bc59","#794896","#a3bd61","#a76abe","#767c16","#d992e2","#525e1b","#e987c7","#2c6f47","#de5482","#70c297","#ab316c","#349176","#b5344e","#3db6c0","#aa3823","#1da4cc","#ef764f","#5da3db","#ac6019","#3f5d9c","#ebab51","#675ea2","#cfb464","#aa88d3","#b18d3d","#7880c3","#8c924a","#9aa3e8","#816c2a","#cca6e7","#6b7633","#b774a7","#7ca260","#934e7d","#b7b777","#377cb1","#d79b5f","#974863","#ee9c74","#e796bb","#92652b","#e0748e","#c8986c","#a14d51","#c06a47","#db8985","#924e2a","#e26d66")
names(wellness.subject.colors)<-wellness.data$subject_id

wellness.t2d.subject.colors<-c(wellness.subject.colors, wellness.subject.colors[1:num.t2d.subjects])
names(wellness.t2d.subject.colors)<-c(names(wellness.subject.colors), unique(olink.t2d.subjects))
                               
wellness.t2d.method.colors<-c(rep("blue", length(wellness.subject.colors)), rep("magenta", num.t2d.subjects))
names(wellness.t2d.method.colors)<-names(wellness.t2d.subject.colors)                               

subject.visit<- rownames(olink.t2d.exprs.data)
x<-umap.olink.t2d$layout[,1]
y<-umap.olink.t2d$layout[,2]
method<-"Olink T2D"
num<-ncol(olink.t2d.exprs.data)

plot.umap.all.methods.t2d<-function(x,y,subject.visit,method, num) {
  subject.vec<-substring(subject.visit, 0,4)
  
  unique.subjects<-unique(subject.vec)
  df<-filter(wellness.t2d, subject_id_short %in% unique.subjects)
  sex.df<-unique(select(df, subject_id_short, Gender))
  names(sex.df)<-c("subject_id", "Gender")
  title<-paste0(method, "\nNumber of subjects=",length(unique(subject.vec)), "\nn=",num)
  file.name<-paste0("umap.figure.",method,".pdf")
  data.df<-data.frame(x=x, y=y,  subject_id=subject.vec, subject.visit=subject.visit)
  data.df<- merge(data.df, sex.df, by="subject_id")
  sex.colors<-c("#F8766D", "#00BFC4")
  names(sex.colors)<-c("f","m")
  
  g1<-ggplot(data.df, aes(x=x, y=y, group=subject_id, color=subject_id))+geom_point(size=4, alpha=0.3) +geom_path() +xlab("UMAP1")+ylab("UMAP2")+ggtitle(title)+theme_light()+theme(legend.position="none")+ scale_color_manual(values=wellness.t2d.subject.colors)
  g1<-g1  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  
  g2<-ggplot(data.df, aes(x=x, y=y, group=subject_id, color=subject_id, label=subject.visit)) +geom_text(size=2) +geom_path() +xlab("UMAP1")+ylab("UMAP2")+ggtitle(title)+theme_light()+theme(legend.position="none")+ scale_color_manual(values=wellness.t2d.subject.colors)
  g2<-g2  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  
  # g3<-ggplot(data.df, aes(x=x, y=y)) +geom_text(size=2,aes(color=Gender,label=subject.visit)) +geom_path(aes(group=subject_id,color=Gender))
  g3<-ggplot(data.df, aes(x=x, y=y, color=Gender)) +geom_point(size=4, alpha=0.3) +geom_path(aes(group=subject_id,color=Gender)) 
  g3<-g3 +xlab("UMAP1")+ylab("UMAP2")+ggtitle(title)+theme_light()+theme(legend.position="none")+ scale_color_manual(values=sex.colors)
  g3<-g3 + stat_ellipse(aes(color=Gender, group = Gender),type = "t", linetype = "dotted", show.legend = F) 
  g3<-g3  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  
  pdf(file=file.name,w=16,h=6)
  grid.arrange(g1, g2, g3 , ncol=3,  top=textGrob("", gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
}


plot.umap.all.methods.t2d.combined<-function(x,y,subject.visit,method, num) {
  subject.vec<-substring(subject.visit, 0,4)
  
  unique.subjects<-unique(subject.vec)
  df<-filter(wellness.t2d, subject_id_short %in% unique.subjects)
  sex.df<-unique(select(df, subject_id_short, Gender))
  names(sex.df)<-c("subject_id", "Gender")
  title<-paste0(method, "\nNumber of subjects=",length(unique(subject.vec)), "\nn=",num)
  file.name<-paste0("umap.figure.",method,".pdf")
  data.df<-data.frame(x=x, y=y,  subject_id=subject.vec, subject.visit=subject.visit)
  data.df<- merge(data.df, sex.df, by="subject_id")
  sex.colors<-c("#F8766D", "#00BFC4")
  names(sex.colors)<-c("f","m")
  
  g1<-ggplot(data.df, aes(x=x, y=y, group=subject_id, color=subject_id))+geom_point(size=4, alpha=0.3) +geom_path() +xlab("UMAP1")+ylab("UMAP2")+ggtitle(title)+theme_light()+theme(legend.position="none")+ scale_color_manual(values=wellness.t2d.method.colors)
  g1<-g1  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  
  g2<-ggplot(data.df, aes(x=x, y=y, group=subject_id, color=subject_id, label=subject.visit)) +geom_text(size=2) +geom_path() +xlab("UMAP1")+ylab("UMAP2")+ggtitle(title)+theme_light()+theme(legend.position="none")+ scale_color_manual(values=wellness.t2d.method.colors)
  g2<-g2  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  
  # g3<-ggplot(data.df, aes(x=x, y=y)) +geom_text(size=2,aes(color=Gender,label=subject.visit)) +geom_path(aes(group=subject_id,color=Gender))
  g3<-ggplot(data.df, aes(x=x, y=y, color=Gender)) +geom_point(size=4, alpha=0.3) +geom_path(aes(group=subject_id,color=Gender)) 
  g3<-g3 +xlab("UMAP1")+ylab("UMAP2")+ggtitle(title)+theme_light()+theme(legend.position="none")+ scale_color_manual(values=sex.colors)
  g3<-g3 + stat_ellipse(aes(color=Gender, group = Gender),type = "t", linetype = "dotted", show.legend = F) 
  g3<-g3  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  
  pdf(file=file.name,w=16,h=6)
  grid.arrange(g1, g2, g3 , ncol=3,  top=textGrob("", gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
}


plot.umap.all.methods.t2d(umap.olink$layout[,1], umap.olink$layout[,2], rownames(olink.exprs.data), "Olink wellness", ncol(olink.exprs.data))
plot.umap.all.methods.t2d(umap.olink.scale$layout[,1], umap.olink.scale$layout[,2], rownames(olink.exprs.data.scale), "Olink wellness scaled", ncol(olink.exprs.data.scale))
plot.umap.all.methods.t2d(umap.olink.t2d$layout[,1], umap.olink.t2d$layout[,2], rownames(olink.t2d.exprs.data), "Olink T2D", ncol(olink.t2d.exprs.data))
plot.umap.all.methods.t2d(umap.olink.t2d.scale$layout[,1], umap.olink.t2d.scale$layout[,2], rownames(olink.t2d.exprs.data.scale), "Olink T2D scaled", ncol(olink.t2d.exprs.data.scale))

plot.umap.all.methods.t2d.combined(umap.olink.wellness.t2d$layout[,1], umap.olink.wellness.t2d$layout[,2], rownames(olink.wellness.t2d.exprs.data), "Olink Wellness T2D ", ncol(olink.wellness.t2d.exprs.data))
plot.umap.all.methods.t2d.combined(umap.olink.wellness.t2d.scale$layout[,1], umap.olink.wellness.t2d.scale$layout[,2], rownames(olink.wellness.t2d.exprs.data.scale), "Olink Wellness T2D scaled", ncol(olink.wellness.t2d.exprs.data.scale))



#weight.up.olink.pos<-which(olink.subjects %in% weight.up$subject_id)
#weight.down.olink.pos<-which(olink.subjects %in% weight.down$subject_id)
#olink.subjects[weight.down.olink.pos]
### Boxplots med fördelningen NPX av alla 4 visits 
visit1.mat<-as.matrix(olink.visit1.tot[,-1])
visit2.mat<-as.matrix(olink.visit2.tot[,-1])
visit3.mat<-as.matrix(olink.visit3.tot[,-1])
visit4.mat<-as.matrix(olink.visit4.tot[,-1])
visit5.mat<-as.matrix(olink.visit5.tot[,-1])
visit6.mat<-as.matrix(olink.visit6.tot[,-1])

pdf(file="proseek.tot.boxplot.protein.visit1.6.pdf", w=14,h=12)
layout(matrix(nrow=6, 1:6))
par(las=2, mar=c(4,4,4,2))
boxplot(visit1.mat[,order(apply(visit1.mat, 2, var, na.rm=T))],ylab="log NPX", main="Visit 1",col=rainbow(ncol(visit1.mat)), cex=0.7, cex.axis=0.5)
boxplot(visit2.mat[,order(apply(visit2.mat, 2, var, na.rm=T))],ylab="log NPX", main="Visit 2", col=rainbow(ncol(visit1.mat)), cex=0.7, cex.axis=0.5)
boxplot(visit3.mat[,order(apply(visit3.mat, 2, var, na.rm=T))],ylab="log NPX", main="Visit 3", col=rainbow(ncol(visit1.mat)), cex=0.7, cex.axis=0.5)
boxplot(visit4.mat[,order(apply(visit4.mat, 2, var, na.rm=T))],ylab="log NPX", main="Visit 4", col=rainbow(ncol(visit1.mat)), cex=0.7, cex.axis=0.5)
boxplot(visit4.mat[,order(apply(visit5.mat, 2, var, na.rm=T))],ylab="log NPX", main="Visit 5", col=rainbow(ncol(visit1.mat)), cex=0.7, cex.axis=0.5)
boxplot(visit4.mat[,order(apply(visit6.mat, 2, var, na.rm=T))],ylab="log NPX", main="Visit 6", col=rainbow(ncol(visit1.mat)), cex=0.7, cex.axis=0.5)
dev.off()


pdf(file="proseek.tot.boxplot.protein.visit1.6.high.variance.pdf", w=14,h=14)
layout(matrix(nrow=6, 1:6))
par(las=2, mar=c(5,4,4,2))
boxplot(visit1.mat[,order(apply(visit1.mat, 2, var, na.rm=T))[(ncol(visit1.mat)-50):ncol(visit1.mat)]],ylab="log NPX", main="Visit 1",col=rainbow(50), cex=0.7, cex.axis=1)
boxplot(visit2.mat[,order(apply(visit2.mat, 2, var, na.rm=T))[(ncol(visit2.mat)-50):ncol(visit2.mat)]],ylab="log NPX", main="Visit 2", col=rainbow(50), cex=0.7, cex.axis=1)
boxplot(visit3.mat[,order(apply(visit3.mat, 2, var, na.rm=T))[(ncol(visit3.mat)-50):ncol(visit3.mat)]],ylab="log NPX", main="Visit 3", col=rainbow(50), cex=0.7, cex.axis=1)
boxplot(visit4.mat[,order(apply(visit4.mat, 2, var, na.rm=T))[(ncol(visit4.mat)-50):ncol(visit4.mat)]],ylab="log NPX", main="Visit 4", col=rainbow(50), cex=0.7, cex.axis=1)
boxplot(visit5.mat[,order(apply(visit5.mat, 2, var, na.rm=T))[(ncol(visit5.mat)-50):ncol(visit5.mat)]],ylab="log NPX", main="Visit 5", col=rainbow(50), cex=0.7, cex.axis=1)
boxplot(visit6.mat[,order(apply(visit6.mat, 2, var, na.rm=T))[(ncol(visit6.mat)-50):ncol(visit6.mat)]],ylab="log NPX", main="Visit 6", col=rainbow(50), cex=0.7, cex.axis=1)
dev.off()



############## Plotta variansen för varje protein till artikeln
pdf(file="proseek.tot.variance.visit1.6.to.paper.pdf", w=14,h=5, useDingbats = F)
par(las=2, mar=c(5,4.2,4,2))

prot.sd.mat<-matrix(nrow=num.prot, ncol=6)
colnames(prot.sd.mat)<-c("visit1","visit2","visit3","visit4","visit5","visit6")
rownames(prot.sd.mat)<-olink.proteins

prot.sd.mat[,1]<-apply(olink.visit1.tot[,-1], 2, sd, na.rm=T)
prot.sd.mat[,2]<-apply(olink.visit2.tot[,-1], 2, sd, na.rm=T)
prot.sd.mat[,3]<-apply(olink.visit3.tot[,-1], 2, sd, na.rm=T)
prot.sd.mat[,4]<-apply(olink.visit4.tot[,-1], 2, sd, na.rm=T)
prot.sd.mat[,5]<-apply(olink.visit5.tot[,-1], 2, sd, na.rm=T)
prot.sd.mat[,6]<-apply(olink.visit6.tot[,-1], 2, sd, na.rm=T)
mean.prot.sd.vec<-apply(prot.sd.mat, 1, mean, na.rm=T)
ord.mean.prot.sd<-order(mean.prot.sd.vec, decreasing = T)
lower<-round(min(prot.sd.mat, na.rm=T), 1)
upper<-round(max(prot.sd.mat, na.rm=T),1)
cex.point=0.6
plot(prot.sd.mat[ord.mean.prot.sd,1], col=visit.col[1], ylim=c(lower, upper), xaxt='n', pch=19,  ylab="protein SD for one visit", xlab="", cex.axis=1, cex.lab=1, cex=cex.point, main="All proteins - standard deviation for one visit - sorted by mean visit SD")
axis(side=1, at=1:nrow(prot.sd.mat), labels=1:length(olink.proteins), xlab="", cex.axis=0.4, cex.lab=1)
lines(prot.sd.mat[ord.mean.prot.sd,2], col=visit.col[2], type="p", pch=19, cex=cex.point)
lines(prot.sd.mat[ord.mean.prot.sd,3], col=visit.col[3], type="p", pch=19, cex=cex.point)
lines(prot.sd.mat[ord.mean.prot.sd,4], col=visit.col[4], type="p", pch=19, cex=cex.point)
lines(prot.sd.mat[ord.mean.prot.sd,5], col=visit.col[5], type="p", pch=19, cex=cex.point)
lines(prot.sd.mat[ord.mean.prot.sd,6], col=visit.col[6], type="p", pch=19, cex=cex.point)
legend("bottomleft",c("Visit 1","Visit 2","Visit 3","Visit 4","Visit 5","Visit 6"), fill=visit.cols, bty="n", cex=0.8)

dev.off()


################################# Plotta korrelation för varje protein mellan alla visits
cor.mat<-matrix(nrow=num.prot, ncol=5)
colnames(cor.mat)<-c("visit 1-2","visit 2-3","visit 3-4","visit 4-5","visit 5-6")
rownames(cor.mat)<-olink.proteins
for(j in 2:num.col) {
  cor.vec<-rep(0, 5)
  cor.vec[1]<-cor(olink.visit1.tot[,j], olink.visit2.tot[,j], method="pearson", use="pairwise.complete.obs")
  cor.vec[2]<-cor(olink.visit2.tot[,j], olink.visit3.tot[,j], method="pearson", use="pairwise.complete.obs")
  cor.vec[3]<-cor(olink.visit3.tot[,j], olink.visit4.tot[,j], method="pearson", use="pairwise.complete.obs")
  cor.vec[4]<-cor(olink.visit4.tot[,j], olink.visit5.tot[,j], method="pearson", use="pairwise.complete.obs")
  cor.vec[5]<-cor(olink.visit5.tot[,j], olink.visit6.tot[,j], method="pearson", use="pairwise.complete.obs")
  cor.mat[j-1,]<-cor.vec
}
cor.ord<-order(cor.mat[,1], decreasing=T)

apply(cor.mat, 2, mean, na.rm=T)
cor.mean.vec<-apply(cor.mat, 1, mean, na.rm=T)

##### Ny correlations-matris baserat på alla kombinationer
cor.matrix<-matrix(nrow=0, ncol=3)
colnames(cor.matrix)<-c("protein","visits", "correlation")
#data.frame(correlation, visit, protein)

for(i in 1:num.prot) {
#for(i in 1:2) {
  vec<-olink.table.1.6[,i]
  prot<-colnames(olink.table.1.6)[i]
  for(j in 1:5) {
    for(k in 2:6) {
      if(j!=k) {
       corr<-cor(vec[which(olink.visits==j)], vec[which(olink.visits==k)], method="pearson", use="pairwise.complete.obs")
        cor.matrix<-rbind(cor.matrix, c(prot, paste0(j,"-",k), corr))
      }
    }
  }
}

cor.df<-as.data.frame(cor.matrix)

cor.df$correlation<-as.numeric(as.character(cor.df$correlation))
cor.df$visit1<-substring(cor.df$visits, 0,1)
cor.df$visit2<-substring(cor.df$visits, 3,3)
cor.df$type<-"1-4"
cor.df$type[which(cor.df$visit1<5 & cor.df$visit2 >4)]<-"mix"
cor.df$type[which(cor.df$visit1>4 & cor.df$visit2 <5)]<-"mix"
cor.df$type[which(cor.df$visit1>4 & cor.df$visit2 >4 )]<-"5-6"
    
save(cor.df, file="cor.df.Robject")                    
cor.df$colors<-"1-4"
cor.df$colors[which(cor.df$visit1==5)]<-"5"
cor.df$colors[which(cor.df$visit1==6)]<-"6"
cor.df$colors[which(cor.df$visit2==5)]<-"5"
cor.df$colors[which(cor.df$visit2==6)]<-"6"

pdf("correlation.boxplot.visit.colors.pdf", w=10, h=8)
ggplot(cor.df, aes(x=visits, y=correlation, fill=type)) + geom_boxplot() + scale_fill_manual(values=c("dodgerblue","green3","red")) + theme_light()
dev.off()

ggplot(cor.df, aes(x=visits, y=correlation, fill=type)) + geom_boxplot() + scale_fill_manual(values=c("dodgerblue","green3","red")) + theme_light()+ facet_grid(~ type, scales="free") 

pdf("correlation.violin.visit.colors.pdf", w=10, h=8)
ggplot(cor.df, aes(x=visits, y=correlation, fill=type)) + geom_violin(alpha=0.4) + geom_boxplot(width=0.1, fill="white") + scale_fill_manual(values=c("dodgerblue","green3","red")) + theme_light()
dev.off()
ggplot(cor.df, aes(x=visits, y=correlation, fill=type)) + geom_violin(alpha=0.4) + geom_boxplot(width=0.1, fill="white") + scale_fill_manual(values=c("dodgerblue","green3","red")) + theme_light()+ facet_grid(~ type, scales = "free_x")# + coord_fixed(1)



g1<-ggplot(filter(cor.df, type=="1-4"), aes(x=visits, y=correlation, fill=type)) + geom_boxplot()+ scale_fill_manual(values=c("dodgerblue")) + theme_light()
g2<-ggplot(filter(cor.df, type=="5-6"), aes(x=visits, y=correlation, fill=type)) + geom_boxplot() + scale_fill_manual(values=c("green3")) + theme_light()
g3<-ggplot(filter(cor.df, type=="mix"), aes(x=visits, y=correlation, fill=type)) + geom_boxplot()+ scale_fill_manual(values=c("red")) + theme_light()

pdf(file="correlation.boxplots.pdf",w=16,h=6)
grid.arrange(g1, g2, g3 , ncol=3,  top=textGrob("", gp=gpar(fontsize=15,fontface="bold")))
dev.off()


#Leta fram proteiner med stora diffar i correlation mellan olika visit
diff.cor.mat<-matrix(nrow=num.prot, ncol=6)
colnames(diff.cor.mat)<-c(colnames(cor.mat), "diff.cor")
rownames(diff.cor.mat)<-olink.proteins
for(i in 1:num.prot) {
  max.cor<-max(cor.mat[i,], na.rm=T)
  min.cor<-min(cor.mat[i,], na.rm=T)
  diff<-max.cor-min.cor
  diff.cor.mat[i,]<-c(cor.mat[i,], diff)
}
diff.corr.mat<-diff.cor.mat[order(diff.cor.mat[,"diff.cor"], decreasing=TRUE),]
diff.corr.mat.old.data<-diff.corr.mat

pdf("proseek.tot.cor.histograms.pdf", h=8, w=12)
layout(matrix(1:6, ncol=3, byrow=T))
mean.cor.vec<-rep(0,5)
for(j in 1:5) {
  mean.cor<-round(mean(cor.mat[,j], na.rm=T),2)
  mean.cor.vec[j]<-mean.cor
  hist(cor.mat[,j], main=colnames(cor.mat)[j], xlab="Pearson cor", col=rainbow(5)[j])
  legend("topleft", legend=paste0("Mean cor: ",mean.cor), bty="n")
}
dev.off()


pdf("proseek.tot.cor.density.pdf", h=6, w=6)
plot(density(cor.mat[,1], na.rm=T),xlab="Pearson cor", col=rainbow(6)[j], ylim=c(0,3), main="Correlation density")
mean.cor<-round(mean(cor.mat[,j], na.rm=T),2)
for(j in 2:5) {
  mean.cor<-round(mean(cor.mat[,j], na.rm=T),2)
  lines(density(cor.mat[,j], na.rm=T),col=rainbow(6)[j])
}
legend("topleft", legend=paste0(colnames(cor.mat)," / Mean: " ,mean.cor.vec), fill=rainbow(6), bty="n")
dev.off()

pdf("proseek.tot.cor.boxplot.pdf", h=6, w=6)
par(las=2)
boxplot(cor.mat, col=rainbow(6), ylab="Pearson cor")
dev.off()

sex<-unlist((wellness.data[which(wellness.data$subject_id %in% olink.visit1.tot$subject_id ),"sex"]))
olink.gender<-unlist((wellness.data[which(wellness.data$subject_id %in% olink.visit1.tot$subject_id ),"sex"]))
sex[which(sex=="f")]<-"#F8766D"
sex[which(sex=="m")]<-"#00BFC4"
olink.sex.col<-sex
olink.sex<-unlist((wellness.data[which(wellness.data$subject_id %in% olink.visit1.tot$subject_id ),"sex"]))

#Plotta med linjeplott per person
pdf(file="proseek.correlation.person.line.all.proteins.1.6.pdf", w=9,h=10,useDingbats = FALSE )
for(i in 1:num.prot) {
#for(i in 2:3) {
  par(mar=c(5,4,4,1), mgp=c(2.5,1,0))
  layout(matrix(c(rep(1,4),rep(2, 4), rep(3,4), rep(4,4),rep(5, 4), rep(6,4),rep(7, 4), rep(8,2), rep(9,4),rep(10,2)),nrow=3, ncol=12,byrow=T))
#  layout(matrix(1:12, nrow=2, byrow=T))
  npx1<-unlist(olink.visit1.tot[,(cor.ord[i]+1)])
  npx2<-unlist(olink.visit2.tot[,(cor.ord[i]+1)])
  npx3<-unlist(olink.visit3.tot[,(cor.ord[i]+1)])
  npx4<-unlist(olink.visit4.tot[,(cor.ord[i]+1)])
  npx5<-unlist(olink.visit5.tot[,(cor.ord[i]+1)])
  npx6<-unlist(olink.visit6.tot[,(cor.ord[i]+1)])
  name<-olink.proteins[cor.ord[i]]
  
  ce.ax<-1
  ce.la<-1
  
  lower<-round(min(c(npx1, npx2, npx3, npx4, npx5, npx6), na.rm=T), 1)
  upper<-round(max(c(npx1, npx2, npx3, npx4, npx5, npx6), na.rm=T),1)
  plot(npx1, npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(name, "\n",paste0("Pearson: ",round(cor(npx1, npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce.ax, cex.lab=ce.la)
  abline(a=0, b=1, lty=3)
  legend("topleft", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
  plot(npx2, npx3, ylim=c(lower, upper),xlim=c(lower, upper),col=sex,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 3", main=paste0(name, "\n",paste0("Pearson: ",round(cor(npx2, npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce.ax, cex.lab=ce.la)
  abline(a=0, b=1, lty=3)
  plot(npx3, npx4, ylim=c(lower, upper),xlim=c(lower, upper),col=sex,pch=19, xlab="log NPX visit 3", ylab="log NPX visit 4", main=paste0(name, "\n",paste0("Pearson: ",round(cor(npx3, npx4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce.ax, cex.lab=ce.la)
  abline(a=0, b=1, lty=3)
  plot(npx4, npx5, ylim=c(lower, upper),xlim=c(lower, upper),col=sex,pch=19, xlab="log NPX visit 4", ylab="log NPX visit 5", main=paste0(name, "\n",paste0("Pearson: ",round(cor(npx4, npx5, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce.ax, cex.lab=ce.la)
  abline(a=0, b=1, lty=3)
  plot(npx5, npx6, ylim=c(lower, upper),xlim=c(lower, upper),col=sex,pch=19, xlab="log NPX visit 5", ylab="log NPX visit 6", main=paste0(name, "\n",paste0("Pearson: ",round(cor(npx5, npx6, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce.ax, cex.lab=ce.la)
  abline(a=0, b=1, lty=3)
  frame()
  
  person.mat<-cbind(npx1, npx2, npx3,npx4,npx5,npx6)
  colnames(person.mat)<-c("visit 1","visit 2","visit 3","visit 4", "visit 5", "visit 6")
  rownames(person.mat)<-olink.visit1.tot$subject_id
  num.person<-nrow(person.mat)
  person.cols<-rainbow(num.person)
  plot(person.mat[1,], col=person.cols[1], type="o", ylim=c(lower, upper), xaxt='n', pch=19,  ylab="log NPX", xlab="", cex.axis=1, cex.lab=1, main=name)
  axis(side=1, at=c(1,2,3,4,5,6), labels=colnames(person.mat), xlab="", cex.axis=1, cex.lab=1)
  for(k in 2:num.person) {
    lines(person.mat[k,], col=person.cols[k], type="o", pch=19)
  }
  ord<-order(npx1, decreasing=T)
  subjects.ordered<-olink.subjects[ord]
  colors.ordered<-person.cols[ord]
  # plot(1, type="n", axes=FALSE, xlab="", ylab="")
  plot(1, type="n", axes=FALSE, xlab="", ylab="")
  legend("topleft",legend=subjects.ordered[1:10], fill=colors.ordered[1:10], bty="n", cex=0.8)
  legend("topright",legend=subjects.ordered[11:20], fill=colors.ordered[11:20], bty="n", cex=0.8)
  # legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
  
  sd.vec<-apply(person.mat, 1, sd, na.rm=T)
  sd.ord<-order(sd.vec, decreasing=T)
  subjects.sd.ordered<-olink.subjects[sd.ord]
  colors.sd.ordered<-person.cols[sd.ord]
  plot(person.mat[sd.ord[1],], col=colors.sd.ordered[1], type="o", ylim=c(lower, upper), xaxt='n', pch=19,  ylab="log NPX", xlab="", cex.axis=1, cex.lab=1, main=paste0(name,"\n20 highest standard deviation"))
  axis(side=1, at=c(1,2,3,4,5,6), labels=colnames(person.mat), xlab="", cex.axis=1, cex.lab=1)
  for(k in 2:20) {
    lines(person.mat[sd.ord[k],], col=colors.sd.ordered[k], type="o", pch=19)
  }
  plot(1, type="n", axes=FALSE, xlab="", ylab="")
  
  npx.sd.ord<-order(npx1[sd.ord[1:20]], decreasing=T)
  
  legend("topleft",legend=subjects.sd.ordered[npx.sd.ord][1:10], fill=colors.sd.ordered[npx.sd.ord][1:10], bty="n", cex=0.8)
  legend("topright",legend=subjects.sd.ordered[npx.sd.ord][11:20], fill=colors.sd.ordered[npx.sd.ord][11:20], bty="n", cex=0.8)
  
  
}  
dev.off()


plot.beeswarm.protein<-function(prot) {
  #  layout(matrix(1:12, nrow=2, byrow=T))
  npx1<-unlist(olink.visit1.tot[,prot])
  npx2<-unlist(olink.visit2.tot[,prot])
  npx3<-unlist(olink.visit3.tot[,prot])
  npx4<-unlist(olink.visit4.tot[,prot])
  npx5<-unlist(olink.visit5.tot[,prot])
  npx6<-unlist(olink.visit6.tot[,prot])
  name<-prot
 
  person.df<-cbind(olink.subjects, npx1, npx2, npx3,npx4, npx5,npx6)
  colnames(person.df)<-c("subject","visit 1","visit 2","visit 3","visit 4","visit 5","visit 6")
 
  person.df<-cbind(npx1, npx2, npx3,npx4, npx5,npx6)
  colnames(person.df)<-c("visit1","visit2","visit3","visit4","visit5","visit6")
  rownames(person.df)<-olink.subjects
  person.df<-as.data.frame(person.df)
 # boxplot(person.df, outline=F, las=1, ylab="NPX", main=prot, ylim=c(min(person.df), max(person.df)))
  bs=beeswarm(person.df, cex=1.5, corral="gutter", pwcol=rep(olink.sex.col,6), pch=19, method="center", main=prot, ylab="NPX")
  tmp <- rownames(bs)
  tmp <- gsub("visit1|visit2|visit3|visit4|visit5|visit6","",tmp) ; 
  tmp <- unique(tmp)
  # for(i in 1:length(tmp)){
  #     index <- which(rownames(bs) %in% paste0(paste0("visit",1:6), tmp[i]))
  #     segments(x0=bs$x[index[1:3]],
  #              x1=bs$x[index[2:4]],
  #              y0=bs$y[index[1:3]],
  #              y1=bs$y[index[2:4]],
  #              col="grey50", lwd = 0.8, lty = "dashed" )
  # }
}
pdf(file="beeswarm.olink.proteins.all.1.6.pdf",w=6,h=6, useDingbats = F)
for(j in 1:length(olink.proteins)) {
  plot.beeswarm.protein(olink.proteins[j])
} 
dev.off()


plot.violin.protein<-function(prot) {
  #  layout(matrix(1:12, nrow=2, byrow=T))
  npx1<-unlist(olink.visit1.tot[,prot])
  npx2<-unlist(olink.visit2.tot[,prot])
  npx3<-unlist(olink.visit3.tot[,prot])
  npx4<-unlist(olink.visit4.tot[,prot])
  name<-prot
  
  person.df<-cbind(npx1, npx2, npx3,npx4)
  colnames(person.df)<-c("visit1","visit2","visit3","visit4")
  rownames(person.df)<-olink.subjects
  person.df<-as.data.frame(person.df)
  person.df$subject_id<-rownames(person.df)
  person.df$sex<-olink.sex
  person.melt<-melt(person.df, id.vars=c("subject_id","sex"))
  names(person.melt)<-c("subject_id","sex","visit","NPX")
 # g<-ggplot(person.melt, aes(x=visit, y=NPX, color=sex, fill=sex)) + geom_split_violin(alpha=0.4)+ geom_boxplot(width=0.2, fill="white")  +ggtitle(name) + theme_light() #+ scale_fill_manual(values=visit.col)
  #plot(g)
  # g<-ggplot(person.melt, aes(x=visit, y=NPX, color=sex, fill=sex)) + geom_point() +ggtitle(name) + theme_light() + scale_fill_manual(values=visit.col)
  # plot(g)
   g<-ggplot(person.melt, aes(x=visit, y=NPX, fill="grey"))  + geom_violin(alpha=0.4) + geom_boxplot(width=0.1, fill="white")  +ggtitle(name)+ theme_light()+ theme(legend.position="none")+ scale_fill_manual(values="grey")
   plot(g)
  #+ geom_violin(alpha=0.4) + geom_boxplot(width=0.1, fill="white") 
}
pdf(file="violin.olink.proteins.all.pdf",w=6,h=6, useDingbats = F)
for(j in 1:length(olink.proteins)) {
  plot.violin.protein(sort(olink.proteins)[j])
} 
dev.off()


plot.split.violin.protein<-function(prot) {
  #  layout(matrix(1:12, nrow=2, byrow=T))
  npx1<-unlist(olink.visit1.tot[,prot])
  npx2<-unlist(olink.visit2.tot[,prot])
  npx3<-unlist(olink.visit3.tot[,prot])
  npx4<-unlist(olink.visit4.tot[,prot])
  name<-prot
  
  person.df<-cbind(npx1, npx2, npx3,npx4)
  colnames(person.df)<-c("visit1","visit2","visit3","visit4")
  rownames(person.df)<-olink.subjects
  person.df<-as.data.frame(person.df)
  person.df$subject_id<-rownames(person.df)
  person.df$sex<-olink.sex
  person.melt<-melt(person.df, id.vars=c("subject_id","sex"))
  names(person.melt)<-c("subject_id","sex","visit","NPX")
  g<-ggplot(person.melt, aes(x=as.factor(visit), y=NPX, fill=as.factor(sex))) + geom_split_violin(alpha=0.5)  +ggtitle(name) + xlab("")
  g<- g+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.position = "none")
  g<- g  +  stat_summary(fun.y = "mean", fun.ymin = "mean", fun.ymax = "mean",geom = "crossbar",width = 0.25,position = position_dodge(width = .25))
  plot(g)
  #pg <- ggplot_build(g)
  #save(pg, file="violin.ggplot.data.example.R.object")
  #write.table(pg$data, file="violin.ggplot.data.example.txt", quote=F, sep="\t")

  # g<-ggplot(person.melt, aes(x=visit, y=NPX, color=sex, fill=sex)) + geom_point() +ggtitle(name) + theme_light() + scale_fill_manual(values=visit.col)
  # plot(g)
  # g<-ggplot(person.melt, aes(x=visit, y=NPX, color=visit, fill=visit))  + geom_violin(alpha=0.4) + geom_boxplot(width=0.1, fill="white") + theme_light() + scale_fill_manual(values=visit.col)
  # plot(g)
  #+ geom_violin(alpha=0.4) + geom_boxplot(width=0.1, fill="white") 
}
pdf(file="violin.split.olink.proteins.all.pdf",w=6,h=6, useDingbats = F)
for(j in 1:length(olink.proteins)) {
  plot.split.violin.protein(sort(olink.proteins)[j])
} 
dev.off()



plot.split.violin.boxplot.protein<-function(prot) {
  #  layout(matrix(1:12, nrow=2, byrow=T))
  npx1<-unlist(olink.visit1.tot[,prot])
  npx2<-unlist(olink.visit2.tot[,prot])
  npx3<-unlist(olink.visit3.tot[,prot])
  npx4<-unlist(olink.visit4.tot[,prot])
  name<-prot
  
  person.df<-cbind(npx1, npx2, npx3,npx4)
  colnames(person.df)<-c("visit1","visit2","visit3","visit4")
  rownames(person.df)<-olink.subjects
  person.df<-as.data.frame(person.df)
  person.df$subject_id<-rownames(person.df)
  person.df$sex<-olink.sex
  person.melt<-melt(person.df, id.vars=c("subject_id","sex"))
  names(person.melt)<-c("subject_id","sex","visit","NPX")
  g<-ggplot(person.melt, aes(x=visit, y=NPX, color=sex, fill=sex)) + geom_split_violin(alpha=0.4)+ geom_boxplot(width=0.2, fill="white")  +ggtitle(name) + theme_light() #+ scale_fill_manual(values=visit.col)
  plot(g)
  
  # g<-ggplot(person.melt, aes(x=visit, y=NPX, color=sex, fill=sex)) + geom_point() +ggtitle(name) + theme_light() + scale_fill_manual(values=visit.col)
  # plot(g)
  # g<-ggplot(person.melt, aes(x=visit, y=NPX, color=visit, fill=visit))  + geom_violin(alpha=0.4) + geom_boxplot(width=0.1, fill="white") + theme_light() + scale_fill_manual(values=visit.col)
  # plot(g)
  #+ geom_violin(alpha=0.4) + geom_boxplot(width=0.1, fill="white") 
}
pdf(file="violin.split.boxplot.olink.proteins.all.pdf",w=6,h=6, useDingbats = F)
for(j in 1:length(olink.proteins)) {
  plot.split.violin.boxplot.protein(sort(olink.proteins)[j])
} 
dev.off()


GeomSplitViolin <- ggproto("GeomSplitViolin", GeomViolin, 
                           draw_group = function(self, data, ..., draw_quantiles = NULL) {
                             data <- transform(data, xminv = x - violinwidth * (x - xmin), xmaxv = x + violinwidth * (xmax - x))
                             grp <- data[1, "group"]
                             newdata <- plyr::arrange(transform(data, x = if (grp %% 2 == 1) xminv else xmaxv), if (grp %% 2 == 1) y else -y)
                             newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
                             newdata[c(1, nrow(newdata) - 1, nrow(newdata)), "x"] <- round(newdata[1, "x"])
                             
                             if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
                               stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <=
                                                                         1))
                               quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
                               aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
                               aesthetics$alpha <- rep(1, nrow(quantiles))
                               both <- cbind(quantiles, aesthetics)
                               quantile_grob <- GeomPath$draw_panel(both, ...)
                               ggplot2:::ggname("geom_split_violin", grid::grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
                             }
                             else {
                               ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
                             }
                           })

geom_split_violin <- function(mapping = NULL, data = NULL, stat = "ydensity", position = "identity", ..., 
                              draw_quantiles = NULL, trim = TRUE, scale = "area", na.rm = FALSE, 
                              show.legend = NA, inherit.aes = TRUE) {
  layer(data = data, mapping = mapping, stat = stat, geom = GeomSplitViolin, 
        position = position, show.legend = show.legend, inherit.aes = inherit.aes, 
        params = list(trim = trim, scale = scale, draw_quantiles = draw_quantiles, na.rm = na.rm, ...))
}

############################### Plotta varje persons korrelation mellan alla proteiner visit till visit
person.fold.mat<-matrix(nrow=num.person, ncol=3)
rownames(person.fold.mat)<-olink.subjects
#colnames(person.fold.mat)<-c("fold visit 1-2","fold visit 2-3","fold visit 3-4")
colnames(person.fold.mat)<-c("1-2","2-3","3-4")

person.dist.mat<-matrix(nrow=num.person, ncol=3)
rownames(person.dist.mat)<-olink.subjects
colnames(person.dist.mat)<-c("1-2","2-3","3-4")

pdf(file="olink.person.correlation.fold.pdf",w=12,h=5)
for(j in 1:num.person) {
  subj<-olink.subjects[j]
  vec1<-unlist(olink.visit1.tot[j,-1])
  vec2<-unlist(olink.visit2.tot[j,-1])
  vec3<-unlist(olink.visit3.tot[j,-1])
  vec4<-unlist(olink.visit4.tot[j,-1])
  
  subj.mat<-rbind(vec1, vec2, vec3, vec4)
  #Ta bort de som kommer försvinna ur alla plottar (pga NA i 1-2, 2-3, eller 3-4) för att få skalan rätt i lower/upper
  na.vec<-apply(subj.mat, 2, function(x) length(which(is.na(x))))
 # names(na.vec)<-olink.proteins
  na.pos<-which(na.vec>1)
  if(length(na.pos>1)) {
    na.pos.new<-na.pos
    for(k in 1:length(na.pos)) {
      vec<-subj.mat[,na.pos[k]]
      na.vec.pos<-which(!is.na(vec))
      if(length(na.vec.pos)==2) {
        if(all(na.vec.pos==c(1,2)) | all(na.vec.pos==c(2,3)) | all(na.vec.pos==c(3,4))) {
          na.pos.new<-na.pos.new[-k]
        }
      }
    }
    na.pos<-na.pos.new
  }
  
  lower<-round(min(c(vec1[-na.pos], vec2[-na.pos], vec3[-na.pos], vec4[-na.pos]), na.rm=T), 1)
  upper<-round(max(c(vec1[-na.pos], vec2[-na.pos], vec3[-na.pos], vec4[-na.pos]), na.rm=T), 1)
  
  #Räkna ut log fold change mellan varje protein och besök
  folds<-cbind(vec1-vec2, vec2-vec3, vec3-vec4)
  mean.folds<-apply(folds, 2, mean, na.rm=T)
  person.fold.mat[j,]<-mean.folds
  
  #Räkna ut distansen mellan varje besök
  euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2, na.rm=T))
  dist12<-euc.dist(vec1,vec2)
  dist23<-euc.dist(vec2,vec3)
  dist34<-euc.dist(vec3,vec4)
  dist.vec<-c(dist12, dist23,dist34)
  person.dist.mat[j,]<-dist.vec
  
  subj.df<-data.frame(visit1=vec1, visit2=vec2, visit3=vec3, visit4=vec4, fold12=folds[,1], fold23=folds[,2],fold34=folds[,3],protein=olink.proteins)
  cors<-c(round(cor(vec1, vec2, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec2, vec3, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec3, vec4, method="pearson",use = "pairwise.complete.obs"),2))
  g1<-ggplot(subj.df, aes(x=visit1, y=visit2))+geom_point(size=1, data=subset(subj.df, abs(fold12) <= 0.5),aes(x=visit1, y=visit2))+ geom_text(data=subset(subj.df, abs(fold12) > 0.5),aes(x=visit1, y=visit2, color="red", label=protein),size=3)+ggtitle(paste0("Pearson: ",cors[1], ", Euc dist: " , round(dist.vec[1],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = 0.5, slope = 1, color="red",linetype=2) + geom_abline(intercept = -0.5, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  g3<-ggplot(subj.df, aes(x=visit3, y=visit4))+geom_point(size=1, data=subset(subj.df, abs(fold34) <= 0.5),aes(x=visit3, y=visit4))+ geom_text(data=subset(subj.df, abs(fold34) > 0.5),aes(x=visit3, y=visit4, color="red", label=protein),size=3)+ggtitle(paste0("Pearson: ",cors[3], ", Euc dist: " , round(dist.vec[3],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = 0.5, slope = 1, color="red",linetype=2) + geom_abline(intercept = -0.5, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  g2<-ggplot(subj.df, aes(x=visit2, y=visit3))+geom_point(size=1, data=subset(subj.df, abs(fold23) <= 0.5),aes(x=visit2, y=visit3))+ geom_text(data=subset(subj.df, abs(fold23) > 0.5),aes(x=visit2, y=visit3, color="red", label=protein),size=3)+ggtitle(paste0("Pearson: ",cors[2], ", Euc dist: " , round(dist.vec[2],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = 0.5, slope = 1, color="red",linetype=2) + geom_abline(intercept = -0.5, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
  grid.arrange(g1,g2, g3 , ncol=3,  top=textGrob(subj, gp=gpar(fontsize=15,fontface="bold")))
  # ce.ax<-1
  # ce.la<-1
  # layout(matrix(nrow=1, 1:3))
  # plot(vec1, vec2, ylim=c(lower, upper),xlim=c(lower, upper),pch=19,xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(subj, "\n",paste0("Pearson: ",round(cor(vec1, vec2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce.ax, cex.lab=ce.la)
  # abline(a=0, b=1, lty=3)
  # plot(vec2, vec3, ylim=c(lower, upper),xlim=c(lower, upper),pch=19,xlab="log NPX visit 2", ylab="log NPX visit 3", main=paste0(subj, "\n",paste0("Pearson: ",round(cor(vec2, vec3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce.ax, cex.lab=ce.la)
  # abline(a=0, b=1, lty=3)
  # plot(vec3, vec4, ylim=c(lower, upper),xlim=c(lower, upper),pch=19,xlab="log NPX visit 3", ylab="log NPX visit 4", main=paste0(subj, "\n",paste0("Pearson: ",round(cor(vec3, vec4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce.ax, cex.lab=ce.la)
  # abline(a=0, b=1, lty=3)
 
  
}
dev.off()

#Jämför distansen mot RNA
olink.rna.subjects<- Reduce(intersect, list(olink.subjects, rna.subjects))

sex.col.olink.rna<-unlist(wellness.data[which(wellness.data$subject_id %in% olink.rna.subjects ),"sex"])
sex.col.olink.rna[which(sex.col.olink.rna=="f")]<-"#F8766D"
sex.col.olink.rna[which(sex.col.olink.rna=="m")]<-"#00BFC4"

person.dist.mat.olink<-person.dist.mat
person.dist.mean.olink<-apply(person.dist.mat.olink, 1, mean)
person.dist.mean.rna<-apply(person.dist.mat.rna, 1, mean)

person.dist.mat.mean.compare<-cbind(person.dist.mean.olink[which(olink.subjects %in% olink.rna.subjects)],person.dist.mean.rna[which(rna.subjects %in% olink.rna.subjects)])
colnames(person.dist.mat.mean.compare)<-c("Olink mean distance", "RNA mean distance")

pdf(file="olink.rna.distance.comparison.pdf",w=8,h=8)
plot(person.dist.mat.mean.compare, pch="")
text(person.dist.mat.mean.compare,as.character(olink.rna.subjects), col=sex.col.olink.rna)
dev.off()

##### Lägg till autoantibody, CYTOF,16s och clinical

meta16<-read.table("table_betadiversity_individual_16S_unifrac.txt", sep="\t",header=T)
names(meta16)[1]<-"subject_id"

auto.dist<-read.table("autoantibody_WH_Euclidean_distances_coring_2017-10-02_100847.txt", sep="\t", header=T)
colnames(auto.dist)[1]<-"subject_id"
auto.dist$mean.dist<-apply(auto.dist[,2:4], 1, mean)


cytof.dist<-read.csv("CYTOF_aitchison_distances.csv",header=T)
cytof.dist<-dcast(cytof.dist[,-1], formula=Subject ~ Comparison)
colnames(cytof.dist)[1]<-"subject_id"
cytof.dist$mean.dist<-apply(cytof.dist[,2:4], 1, mean)
cytof.dist.sort<-cytof.dist[order(cytof.dist$mean.dist, decreasing = T),]
cytof.dist.new.output<-cytof.dist.sort[,c(1,5,2:4)]
names(cytof.dist.new.output)[3:5]<-c("dist12","dist23","dist34")
write.table(cytof.dist.new.output, file="cytof.aitchinsons.distance.txt", sep="\t", quote=F, row.names = F)

method.dist.mat.mean<-matrix(NA,nrow=length(subject.id), ncol=8)
colnames(method.dist.mat.mean)<-c("olink","rna","clinical","targeted","16s","auto","cytof","metabolomics")
rownames(method.dist.mat.mean)<-subject.id

method.dist.mat.per.visit<-matrix(NA,nrow=length(subject.id), ncol=24)
colnames(method.dist.mat.per.visit)<-c("olink12","olink23","olink34","rna12","rna23","rna34","clinical12","clinical23","clinical34","target12","target23","target34","16s12","16s23","16s34","auto12","auto23","auto34","cytof12","cytof23","cytof34","metabolomics12","metabolomics23","metabolomics34")
rownames(method.dist.mat.per.visit)<-subject.id

method.dist.df.per.visit<-matrix(nrow=0, ncol=4)
colnames(method.dist.df.per.visit)<-c("subject_id","visits","method","value")

for(i in 1:length(subject.id)) {
  subj<-subject.id[i]
  #olink-data
  if(length(grep(subj,rownames(person.dist.mat.olink )))>0) {
    row<-person.dist.mat.olink[grep(subj,rownames(person.dist.mat.olink )),]
    mean<-person.dist.mean.olink[grep(subj,rownames(person.dist.mat.olink ))]
    method.dist.mat.mean[i,1]<-mean
    method.dist.mat.per.visit[i,1:3]<-row
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"1-2","olink",row[1]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"2-3","olink",row[2]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"3-4","olink",row[3]))
  } 
  #RNA-seq
  if(length(grep(subj,rownames(person.dist.mat.rna )))>0) {
    row<-person.dist.mat.rna[grep(subj,rownames(person.dist.mat.rna )),]
    mean<-person.dist.mean.rna[grep(subj,rownames(person.dist.mat.rna ))]
    method.dist.mat.mean[i,2]<-mean
    method.dist.mat.per.visit[i,4:6]<-row
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"1-2","RNAseq",row[1]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"2-3","RNAseq",row[2]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"3-4","RNAseq",row[3]))
  }
  #Clinical
  method.dist.mat.mean[i,3]<-klin.distance.df[i,2]
  method.dist.mat.per.visit[i,7:9]<-as.numeric(klin.distance.df[i,3:5])
  method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"1-2","clinical",as.numeric(klin.distance.df[i,3])))
  method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"2-3","clinical",as.numeric(klin.distance.df[i,4])))
  method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"3-4","clinical",as.numeric(klin.distance.df[i,5])))
  #Target-seq
  if(length(grep(subj,target.distance.df.scale$subject_id))>0) {
    method.dist.mat.mean[i,4]<-target.distance.df.scale$mean.dist[grep(subj,target.distance.df.scale$subject_id)]
    row<-as.numeric(target.distance.df.scale[grep(subj,target.distance.df.scale$subject_id),3:5])
    method.dist.mat.per.visit[i,10:12]<-row
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"1-2","target",row[1]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"2-3","target",row[2]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"3-4","target",row[3]))
  }
  #16S
  if(length(grep(subj,meta16$subject_id))>0) {
    #method.dist.mat.mean[i,5]<-meta16$mean_within[grep(subj,meta16$subject_id)]
    row<-as.numeric(meta16[grep(subj,meta16$subject_id),2:4])
    method.dist.mat.mean[i,5]<-mean(row, na.rm=T)
    method.dist.mat.per.visit[i,13:15]<-row
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"1-2","16s",row[1]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"2-3","16s",row[2]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"3-4","16s",row[3]))
  }
  #Autoantibody
  if(length(grep(subj,auto.dist$subject_id))>0) {
    method.dist.mat.mean[i,6]<-auto.dist$mean.dist[grep(subj,auto.dist$subject_id)]
    row<-as.numeric(auto.dist[grep(subj,auto.dist$subject_id),2:4])
    method.dist.mat.per.visit[i,16:18]<-row
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"1-2","autoantibody",row[1]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"2-3","autoantibody",row[2]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"3-4","autoantibody",row[3]))
  }
  #CYTOF
  if(length(grep(subj,cytof.distance.df$subject_id))>0) {
    method.dist.mat.mean[i,7]<-cytof.distance.df$mean.dist[grep(subj,cytof.distance.df$subject_id)]
    row<-as.numeric(cytof.distance.df[grep(subj,cytof.distance.df$subject_id),3:5])
    method.dist.mat.per.visit[i,19:21]<-row
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"1-2","CYTOF",row[1]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"2-3","CYTOF",row[2]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"3-4","CYTOF",row[3]))
  }
  # if(length(grep(subj,cytof.dist$subject_id))>0) {
  #   method.dist.mat.mean[i,7]<-cytof.dist$mean.dist[grep(subj,cytof.dist$subject_id)]
  #   row<-as.numeric(cytof.dist[grep(subj,cytof.dist$subject_id),2:4])
  #   method.dist.mat.per.visit[i,19:21]<-row
  #   method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"1-2","CYTOF",row[1]))
  #   method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"2-3","CYTOF",row[2]))
  #   method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"3-4","CYTOF",row[3]))
  # }
  #Metabolomics
  if(length(grep(subj,metabol.distance.df$subject_id))>0) {
    method.dist.mat.mean[i,8]<-metabol.distance.df$mean.dist[grep(subj,metabol.distance.df$subject_id)]
    row<-as.numeric(metabol.distance.df[grep(subj,metabol.distance.df$subject_id),3:5])
    method.dist.mat.per.visit[i,22:24]<-row
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"1-2","metabolomics",row[1]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"2-3","metabolomics",row[2]))
    method.dist.df.per.visit<-rbind(method.dist.df.per.visit, c(subj,"3-4","metabolomics",row[3]))
  }
}

#method.dist.mat.per.visit.dcast<-dcast(method.dist.mat.per.visit, value.var=c())

write.table(method.dist.mat.per.visit, file="distance.per.method.and.visit.txt", sep="\t", quote=F, row.names=T)


#skala per visit
method.dist.mat.per.visit.scale<-scale(method.dist.mat.per.visit)
method.dist.mat.per.visit.scale.melt<-melt(method.dist.mat.per.visit.scale)
names(method.dist.mat.per.visit.scale.melt)<-c("subject_id","method.visit","value")
method.dist.mat.per.visit.scale.melt$visit<-substr(method.dist.mat.per.visit.scale.melt$method.visit, start=nchar(as.character(method.dist.mat.per.visit.scale.melt$method.visit))-1, stop=nchar(as.character(method.dist.mat.per.visit.scale.melt$method.visit)))
method.dist.mat.per.visit.scale.melt$value<-as.numeric(method.dist.mat.per.visit.scale.melt$value)

method.dist.df.per.visit<-as.data.frame(method.dist.df.per.visit)
method.dist.df.per.visit$value<-as.numeric(as.character(method.dist.df.per.visit$value))
method.dist.df.per.visit$subject_visit<-paste0(method.dist.df.per.visit$subject_id," ",method.dist.df.per.visit$visits)
method.dist.mat.per.visit.scale.no.na<-method.dist.mat.per.visit.scale[apply(method.dist.mat.per.visit.scale, 1, function(x) !any(is.na(x))),]

write.table(method.dist.df.per.visit, file="method.distance.per.visit.wellness.txt", sep="\t", quote=F)

#Gör PCA med alla metoder medelvärde
#method.dist.mat.mean<-method.dist.mat.mean[,-6] #tills vi har 16s
method.dist.mat.mean.no.na<-method.dist.mat.mean[apply(method.dist.mat.mean, 1, function(x) !any(is.na(x))),]
method.dist.mat.mean.no.na.scale<-scale(method.dist.mat.mean.no.na)

num.na.per.sub<-apply(method.dist.mat.mean, 1, function(x) length(which(is.na(x))))
num.na.per.method<-apply(method.dist.mat.mean, 2, function(x) length(which(is.na(x))))

method.7.overlap.sub<-rownames(method.dist.mat.per.visit.scale.no.na)
method.7.overlap.sex<-unlist(wellness.data[which(wellness.data$subject_id %in% method.7.overlap.sub),"sex"])
method.7.overlap.sex.col<-method.7.overlap.sex
method.7.overlap.sex.col[which(method.7.overlap.sex=="f")]<-"#F8766D"
method.7.overlap.sex.col[which(method.7.overlap.sex=="m")]<-"#00BFC4"


pca<- prcomp(method.dist.mat.mean.no.na.scale)
rot<-pca$r
scores<-pca$x

method.cols<-c("#66c2a5",  "#fc8d62","#8da0cb", "#e78ac3",  "#a6d854",  "#ffd92f",  "#e5c494","#b3b3b3")
pdf(file="pca.all.methods.mean.pdf",w=10,h=6)
layout(matrix(nrow=1, 1:2, byrow=T))
plot(rot[,1:2],pch="", main="Loadings") #col=group.cols, )
text(rot[,1:2], colnames(method.dist.mat.mean), col=method.cols,cex=0.8)
#legend("bottomright",class.names, fill=proteinclass.colors,  bty="n",cex=0.6)
plot(scores[,1:2], pch="", main="Scores")
text(scores[,1:2],as.character(rownames(method.dist.mat.mean.no.na)), col=method.7.overlap.sex.col,cex=0.8)
dev.off()

write.table(method.dist.mat.mean, file="method.dist.mat.wellness.txt", quote=F, sep="\t")

method.cols.visit<-rep(method.cols,each=3)

#Gör PCA med alla metoder och visiter skalas

#method.dist.mat.per.visit.scale.no.na.scale<-scale(method.dist.mat.per.visit.scale.no.na)
pca<- prcomp(method.dist.mat.per.visit.scale.no.na, scale.=T)
rot<-pca$r
scores<-pca$x
pdf(file="pca.all.methods.visit.pdf",w=10,h=6)
layout(matrix(nrow=1, 1:2, byrow=T))
plot(rot[,1:2],pch="", main="Loadings") #col=group.cols, )
text(rot[,1:2], colnames(method.dist.mat.per.visit.scale.no.na), col=method.cols.visit,cex=0.8)
#legend("bottomright",class.names, fill=proteinclass.colors,  bty="n",cex=0.6)
plot(scores[,1:2], pch="", main="Scores")
text(scores[,1:2],as.character(rownames(method.dist.mat.per.visit.scale.no.na)), col=method.7.overlap.sex.col,cex=0.8)
dev.off()


#Samam sak med tSNE
r = Rtsne(method.dist.mat.per.visit.scale.no.na, perplexity = 20)
r.met = Rtsne(t(method.dist.mat.per.visit.scale.no.na), perplexity = 6)

pdf(file="tsne.all.methods.visit.pdf",w=10,h=6)
layout(matrix(nrow=1, 1:2, byrow=T))
plot(r.met$Y[,1:2], pch="") 
text(r.met$Y[,1:2], colnames(method.dist.mat.per.visit.scale.no.na),col=method.cols.visit,cex=0.8) 
plot(r$Y[,1:2], pch="") 
text(r$Y[,1:2], rownames(method.dist.mat.per.visit.scale.no.na), col=method.7.overlap.sex.col,cex=0.8) 
dev.off()

###### Gör en linjeplott med varje metods rankade personer

method.names<-as.vector(unique(method.dist.df.per.visit$method))
method.names<-method.names[-which(method.names=="RNAseq")]
method.names<-method.names[-which(method.names=="target")]

method.dist.df.per.visit.no.rna<-filter(method.dist.df.per.visit, method!="RNAseq")
method.dist.df.per.visit.no.rna<-filter(method.dist.df.per.visit.no.rna, method!="target")
#method.dist.df.per.visit.1.2<-filter(method.dist.df.per.visit, visits=="1-2")
method.dist.mat<-matrix(nrow=0, ncol=3)
colnames(method.dist.mat)<-c("subject_id", "rank","method")
for(i in 1:length(method.names)) {
  met<-method.names[i]
  df<-filter(method.dist.df.per.visit.no.rna, method==met)
  #df<-method.dist.df.per.visit[which(method.dist.df.per.visit$method==met),]
  df.1.2<-df[which(df$visits=="1-2"),]
  df.1.2$rank<-rank(df.1.2$value)
  method.dist.mat<-rbind(method.dist.mat, select(df.1.2, subject_id, rank, method))
}
method.dist.df<-as.data.frame(method.dist.mat)

method.dist.matrix<-dcast(method.dist.df, subject_id ~ method, value.var="rank")
method.dist.matrix.mean<-apply(method.dist.matrix[,-1], 1, mean, na.rm=T)
names(method.dist.matrix.mean)<-method.dist.matrix$subject_id
method.dist.matrix.sorted<-method.dist.matrix[order(method.dist.matrix.mean),]

load("states.Rdata")
states

rownames(method.dist.matrix.sorted)<-as.character(method.dist.matrix.sorted$subject_id)
method.dist.matrix.sorted<-method.dist.matrix.sorted[,-1]

pdf("slopegraph.methods.euc.distance.pdf",w=10,h=20)
slopegraph(method.dist.matrix.sorted, col.lines=rep(rainbow(20), 5))
dev.off()

ggslopegraph(method.dist.df[,c(2,1,3)])

# Plot per person

#find who is in all
method.dist.subject.method<-select(method.dist.df.per.visit.no.rna, subject_id, method)
method.dist.subject.method<-method.dist.subject.method[!duplicated(method.dist.subject.method),]
num.met<-table(method.dist.subject.method$subject_id)
all.subject.ids<-names(num.met)[which(num.met==max(num.met))]

method.dist.matrix.sorted.all.methods<-method.dist.matrix.sorted[which(rownames(method.dist.matrix.sorted) %in% all.subject.ids),]

method.dist.matrix.sorted.all.methods.new.rank<-apply(method.dist.matrix.sorted.all.methods, 2, rank)#,ties.method="random")

method.dist.matrix.sorted.all.methods.new.rank<-as.data.frame(method.dist.matrix.sorted.all.methods.new.rank)

pdf("slopegraph.methods.euc.distance.complete.subjects.pdf",w=10,h=15)
slopegraph(method.dist.matrix.sorted.all.methods.new.rank,, col.lines=rainbow(77))
#slopegraph(method.dist.matrix.sorted.all.methods, col.lines=rainbow(77))

dev.off()


method.dist.df.per.visit.no.rna$subject_id<-as.numeric(as.character(method.dist.df.per.visit.no.rna$subject_id))
method.dist.df.per.visit.no.rna.all.subjects<-filter(method.dist.df.per.visit.no.rna, subject_id %in% all.subject.ids)



###########
method.dist.mat.per.visit.scale<-scale(method.dist.mat.per.visit)
method.dist.mat.per.visit.scale.melt<-melt(method.dist.mat.per.visit.scale.complete)
names(method.dist.mat.per.visit.scale.melt)<-c("subject_id","method.visit","value")
method.dist.mat.per.visit.scale.melt$visit<-substr(method.dist.mat.per.visit.scale.melt$method.visit, start=nchar(as.character(method.dist.mat.per.visit.scale.melt$method.visit))-1, stop=nchar(as.character(method.dist.mat.per.visit.scale.melt$method.visit)))
method.dist.mat.per.visit.scale.melt$value<-as.numeric(method.dist.mat.per.visit.scale.melt$value)

method.dist.mat.per.visit.scale.paper<-method.dist.mat.per.visit.scale[,-grep("target", colnames(method.dist.mat.per.visit.scale))]
method.dist.mat.per.visit.scale.paper<-method.dist.mat.per.visit.scale.paper[,-grep("rna", colnames(method.dist.mat.per.visit.scale.paper))]

na.pos<-which(apply(method.dist.mat.per.visit.scale.paper, 1, function(x) any(is.na(x))))
method.dist.mat.per.visit.scale.paper<-method.dist.mat.per.visit.scale.paper[-na.pos,]

method.dist.mat.per.visit.scale<-scale(method.dist.mat.per.visit.scale.paper)
method.dist.mat.per.visit.scale.melt<-melt(method.dist.mat.per.visit.scale)
names(method.dist.mat.per.visit.scale.melt)<-c("subject_id","method.visit","value")
method.dist.mat.per.visit.scale.melt$visit<-substr(method.dist.mat.per.visit.scale.melt$method.visit, start=nchar(as.character(method.dist.mat.per.visit.scale.melt$method.visit))-1, stop=nchar(as.character(method.dist.mat.per.visit.scale.melt$method.visit)))
method.dist.mat.per.visit.scale.melt$value<-as.numeric(method.dist.mat.per.visit.scale.melt$value)
method.dist.mat.per.visit.scale.melt$method<-substr(method.dist.mat.per.visit.scale.melt$method.visit, start=0, stop=nchar(as.character(method.dist.mat.per.visit.scale.melt$method.visit))-2)

ggplot(filter(method.dist.mat.per.visit.scale.melt, visit==12), aes(x=method, y=value, group=subject_id)) + geom_quasirandom() #+ geom_line()
ggplot(method.dist.mat.per.visit.scale.melt, aes(x=method, y=value, group=subject_id)) + geom_point()+ geom_line() +facet_wrap(~visit)
ggplot(method.dist.mat.per.visit.scale.melt, aes(x=method, y=value, group=subject_id, label=subject_id, color=colors)) + geom_text()+ geom_line() +facet_wrap(~visit)

##räkna ut medel scaled distance
method.dist.mat.per.visit.scale.melt.no.autoantibody<-filter(method.dist.mat.per.visit.scale.melt, method!="auto")
mean.method.distance<-method.dist.mat.per.visit.scale.melt.no.autoantibody %>% group_by(method, subject_id) %>% summarize(mean.distance=mean(value))
mean.method.distance$colors<-rep("black", nrow(mean.method.distance))
#max.subject<-unique(mean.method.distance$subject_id[which(mean.method.distance$mean.distance %in% sort(mean.method.distance$mean.distance, decreasing = T)[1:10])])
max.subject<-unique(mean.method.distance$subject_id[which(mean.method.distance$mean.distance > 2)])
for(i in 1:length(max.subject)) {
  mean.method.distance$colors[which(mean.method.distance$subject_id==max.subject[i])]<-max.subject[i]
}
glimpse(mean.method.distance)
mean.method.distance$method<-as.factor(mean.method.distance$method)
#mean.method.distance$method<-factor(mean.method.distance$method, levels(mean.method.distance$method)[c(3,6,1,5,4,2)])
mean.method.distance$method<-factor(mean.method.distance$method, levels(mean.method.distance$method)[c(2,5,4,3,1)])

cols<-c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf")
cols<-c("#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666")
cols<-c("cyan3","#d95f02","#7570b3","deeppink","#66a61e","#e6ab02","#a6761d","dodgerblue3")


pdf("mean.method.distance.2.pdf", w=8, h=7)
#ggplot(mean.method.distance,aes(x=method, y=mean.distance, group=subject_id, label=subject_id, color=colors))  + geom_point()+ geom_line() + scale_color_manual(values=c(rainbow(length(max.subject)), "grey")) + theme_light()
ggplot(mean.method.distance,aes(x=method, y=mean.distance, group=subject_id, label=subject_id, color=colors))  + geom_point()+ geom_line() + scale_color_manual(values=c(cols, "grey")) + theme_light()
dev.off()

ggplot(mean.method.distance,aes(x=method, y=mean.distance, group=subject_id, label=subject_id, color=colors))  + geom_point()+ geom_line() + scale_color_manual(values=wellness.subject.colors) + theme_light()

wellness.subject.colors<-c("#8b6fed","#55be40","#ac42be","#5ed867","#902da6","#57a621","#3c66e8","#a5c533","#ad6beb","#7cb939","#d065e1","#3dc26b","#d539a4","#90d15e","#7348bd","#b7c035","#7377ec","#d1bb38","#4c7ff1","#e89b1b","#2e8bf3","#cca430","#4455bb","#799f2b","#a153c0","#3c8d25","#ee81e3","#32a24b","#e73379","#38cc94","#a53790","#81c675","#9e7ee9","#9a9d2c","#cf83e9","#6ba149","#c75fb4","#3b772c","#e25aa4","#4b9d65","#df3952","#47cebe","#d7412d","#5fc7f2","#da6224","#4b96eb","#ac850f","#5d7ad5","#d78330","#8065c2","#c4bc59","#794896","#a3bd61","#a76abe","#767c16","#d992e2","#525e1b","#e987c7","#2c6f47","#de5482","#70c297","#ab316c","#349176","#b5344e","#3db6c0","#aa3823","#1da4cc","#ef764f","#5da3db","#ac6019","#3f5d9c","#ebab51","#675ea2","#cfb464","#aa88d3","#b18d3d","#7880c3","#8c924a","#9aa3e8","#816c2a","#cca6e7","#6b7633","#b774a7","#7ca260","#934e7d","#b7b777","#377cb1","#d79b5f","#974863","#ee9c74","#e796bb","#92652b","#e0748e","#c8986c","#a14d51","#c06a47","#db8985","#924e2a","#e26d66")
names(wellness.subject.colors)<-wellness.data$subject_id


method.dist.mat.per.visit.scale.melt$colors<-rep("black", nrow(method.dist.mat.per.visit.scale.melt))
for(i in 1:length(max.subject)) {
  method.dist.mat.per.visit.scale.melt$colors[which(method.dist.mat.per.visit.scale.melt$subject_id==max.subject[i])]<-max.subject[i]
}
method.dist.mat.per.visit.scale.melt$mean.distance<-method.dist.mat.per.visit.scale.melt$value

method.dist.mat.per.visit.scale.melt$method<-as.factor(method.dist.mat.per.visit.scale.melt$method)
method.dist.mat.per.visit.scale.melt$method<- factor(method.dist.mat.per.visit.scale.melt$method, levels(method.dist.mat.per.visit.scale.melt$method)[c(3,6,2,5,4,1)])
mean.method.distance$type<-rep(1,nrow(mean.method.distance))
method.dist.mat.per.visit.scale.melt$type<-rep(2,nrow(method.dist.mat.per.visit.scale.melt))
mean.method.distance.add<-rbind(as.data.frame(mean.method.distance),method.dist.mat.per.visit.scale.melt[,c(5,1,7,6,8)])

#g1<-ggplot(filter(mean.method.distance.add, type==1),aes(x=method, y=mean.distance, group=subject_id, label=subject_id, color=colors))  + geom_point()+ geom_line() + scale_color_manual(values=c(rainbow(length(max.subject)), "grey")) + theme_light()
g1<-ggplot(filter(mean.method.distance.add, type==1),aes(x=method, y=mean.distance, group=subject_id, label=subject_id, color=colors))  + geom_point()+ geom_line() + scale_color_manual(values=c(cols, "grey")) + theme_light()
g1<-g1 + geom_point(data=filter(mean.method.distance.add, type==2),  aes(x=method, y=mean.distance, group=subject_id), alpha=0.3)+ geom_line(data=filter(mean.method.distance.add, type==2),  aes(x=method, y=mean.distance, group=subject_id), alpha=0.3)
g1

#ggplot(method.dist.mat.per.visit.scale.melt, aes(x=visit, y=value, group=subject_id, label=subject_id, color=colors)) + geom_point()+ geom_line() + scale_color_manual(values=c(rainbow(length(max.subject)), "grey")) + theme_light()+facet_wrap(~method)

ggplot(method.dist.mat.per.visit.scale.melt, aes(x=visit, y=value, group=subject_id, label=subject_id, color=colors)) + geom_point()+ geom_line() + scale_color_manual(values=c(rainbow(length(max.subject)), "grey")) + theme_light()+facet_wrap(~method)
pdf("method.distance.per.visit.pdf", w=8, h=7)
ggplot(method.dist.mat.per.visit.scale.melt, aes(x=visit, y=value, group=subject_id, label=subject_id, color=colors)) + geom_point()+ geom_line() + scale_color_manual(values=c(cols, "grey")) + theme_light()+facet_wrap(~method)
dev.off()

ggplot(method.dist.mat.per.visit.scale.melt, aes(x=method, y=value, group=subject_id, label=subject_id, color=colors)) + geom_text()+ geom_line() +facet_wrap(~visit)+ scale_color_manual(values=c(rainbow(length(max.subject)), "grey")) + theme_light()



ggplot(filter(method.dist.mat.per.visit.scale.melt, visit==12), aes(x=method, y=value, group=subject_id, label=subject_id)) + geom_text()+ geom_line() +facet_wrap(~visit)


pdf("scaled.distance.all.methods.pdf", w=10, h=10)
ggplot(method.dist.mat.per.visit.scale.melt, aes(x=visit, y=value, group=subject_id, label=subject_id)) + geom_text(size=3)+ geom_line() + ylab("scaled distance")+facet_wrap(~method)
dev.off()

all.methods.sub<-unique(method.dist.mat.per.visit.scale.melt$subject_id)
pdf("beeswarm.methods.distance.per.subject.pdf", w=6,h=6)
for(i in 1:length(all.methods.sub)) {
  subj<-all.methods.sub[i]
  df<-filter(method.dist.mat.per.visit.scale.melt, subject_id==subj)
#  ggplot(df, aes(x=method.visit, y=value, color=method, group=method)) + geom_point() + geom_path()
  g<-ggplot(df, aes(x=visit, y=value, color=method, group=method)) + geom_point() + geom_path() + ggtitle(subj)+theme_light() + ylab("scaled distance")
  plot(g)
}
dev.off()


######

person.dist.mat.olink.melt<-melt(person.dist.mat.olink)
names(person.dist.mat.olink.melt)<-c("subject_id","visits","distance")
person.dist.mat.olink.melt$scale_distance<-scale(person.dist.mat.olink.melt$distance)

person.dist.mat.rna.melt<-melt(person.dist.mat.rna)
names(person.dist.mat.rna.melt)<-c("subject_id","visits","distance")
person.dist.mat.rna.melt$scale_distance<-scale(person.dist.mat.rna.melt$distance)
person.dist.mat.olink.melt$type<-"olink"
person.dist.mat.rna.melt$type<-"rna"
person.dist.mat.tot<-rbind(person.dist.mat.olink.melt, person.dist.mat.rna.melt)
person.dist.mat.tot<-person.dist.mat.tot[which(person.dist.mat.tot$subject_id %in% olink.rna.subjects),]  
person.dist.mat.tot$subject_visit<-paste0(person.dist.mat.tot$subject_id, " ",person.dist.mat.tot$visits)

person.dist.mat.tot.x.y<-cbind(person.dist.mat.olink.melt[which(person.dist.mat.olink.melt$subject_id %in% olink.rna.subjects),], person.dist.mat.rna.melt$scale_distance[which(person.dist.mat.rna.melt$subject_id %in% olink.rna.subjects)],person.dist.mat.rna.melt$distance[which(person.dist.mat.rna.melt$subject_id %in% olink.rna.subjects)])
person.dist.mat.tot.x.y$subject_visit<-paste0(person.dist.mat.tot.x.y$subject_id, " ",person.dist.mat.tot.x.y$visits)
names(person.dist.mat.tot.x.y)[3]<-"distance_olink"
names(person.dist.mat.tot.x.y)[4]<-"scale_distance_olink"
names(person.dist.mat.tot.x.y)[6]<-"scale_distance_rna"
names(person.dist.mat.tot.x.y)[7]<-"distance_rna"

ggplot(person.dist.mat.tot, aes(y=scale_distance, x=reorder(person.dist.mat.tot$subject_id, person.dist.mat.tot$scale_distance), color=type)) + geom_point()#+geom_text(label=subject_visit)

pdf(file="olink.rna.distance.per.visit.comparison.pdf",w=8,h=8)
p<-ggplot(person.dist.mat.tot.x.y, aes(y=scale_distance_rna, x=scale_distance_olink,label=subject_visit, color=as.factor(subject_id))) +geom_text()#+ geom_point()
#p<-ggplot(person.dist.mat.tot.x.y, aes(y=distance_rna, x=distance_olink,label=subject_visit, color=as.factor(subject_id))) +geom_text()#+ geom_point()
p<-p+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
p
dev.off()


single.person.fold<-function(subj, fold.lim,file.name) {
  pos<-match(subj, olink.subjects)
  vec1<-unlist(olink.visit1.tot[pos,-1])
  vec2<-unlist(olink.visit2.tot[pos,-1])
  vec3<-unlist(olink.visit3.tot[pos,-1])
  vec4<-unlist(olink.visit4.tot[pos,-1])
  
  subj.mat<-rbind(vec1, vec2, vec3, vec4)
  #Ta bort de som kommer försvinna ur alla plottar (pga NA i 1-2, 2-3, eller 3-4) för att få skalan rätt i lower/upper
  na.vec<-apply(subj.mat, 2, function(x) length(which(is.na(x))))
  # names(na.vec)<-olink.proteins
  na.pos<-which(na.vec>1)
  if(length(na.pos>1)) {
    na.pos.new<-na.pos
    for(k in 1:length(na.pos)) {
      vec<-subj.mat[,na.pos[k]]
      na.vec.pos<-which(!is.na(vec))
      if(length(na.vec.pos)==2) {
        if(all(na.vec.pos==c(1,2)) | all(na.vec.pos==c(2,3)) | all(na.vec.pos==c(3,4))) {
          na.pos.new<-na.pos.new[-k]
        }
      }
    }
    na.pos<-na.pos.new
  }
  
  lower<-round(min(c(vec1[-na.pos], vec2[-na.pos], vec3[-na.pos], vec4[-na.pos]), na.rm=T), 1)
  upper<-round(max(c(vec1[-na.pos], vec2[-na.pos], vec3[-na.pos], vec4[-na.pos]), na.rm=T), 1)
  
  #Räkna ut log fold change mellan varje protein och besök
  folds<-cbind(vec1-vec2, vec2-vec3, vec3-vec4)
  mean.folds<-apply(folds, 2, mean, na.rm=T)
  person.fold.mat[j,]<-mean.folds
  
  euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2, na.rm=T))
  dist12<-euc.dist(vec1,vec2)
  dist23<-euc.dist(vec2,vec3)
  dist34<-euc.dist(vec3,vec4)
  dist.vec<-c(dist12, dist23,dist34)
  
  
  pdf(file=file.name, w=12, h=5, useDingbats = F)
  subj.df<-data.frame(visit1=vec1, visit2=vec2, visit3=vec3, visit4=vec4, fold12=folds[,1], fold23=folds[,2],fold34=folds[,3],protein=olink.proteins)
  cors<-c(round(cor(vec1, vec2, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec2, vec3, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec3, vec4, method="pearson",use = "pairwise.complete.obs"),2))
  g1<-ggplot(subj.df, aes(x=visit1, y=visit2))+geom_point(size=1, data=subset(subj.df, abs(fold12) <= fold.lim),aes(x=visit1, y=visit2))+ geom_text(data=subset(subj.df, abs(fold12) > fold.lim),aes(x=visit1, y=visit2, color="red", label=protein),size=2.5)+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = fold.lim, slope = 1, color="red",linetype=2) + geom_abline(intercept = -fold.lim, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  g2<-ggplot(subj.df, aes(x=visit2, y=visit3))+geom_point(size=1, data=subset(subj.df, abs(fold23) <= fold.lim),aes(x=visit2, y=visit3))+ geom_text(data=subset(subj.df, abs(fold23) > fold.lim),aes(x=visit2, y=visit3, color="red", label=protein),size=2.5)+ggtitle(paste0("Pearson: ",cors[2], ", Euc dist: " , round(dist.vec[2],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = fold.lim, slope = 1, color="red",linetype=2) + geom_abline(intercept = -fold.lim, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  g3<-ggplot(subj.df, aes(x=visit3, y=visit4))+geom_point(size=1, data=subset(subj.df, abs(fold34) <= fold.lim),aes(x=visit3, y=visit4))+ geom_text(data=subset(subj.df, abs(fold34) > fold.lim),aes(x=visit3, y=visit4, color="red", label=protein),size=2.5)+ggtitle(paste0("Pearson: ",cors[3], ", Euc dist: " , round(dist.vec[3],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = fold.lim, slope = 1, color="red",linetype=2) + geom_abline(intercept = -fold.lim, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  
  grid.arrange(g1,g2, g3 , ncol=3,  top=textGrob(subj, gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
}
single.person.fold(3920, 1,"person.correlation.fold.1.3920.pdf")
single.person.fold(3834, 1,"person.correlation.fold.1.3834.pdf")
single.person.fold(3834, 0.7,"person.correlation.fold.0.7.3834.pdf")
single.person.fold(3834, 0.5,"person.correlation.fold.0.5.3834.pdf")


single.person.fold.repel<-function(subj, fold.lim,file.name) {
  pos<-match(subj, olink.subjects)
  vec1<-unlist(olink.visit1.tot[pos,-1])
  vec2<-unlist(olink.visit2.tot[pos,-1])
  vec3<-unlist(olink.visit3.tot[pos,-1])
  vec4<-unlist(olink.visit4.tot[pos,-1])
  
  subj.mat<-rbind(vec1, vec2, vec3, vec4)
  #Ta bort de som kommer försvinna ur alla plottar (pga NA i 1-2, 2-3, eller 3-4) för att få skalan rätt i lower/upper
  na.vec<-apply(subj.mat, 2, function(x) length(which(is.na(x))))
  # names(na.vec)<-olink.proteins
  na.pos<-which(na.vec>1)
  if(length(na.pos>1)) {
    na.pos.new<-na.pos
    for(k in 1:length(na.pos)) {
      vec<-subj.mat[,na.pos[k]]
      na.vec.pos<-which(!is.na(vec))
      if(length(na.vec.pos)==2) {
        if(all(na.vec.pos==c(1,2)) | all(na.vec.pos==c(2,3)) | all(na.vec.pos==c(3,4))) {
          na.pos.new<-na.pos.new[-k]
        }
      }
    }
    na.pos<-na.pos.new
  }
  
  lower<-round(min(c(vec1[-na.pos], vec2[-na.pos], vec3[-na.pos], vec4[-na.pos]), na.rm=T), 1)
  upper<-round(max(c(vec1[-na.pos], vec2[-na.pos], vec3[-na.pos], vec4[-na.pos]), na.rm=T), 1)
  
  #Räkna ut log fold change mellan varje protein och besök
  folds<-cbind(vec1-vec2, vec2-vec3, vec3-vec4)
  mean.folds<-apply(folds, 2, mean, na.rm=T)
 # person.fold.mat[j,]<-mean.folds
  
  euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2, na.rm=T))
  dist12<-euc.dist(vec1,vec2)
  dist23<-euc.dist(vec2,vec3)
  dist34<-euc.dist(vec3,vec4)
  dist.vec<-c(dist12, dist23,dist34)
 # fold.lim<-1.5
  
  pdf(file=file.name, w=12, h=5, useDingbats = F)
  subj.df<-data.frame(visit1=vec1, visit2=vec2, visit3=vec3, visit4=vec4, fold12=folds[,1], fold23=folds[,2],fold34=folds[,3],protein=olink.proteins)
  cors<-c(round(cor(vec1, vec2, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec2, vec3, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec3, vec4, method="pearson",use = "pairwise.complete.obs"),2))
  g1<-ggplot(subj.df, aes(x=visit1, y=visit2))+geom_point(size=1, data=subset(subj.df, abs(fold12) <= fold.lim),aes(x=visit1, y=visit2))+ geom_text_repel(data=subset(subj.df, abs(fold12) > fold.lim),aes(x=visit1, y=visit2, color="red", label=protein),size=2)+geom_point(data=subset(subj.df, abs(fold12) > fold.lim),aes(x=visit1, y=visit2, color="red"),size=1)+ggtitle(paste0("Pearson: ",cors[1], ", Euc dist: " , round(dist.vec[1],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = fold.lim, slope = 1, color="red",linetype=2) + geom_abline(intercept = -fold.lim, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
 # g2<-ggplot(subj.df, aes(x=visit1, y=visit2))+geom_point(size=1.5, data=subset(subj.df, abs(fold12) <= fold.lim),aes(x=visit1, y=visit2))+ geom_text(data=subset(subj.df, abs(fold12) > fold.lim),aes(x=visit1, y=visit2, color="red", label=protein),size=2)+geom_point(data=subset(subj.df, abs(fold12) > fold.lim),aes(x=visit1, y=visit2, color="red"),size=1)+ggtitle(paste0("Pearson: ",cors[1], ", Euc dist: " , round(dist.vec[1],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = fold.lim, slope = 1, color="red",linetype=2) + geom_abline(intercept = -fold.lim, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  g2<-ggplot(subj.df, aes(x=visit2, y=visit3))+geom_point(size=1, data=subset(subj.df, abs(fold23) <= fold.lim),aes(x=visit2, y=visit3))+ geom_text_repel(data=subset(subj.df, abs(fold23) > fold.lim),aes(x=visit2, y=visit3, color="red", label=protein),size=2)+geom_point(data=subset(subj.df, abs(fold23) > fold.lim),aes(x=visit2, y=visit3, color="red"),size=1)+ggtitle(paste0("Pearson: ",cors[1], ", Euc dist: " , round(dist.vec[1],2)))+ggtitle(paste0("Pearson: ",cors[2], ", Euc dist: " , round(dist.vec[2],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = fold.lim, slope = 1, color="red",linetype=2) + geom_abline(intercept = -fold.lim, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  g3<-ggplot(subj.df, aes(x=visit3, y=visit4))+geom_point(size=1, data=subset(subj.df, abs(fold34) <= fold.lim),aes(x=visit3, y=visit4))+ geom_text_repel(data=subset(subj.df, abs(fold34) > fold.lim),aes(x=visit3, y=visit4, color="red", label=protein),size=2)+geom_point(data=subset(subj.df, abs(fold34) > fold.lim),aes(x=visit3, y=visit4, color="red"),size=1)+ggtitle(paste0("Pearson: ",cors[1], ", Euc dist: " , round(dist.vec[1],2)))+ggtitle(paste0("Pearson: ",cors[3], ", Euc dist: " , round(dist.vec[3],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = fold.lim, slope = 1, color="red",linetype=2) + geom_abline(intercept = -fold.lim, slope = 1, color="red",linetype=2)+theme_light()+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  
  grid.arrange(g1,g2, g3 , ncol=3,  top=textGrob(subj, gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
  
  
}
single.person.fold.repel(3920, 1,"person.correlation.fold.repel.1.3920.pdf")
single.person.fold.repel(3920, 1.5,"person.correlation.fold.repel.1.5.3920.pdf")
single.person.fold.repel(3834, 1,"person.correlation.fold.repel.1.3834.pdf")
single.person.fold.repel(3834, 0.7,"person.correlation.fold.repel.0.7.3834.pdf")
single.person.fold.repel(3834, 0.5,"person.correlation.fold.repel.0.5.3834.pdf")

subj<-3834
fold.lim<-0.5


single.person.fold.repel2.4<-function(subj, fold.lim,file.name) {
  pos<-match(subj, olink.subjects)
  vec1<-unlist(olink.visit1.tot[pos,-1])
  vec2<-unlist(olink.visit2.tot[pos,-1])
  vec3<-unlist(olink.visit3.tot[pos,-1])
  vec4<-unlist(olink.visit4.tot[pos,-1])
  
  subj.mat<-rbind(vec1, vec2, vec3, vec4)
  #Ta bort de som kommer försvinna ur alla plottar (pga NA i 1-2, 2-3, eller 3-4) för att få skalan rätt i lower/upper
  na.vec<-apply(subj.mat, 2, function(x) length(which(is.na(x))))
  # names(na.vec)<-olink.proteins
  na.pos<-which(na.vec>1)
  if(length(na.pos>1)) {
    na.pos.new<-na.pos
    for(k in 1:length(na.pos)) {
      vec<-subj.mat[,na.pos[k]]
      na.vec.pos<-which(!is.na(vec))
      if(length(na.vec.pos)==2) {
        if(all(na.vec.pos==c(1,2)) | all(na.vec.pos==c(2,3)) | all(na.vec.pos==c(3,4))) {
          na.pos.new<-na.pos.new[-k]
        }
      }
    }
    na.pos<-na.pos.new
  }
  
  lower<-round(min(c(vec1[-na.pos], vec2[-na.pos], vec3[-na.pos], vec4[-na.pos]), na.rm=T), 1)
  upper<-round(max(c(vec1[-na.pos], vec2[-na.pos], vec3[-na.pos], vec4[-na.pos]), na.rm=T), 1)
  
  #Räkna ut log fold change mellan varje protein och besök
  folds<-cbind(vec1-vec2, vec2-vec3, vec3-vec4)
  mean.folds<-apply(folds, 2, mean, na.rm=T)
  person.fold.mat[j,]<-mean.folds
  
  folds<-cbind(vec1-vec2, vec2-vec3, vec3-vec4, vec2-vec4)
  
  
  euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2, na.rm=T))
  dist12<-euc.dist(vec1,vec2)
  dist23<-euc.dist(vec2,vec3)
  dist34<-euc.dist(vec2,vec4)
  dist.vec<-c(dist12, dist23,dist34)
  
  
  pdf(file=file.name, w=5, h=5, useDingbats = F)
  subj.df<-data.frame(visit1=vec1, visit2=vec2, visit3=vec3, visit4=vec4, fold12=folds[,1], fold23=folds[,2],fold34=folds[,3],fold24=folds[,4],protein=olink.proteins)
  cors<-c(round(cor(vec1, vec2, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec2, vec3, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec2, vec4, method="pearson",use = "pairwise.complete.obs"),2))
  g3<-ggplot(subj.df, aes(x=visit2, y=visit4))+geom_point(size=1, data=subset(subj.df, abs(fold24) <= fold.lim),aes(x=visit2, y=visit4))
  g3<-g3 + geom_text_repel(data=subset(subj.df, abs(fold24) > fold.lim),aes(x=visit2, y=visit4, color="red", label=protein),size=2)
  g3<-g3 + geom_point(data=subset(subj.df, abs(fold24) > fold.lim),aes(x=visit2, y=visit4, color="red"),size=1)
  g3<-g3 + ggtitle(paste0("Pearson: ",cors[3], ", Euc dist: " , round(dist.vec[3],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) 
  g3<-g3 + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = fold.lim, slope = 1, color="red",linetype=2) + geom_abline(intercept = -fold.lim, slope = 1, color="red",linetype=2)
  g3<-g3 +theme_light()+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
 # plot(g3)
  
  cors<-c(round(cor(vec1, vec2, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec2, vec3, method="pearson",use = "pairwise.complete.obs"),2),round(cor(vec2, vec4, method="pearson",use = "pairwise.complete.obs"),2))
  g3<-ggplot(subj.df, aes(x=visit2, y=visit4))+geom_point(size=1, data=subset(subj.df, abs(fold24) <= fold.lim),aes(x=visit2, y=visit4))
  g3<-g3 + geom_text(data=subset(subj.df, abs(fold24) > fold.lim),aes(x=visit2, y=visit4, color="red", label=protein),size=2)
  g3<-g3 + geom_point(data=subset(subj.df, abs(fold24) > fold.lim),aes(x=visit2, y=visit4, color="red"),size=1)
  g3<-g3 + ggtitle(paste0("Pearson: ",cors[3], ", Euc dist: " , round(dist.vec[3],2)))+coord_equal(ratio=1)+ theme(aspect.ratio=1)+coord_equal(xlim=c(lower,upper),ylim=c(lower,upper)) 
  g3<-g3 + geom_abline(intercept = 0, slope = 1,linetype=2)+ geom_abline(intercept = fold.lim, slope = 1, color="red",linetype=2) + geom_abline(intercept = -fold.lim, slope = 1, color="red",linetype=2)
  g3<-g3 +theme_light()+ theme(legend.position="none")+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  
  
  
  grid.arrange(g3 , ncol=1,  top=textGrob(subj, gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
  
  
}
single.person.fold.repel2.4(3834, 0.7,"person.correlation.fold.repel.0.5.3834.visit2.4.pdf")



#plotta de som förändrats mest
person.dist.melt<-melt(person.dist.mat)
names(person.dist.melt)<-c("subject","visit_change","distance")
person.dist.melt$subject_change<-paste(person.dist.melt$subject, person.dist.melt$visit_change)
person.dist.melt$subject_change_order<-reorder(person.dist.melt$subject_change, person.dist.melt$distance)
mean.person.dist<-mean(person.dist.melt$distance, na.rm=T)

pdf(file="olink.person.distance.pdf",w=15,h=10)
ggplot(person.dist.melt, aes(y=distance, x=subject_change_order, color=as.factor(subject)))+geom_point()+ geom_text(data=subset(person.dist.melt, distance > 10),aes(y=distance, x=subject_change_order, label=subject_change),size=3, nudge_x=-11)+xlab("")+ ylab("Euclidian distance")+ theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+scale_x_discrete(breaks = NULL)+theme_light()
dev.off()

pdf(file="olink.person.distance.no.legend.pdf",w=6,h=7)
ggplot(person.dist.melt, aes(y=distance, x=subject_change_order, color=as.factor(subject)))+geom_point()+ geom_text(data=subset(person.dist.melt, distance > 10),aes(y=distance, x=subject_change_order, label=subject_change),size=3, nudge_x=-11)+xlab("")+ ylab("Euclidian distance")+scale_x_discrete(breaks = NULL) + theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+theme_light()+ theme(legend.position="none")
dev.off()

pdf(file="olink.person.distance.repel.pdf",w=7,h=7)
p<-ggplot(person.dist.melt, aes(y=distance, x=subject_change_order))+geom_point(size=1)+ ylab("Euclidian distance")+scale_x_discrete(breaks = NULL) 
p<- p + geom_text_repel(data=subset(person.dist.melt, distance > 11),aes(y=distance, x=subject_change_order, label=subject_change,color=as.factor(subject)),size=3)+xlab("")
p<- p + theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
p<- p + geom_abline(intercept = mean.person.dist, slope = 0,linetype=2) + coord_fixed(ratio=15, ylim=c(3,18), xlim=c(-2, 270))+ theme(plot.margin=unit(c(1,1,1,1),"cm")) 
p<- p +  geom_text(data=data.frame(x=240,y=mean.person.dist), aes(x, y), label="mean distance", vjust=1.5)+ theme(legend.position="none")
plot(p)
dev.off()

pdf(file="olink.person.distance.repel.big.text.pdf",w=6,h=6)
p<-ggplot(person.dist.melt, aes(y=distance, x=subject_change_order))+geom_point(size=1)+ ylab("Euclidian distance")+scale_x_discrete(breaks = NULL) 
p<- p + geom_text_repel(data=subset(person.dist.melt, distance > 11),aes(y=distance, x=subject_change_order, label=subject_change,color=as.factor(subject)),size=4)+xlab("")
p<- p + theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
p<- p + geom_abline(intercept = mean.person.dist, slope = 0,linetype=2) + coord_fixed(ratio=15, ylim=c(3,18), xlim=c(-2, 270))+ theme(plot.margin=unit(c(1,1,1,1),"cm")) 
p<- p +  geom_text(data=data.frame(x=240,y=mean.person.dist), aes(x, y), label="mean distance", vjust=1.5)+ theme(legend.position="none")
plot(p)
dev.off()
person.distance.df<- person.dist.melt %>%  group_by(subject) %>%   summarise(mean_dist= mean(distance))

ggplot(person.distance.df, aes(x=reorder(person.distance.df$subject, person.distance.df$mean_dist), y=mean_dist)) + geom_point() + geom_text_repel(data = person.distance.df, aes(label = subject, reorder(person.distance.df$subject, person.distance.df$mean_dist), y=mean_dist, size=6))

person.mean.protein.sd<-vector(length=num.person)
for(j in 1:num.person) {
  subj<-olink.subjects[j]
  subj.data<-cbind(as.numeric(filter(olink.visit1.tot, subject_id==subj))[-1], as.numeric(filter(olink.visit2.tot, subject_id==subj))[-1],as.numeric(filter(olink.visit3.tot, subject_id==subj))[-1],as.numeric(filter(olink.visit4.tot, subject_id==subj))[-1])
  names(subj.data)<-c("visit 1","visit 2", "visit 3","visit 4")
  protein.sd<- apply(subj.data, 1, sd, na.rm=T)
  names(protein.sd)<-olink.proteins
  person.mean.protein.sd[j]<-mean(protein.sd, na.rm=T)
}
sex.char<-unlist((wellness.data[which(wellness.data$subject_id %in% olink.visit1.tot$subject_id ),"sex"]))
person.distance.prot.df<-cbind(person.distance.df, person.mean.protein.sd, sex.char)
names(person.distance.prot.df)<-c("subject","mean_euclidian_distance","mean_intravisit_protein_sd","gender")

pdf(file="subject.distance.intervisit.sd.pdf",7,7)
p<-ggplot(person.distance.prot.df, aes(x=mean_intravisit_protein_sd, y=mean_euclidian_distance, label=subject, color=gender)) + geom_text(size=3) + xlab("variation between proteins (SD across four visits)")+ ylab("mean euclidian distance") 
p<-p+  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
#ggplot(person.distance.prot.df, aes(x=mean_intravisit_protein_sd, y=mean_euclidian_distance, label=subject, color=gender)) + geom_point()+ geom_text_repel() + xlab("mean intravisit protein sd")+ ylab("mean euclidian distance")#+ggtitle("subject standard deviations")
plot(p)
dev.off()

#Ranka alla personer baserat på hur mycket de varierar
names(person.mean.protein.sd)<-olink.subjects
person.mean.protein.sd.vec<-person.mean.protein.sd
person.mean.protein.sd.df<-data.frame(subject_id=olink.subjects, sex=olink.sex, person.sd=person.mean.protein.sd)
person.mean.protein.sd.df<-arrange(person.mean.protein.sd.df, desc(person.sd) )
table(person.mean.protein.sd.df$sex[1:64])
selected.women<-filter(person.mean.protein.sd.df, sex=="f")$subject_id[1:32]
selected.men<-filter(person.mean.protein.sd.df, sex=="m")$subject_id[1:32]
person.mean.protein.sd.df$subject_order<-reorder(person.mean.protein.sd.df$subject_id, person.mean.protein.sd.df$person.sd)
person.mean.protein.sd.df$selection<-as.character(person.mean.protein.sd.df$sex)
person.mean.protein.sd.df$selection[which(person.mean.protein.sd.df$subject_id %in% selected.women)]<-"f selected"
person.mean.protein.sd.df$selection[which(person.mean.protein.sd.df$subject_id %in% selected.men)]<-"m selected"

#pdf(file="selected.subjects.for.somalogic.pdf",w=10, h=6)
#ggplot(person.mean.protein.sd.df, aes(x=subject_order, y=person.sd, color=selection)) + geom_point() + xlab("subject") +ylab("mean sd for all proteins across four visits") + theme_light()+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
#dev.off()

#Ta fram vilka proteiner som förändrats mest i 3920 och 3834

plot.up.down.changed.proteins<-function(subj, from_visit, to_visit,file.name) {
  sub.pos<-grep(subj, olink.tot$subject_id)
  #sub.poses<-c(sub.pos, sub.pos+num.person, sub.pos+num.person*2, sub.pos+num.person*3)
  subj.df<-olink.tot[sub.pos,-1]
  rel.diff<-subj.df[to_visit,]-subj.df[from_visit,]
  rel.diff<-rel.diff[which(!is.na(rel.diff))]
  num<-length(rel.diff)
  melted<-melt(rel.diff)
  #names(melted)
  extremes<-melted[order(melted$value)[c(1:10, (num-9):num)],]
  melted$colors<-rep("darkgrey", nrow(melted))
  melted$colors[order(melted$value)[c(1:10, (num-9):num)]]<-"red"
  pdf(file=file.name,w=7,h=5)
  p <- ggplot(melted, aes(x=reorder(melted$variable, melted$value), y=value)) + geom_point() + coord_fixed(60 , ylim=c((floor(min(rel.diff))-1),ceiling(max(rel.diff))), xlim=c(-5, (nrow(melted)+5)))
  p <- p + geom_text_repel(data = extremes, aes(label = variable, x=variable, y=value, size=2))  + ylab(paste0("log2(visit ",to_visit,"/visit ",from_visit," ratio)")) + xlab("")+ggtitle(subj)
  p<- p + theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
  p <- p+ theme(legend.position="none")
  plot(p)
  dev.off()
}
plot.up.down.changed.proteins(3920, 1, 2,"most.changed.proteins.dotplot.3920.1.2.pdf")
plot.up.down.changed.proteins(3834, 2, 4,"most.changed.proteins.dotplot.3834.2.4.pdf")

#For Linn paper 1 calculate 3920 visit 1 -> 2 differences in cell populations
# m.3920 <- m[m$ID == 3920, ]
# rel.diff.v1.2 <- log2(m.3920[2, 9:ncol(m.3920)]/m.3920[1, 9:ncol(m.3920)])
# melted.3920 <- melt(rel.diff.v1.2)
# extremes.3920 <- melted.3920[abs(melted.3920$value)>1, ]
# p6 <- ggplot(melted.3920, aes(x=reorder(melted.3920$variable, melted.3920$value), y=value)) + geom_point() + theme_tufte() + coord_fixed(ratio=10, ylim=c(-2,2))
# p6 <- p6 + geom_text_repel(data = extremes.3920, aes(label = variable, x=variable, y=value, size=6))
# p6

ord<-order(person.dist.melt$distance)
person.dist.melt.sort<-person.dist.melt[ord,]

plot(person.dist.melt.sort$distance)
text(person.dist.melt.sort$distance, person.dist.melt.sort$subject_change)

weight.df$subject_weight_order <- reorder(weight.df$subject_id, weight.df$weight)



################################### RTSNE
olink.tot<-rbind(olink.visit1.tot, olink.visit2.tot, olink.visit3.tot,olink.visit4.tot)
subs<-olink.tot$subject_id
num<-length(subs)/4
subs[1:num]<-paste0(subs[1:num], "_1")
subs[(num+1):(num*2)]<-paste0(subs[(num+1):(num*2)], "_2")
subs[(num*2+1):(num*3)]<-paste0(subs[(num*2+1):(num*3)], "_3")
subs[(num*3+1):(num*4)]<-paste0(subs[(num*3+1):(num*4)], "_4")
olink.tot$subject_id<-subs

#Färger
person.cols<-rep("black", nrow(olink.tot))
for(k in 1:nrow(olink.tot)) {
  person<-olink.tot$subject_id[k]
  if(person.cols[k]=="black") {
    person<-substring(person, 0,4)
    pos<-grep(person, olink.tot$subject_id)
    person.cols[pos]<-sample(rainbow(20), 1)
  }
}

olink.tot.mat<-as.matrix(olink.tot[,-1])
rownames(olink.tot.mat)<-olink.tot$subject_id

olink.tot.mat.no.na<-olink.tot.mat[ , apply(olink.tot.mat, 2, function(x) !any(is.na(x)))]
r = Rtsne(olink.tot.mat.no.na)
r.prot = Rtsne(t(olink.tot.mat.no.na))

panel.cols<-olink.tot.panels
for(i in 1:11) {
  panel.cols[which(panel.cols==i)]<-rainbow(11)[i]
}
panel.cols.names<-unique(panel.cols)
panel.cols.new<-panel.cols
for(j in 1:11) {
  panel.cols.new[which(panel.cols.new==panel.cols.names[j])]<-rainbow(11)[j]
}
panel.cols.no.na<-panel.cols.new[apply(olink.tot.mat, 2, function(x) !any(is.na(x)))]

#Urpsrungsland färger
origin.olink<-origin.df[which(origin.df$subject_id %in% olink.subjects),]
origin.country.olink<-origin_country[which(origin.df$subject_id %in% olink.subjects)]
origin.color<-rep("black",nrow(origin.olink))
origin.color[which(origin.country.olink=="Asia")]<-"red"
origin.color[which(origin.country.olink=="South America")]<-"green3"
origin.color[which(origin.country.olink=="Europe")]<-"blue"
origin.color[which(origin.country.olink=="Finland")]<-"purple"
origin.color[which(is.na(origin.country.olink=="NA"))]<-"grey"
origin.color.4<-rep(origin.color,4)
#rownames(olink.tot)<-olink.tot$subject_id
#r = Rtsne(olink.tot[,-1])

pdf("tsne.86.subjects.proseek.pdf", w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(r$Y[,1], r$Y[,2], pch="") 
text(r$Y[,1], r$Y[,2], olink.tot$subject_id, col=person.cols, cex=0.6) 
plot(r$Y[,1], r$Y[,2], pch=19, col=person.cols) 
dev.off()


  
plot.tsne.with.lines<-function(x,y,color.vec, name) {
 # data.df<-data.frame(x=x, y=y, color=color.vec)
#  color.vec<-person.cols
  subject.vec<-substring(olink.tot$subject_id, 0,4)
  subject_visit<-olink.tot$subject_id
  data.df<-data.frame(x=x, y=y,  person_color=color.vec, subject=subject.vec)
  #g1<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject, shape=subject))+geom_point()+geom_line() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+scale_shape_manual(values=rep(c(15:18), 30)[1:nlevels(data.df$subject)])+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),))
  g2<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject))+geom_point(size=1)+geom_line() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g3<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject, label=subject_visit))+geom_point(size=1)+geom_line() +geom_text(size=2) +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  #g3<-ggplot(data.df, aes(x=x, y=y, group=subject, color=color.vec, label=subject_visit))+geom_point(size=0.1)+geom_text(size=3)+geom_line() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("RNA 1000 removed HLA and Y")+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  pdf(file=name,w=12,h=6)
  grid.arrange(g2, g3 , ncol=2,  top=textGrob("", gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
}
plot.tsne.with.lines(r$Y[,1], r$Y[,2],person.cols,"tSNE.olink.ggplot.pdf")

plot.tsne.without.lines<-function(x,y,color.vec, name) {
  # data.df<-data.frame(x=x, y=y, color=color.vec)
  #  color.vec<-person.cols
  subject.vec<-substring(olink.tot$subject_id, 0,4)
  subject_visit<-olink.tot$subject_id
  data.df<-data.frame(x=x, y=y,  person_color=color.vec, subject=subject.vec)
  #g1<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject, shape=subject))+geom_point()+geom_line() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+scale_shape_manual(values=rep(c(15:18), 30)[1:nlevels(data.df$subject)])+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),))
  g2<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject))+geom_point(size=4, alpha=0.3)+xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+theme_light()+theme(legend.position="none")
  g2<-g2  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g3<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject, label=subject_visit))+geom_point(size=1)+geom_line() +geom_text(size=2) +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g3<-g3  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  #g3<-ggplot(data.df, aes(x=x, y=y, group=subject, color=color.vec, label=subject_visit))+geom_point(size=0.1)+geom_text(size=3)+geom_line() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("RNA 1000 removed HLA and Y")+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  pdf(file=name,w=12,h=6)
  grid.arrange(g2, g3 , ncol=2,  top=textGrob("", gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
}
plot.tsne.without.lines(r$Y[,1], r$Y[,2],person.cols,"tSNE.olink.ggplot.no.lines.pdf")

plot.tsne.both.lines<-function(x,y,color.vec, name, title) {
  # data.df<-data.frame(x=x, y=y, color=color.vec)
  #  color.vec<-person.cols
  subject.vec<-substring(olink.tot$subject_id, 0,4)
  subject_visit<-olink.tot$subject_id
  data.df<-data.frame(x=x, y=y,  person_color=color.vec, subject=subject.vec, sex=rep(olink.sex, 4))
  #g1<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject, shape=subject))+geom_point()+geom_line() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+scale_shape_manual(values=rep(c(15:18), 30)[1:nlevels(data.df$subject)])+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),))
  g2<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject))+geom_point(size=4, alpha=0.3)+xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+theme_light()+theme(legend.position="none")
  g2<-g2  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g3<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject, label=subject_visit))+geom_point(size=1)+geom_line() +geom_text(size=2) +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g3<-g3  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  #g3<-ggplot(data.df, aes(x=x, y=y, group=subject, color=color.vec, label=subject_visit))+geom_point(size=0.1)+geom_text(size=3)+geom_line() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("RNA 1000 removed HLA and Y")+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  pdf(file=name,w=12,h=6)
  grid.arrange(g2, g3 , ncol=2,  top=textGrob("", gp=gpar(fontsize=15,fontface="bold")))
  
  g4<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject))+geom_point(size=4, alpha=0.3) +geom_path() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle(title)+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g4<-g4  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g5<-ggplot(data.df, aes(x=x, y=y, group=subject, color=sex))+geom_point(size=4, alpha=0.3) +geom_path() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle(title)+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g5<-g5  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  grid.arrange(g4, g5 , ncol=2,  top=textGrob("", gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
  
}
plot.tsne.both.lines(r$Y[,1], r$Y[,2],person.cols,"tSNE.olink.ggplot.both.lines.pdf","Olink")




#Läs in och plotta mtsvarande plott för autoimmunitet
plot.tsne.without.lines.auto<-function(x,y,subject, subject_visit, name) {
  data.df<-data.frame(x=x, y=y,subject_visit=subject_visit, subject=subject)
  #g1<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject, shape=subject))+geom_point()+geom_line() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Olink")+scale_shape_manual(values=rep(c(15:18), 30)[1:nlevels(data.df$subject)])+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),))
  g2<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject))+geom_point(size=4, alpha=0.3)+xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Autoantibody profiling, Scoring, Reactive antigens")+theme_light()+theme(legend.position="none")
  g2<-g2  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g3<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject, label=subject_visit))+geom_point(size=1)+geom_line() +geom_text(size=2) +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("")+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g3<-g3  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  g4<-ggplot(data.df, aes(x=x, y=y, group=subject, color=subject))+geom_point(size=4, alpha=0.3)+geom_path()+xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("Autoantibody profiling, Scoring, Reactive antigens")+theme_light()+theme(legend.position="none")
  g4<-g4  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  #g3<-ggplot(data.df, aes(x=x, y=y, group=subject, color=color.vec, label=subject_visit))+geom_point(size=0.1)+geom_text(size=3)+geom_line() +xlab("t-SNE1")+ylab("t-SNE2")+ggtitle("RNA 1000 removed HLA and Y")+theme_light()+theme(legend.position="none")#+geom_path(arrow=arrow(length=unit(0.2, "cm"),)) 
  pdf(file=name,w=12,h=6)
  grid.arrange(g2, g4 , ncol=2,  top=textGrob("", gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
}
load("auto.tSNE.Rdata.Robject")
plot.tsne.without.lines.auto(auto.tSNE.react$Y[,1],auto.tSNE.react$Y[,2], auto.subjects, auto.subject_visits,"tSNE.autoantibody.ggplot.reactive.no.lines.pdf")
plot.tsne.without.lines.auto(auto.tSNE.all$Y[,1],auto.tSNE.all$Y[,2], auto.subjects, auto.subject_visits,"tSNE.autoantibody.ggplot.all.no.lines.pdf")



pdf("tsne.86.subjects.proseek.origin.country.pdf", w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(r$Y[,1], r$Y[,2], pch="") 
text(r$Y[,1], r$Y[,2], olink.tot$subject_id, col=origin.color.4, cex=0.6) 
plot(r$Y[,1], r$Y[,2], pch=19, col=origin.color.4) 
legend("topleft", c("Asia","South America","Europe","Finland","Unknown","Sweden"), fill=c("red","green3","blue","purple","grey","black"), bty="n")
dev.off()

pdf("tsne.620.proteins.proseek.pdf", w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(r.prot$Y[,1], r.prot$Y[,2], pch="") 
text(r.prot$Y[,1], r.prot$Y[,2], colnames(olink.tot.mat.no.na), col=panel.cols.no.na, cex=0.6) 
plot(r.prot$Y[,1], r.prot$Y[,2], pch=19, col=panel.cols.no.na) 
legend("topleft",panel.names, fill=rainbow(11), bty="n", cex=0.7)
dev.off()

#MDS
d <- dist(t(olink.tot.mat.no.na))
d.subj <- dist(olink.tot.mat.no.na)
fit <- cmdscale(d,eig=TRUE, k=2)
fit.subj <- cmdscale(d.subj,eig=TRUE, k=2)
plot(fit$points[,1:2], xlab="Coordinate 1", ylab="Coordinate 2",main="MDS batch", type="n")
points(fit$points[,1:2],bg=panel.cols.no.na,col=F, cex=2,pch=21)

plot(fit.subj$points[,1:2], xlab="Coordinate 1", ylab="Coordinate 2",main="MDS batch", type="n")
points(fit.subj$points[,1:2],bg=person.cols,col=F, cex=2,pch=21)
plot(fit.subj$points[,1:2], xlab="Coordinate 1", ylab="Coordinate 2",main="MDS batch", type="n")
text(fit.subj$points[,1:2], olink.tot$subject_id, col=person.cols, cex=0.6) 

points(fit.subj$points[,1:2],bg=person.cols,col=F, cex=2,pch=21)

#PCA

pca<-prcomp(olink.tot.mat.no.na)
rot<-pca$r
scores<-pca$x

pdf(file="PCA.86.subjects.proseek.pdf",w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(scores[,1:2], pch="") 
text(scores[,1:2], olink.tot$subject_id, col=person.cols, cex=0.6) 
plot(scores[,1:2], pch=19, col=person.cols) 
dev.off()

baker.pos<-grep(3834, olink.tot$subject_id)
baker.cols<-rep("black", length(olink.tot$subject_id))
baker.cols[baker.pos]<-"red"

pdf("tsne.86.subjects.proseek.baker.pdf", 10,10)
plot(r$Y[,1], r$Y[,2], pch="") 
text(r$Y[,1], r$Y[,2], olink.tot$subject_id, col=baker.cols) 
dev.off()

extra.cols<-rep("black", length(olink.tot$subject_id))
baker.pos<-grep(3834, olink.tot$subject_id)
crp1.pos<-grep(3920, olink.tot$subject_id)
crp2.pos<-grep(3512, olink.tot$subject_id)
#pos.4032<-grep(4032, olink.tot$subject_id)
#pos.3339<-grep(3339, olink.tot$subject_id)
extra.cols[baker.pos]<-"red"
extra.cols[crp1.pos]<-"green3"
extra.cols[crp2.pos]<-"blue"
#extra.cols[pos.4032]<-"magenta"
#extra.cols[pos.3339]<-"turquoise"

pdf("tsne.86.subjects.proseek.extra.colors.pdf", 10,10)
plot(r$Y[,1], r$Y[,2], pch="") 
text(r$Y[,1], r$Y[,2], olink.tot$subject_id, col=extra.cols) 
dev.off()

pdf("PCA.86.subjects.proseek.extra.colors.pdf", w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(scores[,1:2], pch="") 
text(scores[,1:2], olink.tot$subject_id, col=extra.cols, cex=0.8) 
plot(scores[,1:2], pch=19, col=extra.cols) 
dev.off()

#Gör samma sak med på nya / gamla paneler
first5.pos<-grep("KYNU",colnames(olink.tot.mat.no.na))
olink.tot.mat.no.na.first5<-olink.tot.mat.no.na[,1:first5.pos]
olink.tot.mat.no.na.last6<-olink.tot.mat.no.na[,(first5.pos+1):ncol(olink.tot.mat.no.na)]

r.first5 = Rtsne(olink.tot.mat.no.na.first5)
r.last6 = Rtsne(olink.tot.mat.no.na.last6)

pdf("tsne.incl.4032.first.5.panels.subjects.proseek.pdf", w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(r.first5$Y[,1:2], pch="") 
text(r.first5$Y[,1:2], olink.tot$subject_id, col=person.cols) 
plot(r.first5$Y[,1:2], pch=19, col=person.cols) 
dev.off()

pdf("tsne.incl.4032.last.6.panels.subjects.proseek.pdf", w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(r.last6$Y[,1:2], pch="") 
text(r.last6$Y[,1:2], olink.tot$subject_id, col=person.cols) 
plot(r.last6$Y[,1:2], pch=19, col=person.cols) 
dev.off()

pca.first5<-prcomp(olink.tot.mat.no.na.first5)
pca.last6<-prcomp(olink.tot.mat.no.na.last6)
scores.first5<-pca.first5$x
scores.last6<-pca.last6$x

pdf("PCA.incl.4032.first.5.panels.subjects.proseek.pdf", w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(scores.first5[,1:2], pch="") 
text(scores.first5[,1:2], olink.tot$subject_id, col=extra.cols, cex=0.8) 
plot(scores.first5[,1:2], pch=19, col=extra.cols) 
dev.off()
pdf("PCA.incl.4032.new.6.panels.subjects.proseek.pdf", w=15,h=8)
layout(matrix(nrow=1, 1:2))
plot(scores.last6[,1:2], pch="") 
text(scores.last6[,1:2], olink.tot$subject_id, col=extra.cols, cex=0.8) 
plot(scores.last6[,1:2], pch=19, col=extra.cols) 
dev.off()


#Titta på varje persons SD över alla proteiner och vilka som varierar mest
num.sd.high.vec<-vector()
person.sd.mat<-matrix(nrow=num.person, ncol=num.prot)
rownames(person.sd.mat)<-olink.subjects
colnames(person.sd.mat)<-olink.proteins
pdf(file="proseek.person.plots.all.proteins.pdf", w=10,h=7, useDingbats = F)
for(i in 1:num.person) {
  subj<-olink.subjects[i]
  #  layout(matrix(1:6, nrow=2, byrow=T))
  npx.row1<-unlist(olink.visit1.tot[i,-1])
  npx.row2<-unlist(olink.visit2.tot[i,-1])
  npx.row3<-unlist(olink.visit3.tot[i,-1])
  npx.row4<-unlist(olink.visit4.tot[i,-1])
  
  npx.mat<-cbind(npx.row1,npx.row2,npx.row3,npx.row4)
  
  var.vec<-apply(npx.mat, 1, var, na.rm=T)
  sd.vec<-apply(npx.mat, 1, sd, na.rm=T)
  person.sd.mat[i,]<-sd.vec
  
  #Highly varying  positions
  sd.high.pos<-which(sd.vec>0.4)
  sd.ord<-order(sd.vec[sd.high.pos])
  sd.high.pos<-sd.high.pos[sd.ord]
  num.high<-length(sd.high.pos)
  if(num.high>100) {
    sd.high.pos<-sd.high.pos[(num.high-99):num.high]
  }
  num.sd.high.vec[i]<-length(sd.high.pos)
  mean.vec<-apply(npx.mat, 1, mean, na.rm=T)
  npx.mean.mat<-npx.mat-mean.vec
  
  var.mean.vec<-apply(npx.mean.mat, 1, var, na.rm=T)
  max.dist.vec<-apply(npx.mat, 1, function(y) max(y)-min(y))
  
  npx.ord<-order(npx.row1)
  var.ord<-order(var.vec)
  var.mean.ord<-order(var.mean.vec)
  max.dist.ord<-order(max.dist.vec)
  
  lower<-round(min(npx.mat, na.rm=T), 1)
  upper<-round(max(npx.mat, na.rm=T),1)
  lower.mean<-round(min(npx.mean.mat, na.rm=T), 1)
  upper.mean<-round(max(npx.mean.mat, na.rm=T),1)
  
  visit.col<-c("#e41a1c","#377eb8","#4daf4a","#984ea3")
  
  layout(matrix(1:3, ncol=1))
  par(las=2)
  par(mar=c(5,4,4,2))
  
 # plot(npx.mat[npx.ord,1], col=visit.col[1], type="p", ylim=c(lower, upper), xaxt='n', pch=19,  ylab="log NPX", xlab="", cex.axis=0.8, cex.lab=0.8, main=paste0(subj, " - ", panel, " - visit 1 sorted"), cex=0.8)
  #axis(side=1, at=1:length(npx.row1), labels=names(npx.row1)[npx.ord], xlab="", cex.axis=0.8, cex.lab=0.6)
  #lines(npx.mat[npx.ord,2], col=visit.col[2], type="p", pch=19, cex=0.8)
  #lines(npx.mat[npx.ord,3], col=visit.col[3], type="p", pch=19, cex=0.8)
  #lines(npx.mat[npx.ord,4], col=visit.col[4], type="p", pch=19, cex=0.8)
  #legend("topleft",c("Visit 1","Visit 2","Visit 3","Visit 4"), fill=visit.col, bty="n", cex=0.8)
  ce<-0.6
  ce.lab<-0.8
  ce.ax<-0.3
  plot(npx.mat[var.ord,1], col=visit.col[1], type="p", ylim=c(lower, upper), xaxt='n', pch=19,  ylab="log NPX", xlab="", cex.axis=0.8, cex.lab=ce.lab, main=paste0(subj, " - variance sorted"), cex=ce)
  axis(side=1, at=1:length(npx.row1), labels=names(npx.row1)[var.ord], xlab="", cex.lab=ce.lab, cex.axis=ce.ax)
  lines(npx.mat[var.ord,2], col=visit.col[2], type="p", pch=19, cex=ce)
  lines(npx.mat[var.ord,3], col=visit.col[3], type="p", pch=19, cex=ce)
  lines(npx.mat[var.ord,4], col=visit.col[4], type="p", pch=19, cex=ce)
  legend("topleft",c("Visit 1","Visit 2","Visit 3","Visit 4"), fill=visit.col, bty="n", cex=ce)
  
  plot(npx.mean.mat[var.mean.ord,1], col=visit.col[1], ylim=c(lower.mean, upper.mean), xaxt='n', pch=19,  ylab="log NPX", xlab="", cex.axis=0.8, cex.lab=ce.lab, main=paste0(subj, " - mean protein centered and variance sorted"), cex=ce)
  axis(side=1, at=1:length(npx.row1), labels=names(npx.row1)[var.mean.ord], xlab="", cex.lab=ce.ax,cex.axis=ce.ax)
  lines(npx.mean.mat[var.mean.ord,2], col=visit.col[2], type="p", pch=19, cex=ce)
  lines(npx.mean.mat[var.mean.ord,3], col=visit.col[3], type="p", pch=19, cex=ce)
  lines(npx.mean.mat[var.mean.ord,4], col=visit.col[4], type="p", pch=19, cex=ce)
  legend("topleft",c("Visit 1","Visit 2","Visit 3","Visit 4"), fill=visit.col, bty="n", cex=ce)

  plot(npx.mat[sd.high.pos,1], col=visit.col[1], ylim=c(lower, upper), xaxt='n', pch=19,  ylab="log NPX", xlab="", cex.axis=0.8, cex.lab=0.8, main=paste0(subj, " - standard deviation >0.4"), cex=ce)
  axis(side=1, at=1:length(sd.high.pos), labels=names(npx.row1)[sd.high.pos], xlab="", cex.axis=0.8, cex.lab=ce.lab)
  lines(npx.mat[sd.high.pos,2], col=visit.col[2], type="p", pch=19, cex=ce)
  lines(npx.mat[sd.high.pos,3], col=visit.col[3], type="p", pch=19, cex=ce)
  lines(npx.mat[sd.high.pos,4], col=visit.col[4], type="p", pch=19, cex=ce)
  legend("topleft",c("Visit 1","Visit 2","Visit 3","Visit 4"), fill=visit.col, bty="n", cex=0.8)
}  
dev.off()

#Ta fram en fil med top 50 för varj 
person.sd.mat.subject<-cbind(rownames(person.sd.mat), person.sd.mat)
colnames(person.sd.mat.subject)[1]<-"subject_id"
#write.table(person.sd.mat.subject, file="olink.person.sd.per.protein.txt", quote=F, dec=".", sep="\t", row.names=F)

#Gör boxplot över sd för varje protein över tid
boxplot(t(person.sd.mat))
prot.sd.mean<-apply(person.sd.mat, 2, mean,na.rm=T)
person.sd.mean<-apply(person.sd.mat, 1, mean,na.rm=T)
sort(person.sd.mean)

hist(person.sd.mat)

prot.sd.mean.0.3.pos<-which(prot.sd.mean>0.3)
prot.ord<-order(prot.sd.mean[prot.sd.mean.0.3.pos])
prot.sd.mean.0.5.pos<-which(prot.sd.mean>0.5)
prot.ord.0.5<-order(prot.sd.mean[prot.sd.mean.0.5.pos])
prot.sd.mean.0.4.pos<-which(prot.sd.mean>0.4)
prot.ord.0.4<-order(prot.sd.mean[prot.sd.mean.0.4.pos])

pdf(file="protein.sd.0.3.boxplot.pdf",w=12, h=8)
par(las=2, mar=c(6.2,4,4,2))
boxplot(person.sd.mat[,prot.sd.mean.0.3.pos[prot.ord]], cex.axis=0.8, main="Subject standard deviation across four visits for proteins with mean SD >0.3")
dev.off()

pdf(file="protein.sd.0.5.boxplot.pdf",w=12, h=8)
par(las=2, mar=c(6.2,4,4,2))
boxplot(person.sd.mat[,prot.sd.mean.0.5.pos[prot.ord.0.5]], cex.axis=0.8, main="Subject standard deviation across four visits for proteins with mean SD >0.5")
dev.off()

highly.varying.prot.0.5<-rev(colnames(person.sd.mat[,prot.sd.mean.0.5.pos[prot.ord.0.5]]))
highly.varying.prot.0.4<-rev(colnames(person.sd.mat[,prot.sd.mean.0.4.pos[prot.ord.0.4]]))
#plotta correlationsplottar för dessa

#Plotta med linjeplott per person
pdf(file="highly.varying.proseek.correlation.person.line.pdf", w=9,h=10)
for(j in 1:length(highly.varying.prot.0.5)) {
  plot.correlation.line.plot.protein(highly.varying.prot.0.5[j])
}
dev.off()
pdf(file="highly.varying.proseek.correlation.person.line.0.4.SD.pdf", w=9,h=10)
for(j in 1:length(highly.varying.prot.0.4)) {
  plot.correlation.line.plot.protein(highly.varying.prot.0.4[j])
}
dev.off()

#Plotta medlet mellan de olika besöken för samma proteiner
olink.visit1.highly.varying<-olink.visit1.tot[,(prot.sd.mean.0.5.pos[prot.ord.0.5]+1)]
olink.visit2.highly.varying<-olink.visit2.tot[,(prot.sd.mean.0.5.pos[prot.ord.0.5]+1)]
olink.visit3.highly.varying<-olink.visit3.tot[,(prot.sd.mean.0.5.pos[prot.ord.0.5]+1)]
olink.visit4.highly.varying<-olink.visit4.tot[,(prot.sd.mean.0.5.pos[prot.ord.0.5]+1)]

highly.varying.visit1.mean<-apply(olink.visit1.highly.varying, 2, mean, na.rm=T)
highly.varying.visit2.mean<-apply(olink.visit2.highly.varying, 2, mean, na.rm=T)
highly.varying.visit3.mean<-apply(olink.visit3.highly.varying, 2, mean, na.rm=T)
highly.varying.visit4.mean<-apply(olink.visit4.highly.varying, 2, mean, na.rm=T)
highly.varying.mean.mat<-cbind(highly.varying.visit1.mean,highly.varying.visit2.mean,highly.varying.visit3.mean,highly.varying.visit4.mean)

max.lim<-max(highly.varying.mean.mat)
min.lim<-min(highly.varying.mean.mat)
  

pdf(file="highly.varying.proseek.mean.values.pdf", w=9,h=10)
plot(highly.varying.mean.mat[1,], col=rainbow(20)[1], type="o", pch=19, ylim=c(min.lim, max.lim), xlab="visit",ylab="mean log NPX per protein")
for(j in 2:length(highly.varying.prot.0.5)) {
  lines(highly.varying.mean.mat[j,], col=rainbow(20)[j%%20], type="o", pch=19)
}  
dev.off()

pdf(file="highly.varying.proseek.mean.values.boxplot.pdf", w=9,h=10)
boxplot(highly.varying.mean.mat, main="mean values for 82 persons in 85 proteins")
dev.off()

colnames(highly.varying.mean.mat)<-c("mean visit 1","mean visit 2","mean visit 3","mean visit 4")
highly.varying.mean.mat.melt<-melt(highly.varying.mean.mat)
names(highly.varying.mean.mat.melt)<-c("protein","visit","mean.log.NPX")

pdf(file="highly.varying.proseek.mean.values.ggplot.pdf", w=10,h=6)
q<-ggplot(highly.varying.mean.mat.melt,aes(x=visit, y=mean.log.NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle("Mean of highly varying proteins")+ylab("mean log NPX") + xlab("") + scale_shape_manual(values=rep(c(15:17,0:2), 20)[1:nlevels(highly.varying.mean.mat.melt$protein)])
plot(q)
dev.off()
ggplot(highly.varying.mean.mat.melt, aes(x=visit, y=mean.log.NPX)) + geom_line()

layout(matrix(1:16,nrow=4, byrow=T))
for(j in 1:length(highly.varying.prot.0.5)) {
  plot.correlation.line.plot.protein(highly.varying.prot.0.5[j])
}
dev.off()

subj.sd.mean<-apply(person.sd.mat, 1, mean, na.rm=T)
hist(subj.sd.mean)
subj.sd.mean.0.2.pos<-which(subj.sd.mean>0.2)
ord<-order(subj.sd.mean[subj.sd.mean.0.2.pos])
subj.sd.mean[subj.sd.mean.0.2.pos[ord]]


pdf(file="histogram.mean.sd.protein.subject.pdf", w=9, h=5)
layout(matrix(nrow=1, 1:2))
hist(prot.sd.mean, breaks=20, xlim=c(0,1.2), main="Protein standard deviation (SD)", xlab="mean SD")
hist(subj.sd.mean, breaks=20, main="Subject standard deviation (SD)", xlab="mean SD")
dev.off()

pdf(file="subject.sd.0.2.boxplot.pdf",w=12, h=8)
par(las=2)
boxplot(t(person.sd.mat[subj.sd.mean.0.2.pos[ord],]), cex.axis=0.8, main="Protein standard deviation across four visits for subjects with mean SD >0.2")
dev.off()

##För varje person med höga SD i medel, gör en egen plot för de mest varierande proteinerna
high.pos<-which(subj.sd.mean>0.18)
high.pos<-which(subj.sd.mean>0.10)
high.variation.subj<-as.numeric(names(subj.sd.mean[high.pos][order(subj.sd.mean[high.pos], decreasing = T)]))
high.variation.prot.tot<-vector()
pdf(file="top.30.variance.proteins.per.high.variance.subject.all.pdf", w=6, h=5)
for(j in 1:length(high.variation.subj)) {
  subj<-high.variation.subj[j]
  sd.vec<-person.sd.mat[match(subj, rownames(person.sd.mat)),]
  sd.vec<-sort(sd.vec[which(sd.vec>0.4)], decr=TRUE)
  if(length(sd.vec)>30) {
    sd.vec<-sd.vec[1:30]
  }
  high.variation.prot.tot<-c(high.variation.prot.tot, names(sd.vec))
  proseek.vec1<-filter(olink.visit1.tot, subject_id==subj)
  proseek.vec2<-filter(olink.visit2.tot, subject_id==subj)
  proseek.vec3<-filter(olink.visit3.tot, subject_id==subj)
  proseek.vec4<-filter(olink.visit4.tot, subject_id==subj)
 # prot.vec<-names(sd.vec)
 # filter(select_(olink.visit1.tot, .dots = prot.vec), subject_id==subj)
  person.proseek.mat<-matrix(nrow=0, ncol=6)
  colnames(person.proseek.mat)<-c("protein","SD","visit 1", "visit 2", "visit 3", "visit 4")
  for(k in 1:length(sd.vec)) {
    prot<-names(sd.vec)[k]
    sd<-sd.vec[k]
    person.proseek.mat<-rbind(person.proseek.mat, c(prot, sd, proseek.vec1[prot],proseek.vec2[prot],proseek.vec3[prot],proseek.vec4[prot]))
  }
  person.proseek.df<-as.data.frame(person.proseek.mat)
  person.proseek.df$protein<-as.factor(unlist(person.proseek.df$protein))
  person.proseek.df$SD<-as.numeric(unlist(person.proseek.df$SD))
  person.proseek.df$visit1<-as.numeric(unlist(person.proseek.df$`visit 1`))
  person.proseek.df$visit2<-as.numeric(unlist(person.proseek.df$`visit 2`))
  person.proseek.df$visit3<-as.numeric(unlist(person.proseek.df$`visit 3`))
  person.proseek.df$visit4<-as.numeric(unlist(person.proseek.df$`visit 4`))
  person.proseek.df<-select(person.proseek.df, SD, protein, visit1, visit2, visit3, visit4)
  person.proseek.df.melt<-melt(person.proseek.df, id.vars=c("protein","SD"))
  names(person.proseek.df.melt)<-c("protein","SD","visit","NPX")
  person.proseek.df.melt$protein <- reorder(person.proseek.df.melt$protein, -person.proseek.df.melt$SD)

  #q<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") +  scale_shape_manual(values=(1:nlevels(person.proseek.df.melt$protein))%%5) 
  q<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") + xlab("") + scale_shape_manual(values=rep(c(15:17,0:2), 5)[1:nlevels(person.proseek.df.melt$protein)])
  plot(q)
  
}
dev.off()

#Gör heatmap för de mest varierande proteinerna bland de 30 högsta personerna
high.variation.prot.table<-table(high.variation.prot.tot)
high.variation.prot.table.sort<-sort(high.variation.prot.table, decr=T)
high.variation.prot.table.sort.above1<-high.variation.prot.table.sort[which(high.variation.prot.table.sort>1)]
high.variation.prot.table.sort.above5<-high.variation.prot.table.sort[which(high.variation.prot.table.sort>5)]
high.variation.prot.unique<-unique(high.variation.prot.tot)
write(high.variation.prot.unique, file="high.variation.prottable.txt")
pdf(file="barplot.most.varying.proteins.above5.pdf",w=10,h=6)
par(las=2)
#barplot(high.variation.prot.table.sort.above5, col=rainbow(length(high.variation.prot.table.sort.above5)), ylab="Number of subjects", cex.names=0.6, ylim=c(0,30), main="Summary of the 30 most varying proteins per person")
barplot(high.variation.prot.table.sort.above5, col="red", ylab="Number of subjects", cex.names=0.6, ylim=c(0,30))
dev.off()

pdf(file="barplot.most.varying.proteins.above1.pdf",w=10,h=6)
par(las=2)
barplot(high.variation.prot.table.sort.above1, col=rainbow(length(high.variation.prot.table.sort.above1)), ylab="Number of subjects", cex.names=0.6, ylim=c(0,30), main="Summary of the 30 most varying proteins per person")
dev.off()


#Kolla vad de mest varierande proteinerna har för korrelation
high.var.pos<-which(rownames(cor.mat) %in% names(high.variation.prot.table.sort.above5))
cor.mat[high.var.pos,]
layout(matrix(1:6, nrow=2))
for(j in 1:6) {
  hist(cor.mat[high.var.pos,j], main=colnames(cor.mat)[j])
}

high.var.visit12.cor<-cor.mat[high.var.pos,1]
par(las=2)
barplot(sort(high.var.visit12.cor, decr=T))

#Gör om detta till att klustra i alla besök och inte bara visit 1
olink.subjects.visits<-c(paste0(olink.subjects, "_1"),paste0(olink.subjects, "_2"),paste0(olink.subjects, "_3"),paste0(olink.subjects, "_4"))
olink.proteins.visits<-c(paste0(olink.proteins, "_1"),paste0(olink.proteins, "_2"),paste0(olink.proteins, "_3"),paste0(olink.proteins, "_4"))
olink.visit.cols<-c(rep("#e41a1c",num.person), rep("#377eb8",num.person),rep("#4daf4a",num.person),rep("#984ea3",num.person))

#Gör om analysen med de proteiner som varierar mest utan att ta hänsyn till i hur många
#highly.varying.proteins<-names(high.variation.prot.table.sort.above5)
highly.varying.proteins<-names(sort(prot.sd.mean[which(prot.sd.mean>0.4)], decreasing=T))
highly.varying.proteins.pos<-which(names(olink.visit1.tot) %in% highly.varying.proteins)
highly.varying.protein.mat<-as.matrix(rbind(olink.visit1.tot[,highly.varying.proteins.pos],olink.visit2.tot[,highly.varying.proteins.pos],olink.visit3.tot[,highly.varying.proteins.pos],olink.visit4.tot[,highly.varying.proteins.pos])) 
mode(highly.varying.protein.mat)<-"numeric"
highly.varying.protein.mat.cor.prot<-cor(highly.varying.protein.mat, method="spearman", use="pairwise.complete.obs")
highly.varying.protein.mat.cor.subj<-cor(t(highly.varying.protein.mat), method="spearman", use="pairwise.complete.obs")
colnames(highly.varying.protein.mat.cor.subj)<-olink.subjects.visits
rownames(highly.varying.protein.mat.cor.subj)<-olink.subjects.visits

#Ta reda på vilka av de 48 som är membranproteiner
uniprot.membrane<-read.table("../uniprot_ensg_id_proteinclass_inc_ic.txt", header=T, sep="\t")
uniprot.membrane<-as.matrix(uniprot.membrane)

most.varying.info<-matrix(nrow=length(colnames(highly.varying.protein.mat)), ncol=6)
colnames(most.varying.info)<-c("protein","uniprot","membrane","secreted","panel","panel.type")
for(j in 1:length(colnames(highly.varying.protein.mat))) {
  prot<-colnames(highly.varying.protein.mat)[j]
  name.pos<-match(prot, proseek.uniprot.names)
  panel<-panels.total[name.pos]
  panel.type<-1
  mem<-0
  sec<-0
  if(name.pos>460) { panel.type<-2 }
  uni<-proseek.uniprot.tot[name.pos]
  uni.pos<-match(uni, uniprot.membrane[,"uniprot_id"])
  if(length(uni.pos)>0) {
    #print(c(prot, uni, uniprot.membrane[uni.pos,]))
    #most.varying.info[j,]<-uniprot.membrane[uni.pos,]
    class<-uniprot.membrane[uni.pos,"class"]
    if(length(grep("MDM", class))>0) {
      mem<-1
    }
    if(length(grep("MDSEC", class))>0) {
      sec<-1
    }
  }
  most.varying.info[j,]<-c(prot,uni,mem, sec, panel, panel.type)
}
most.varying.cor<-cor.mat[which(rownames(cor.mat) %in% colnames(highly.varying.protein.mat)),]

mem.sec.vec<-vector(length=nrow(most.varying.info))
mem.sec.vec[which(most.varying.info[,"membrane"]==1 & most.varying.info[,"secreted"]==1)]<-"mem/sec"
mem.sec.vec[which(most.varying.info[,"membrane"]==1 & most.varying.info[,"secreted"]==0)]<-"mem"
mem.sec.vec[which(most.varying.info[,"membrane"]==0 & most.varying.info[,"secreted"]==1)]<-"sec"
mem.sec.vec[which(most.varying.info[,"membrane"]==0 & most.varying.info[,"secreted"]==0)]<-"none"
membrane.colors<-mem.sec.vec
membrane.colors[which(membrane.colors=="none")]<-"grey"
membrane.colors[which(membrane.colors=="mem")]<-"#e41a1c"
membrane.colors[which(membrane.colors=="sec")]<-"#377eb8"
membrane.colors[which(membrane.colors=="mem/sec")]<-"#984ea3"
panel.type.varying.col<-most.varying.info[,"panel.type"]
names(panel.type.varying.col)<-most.varying.info[,"protein"]
panel.type.varying.col[which(panel.type.varying.col==1)]<-"#4daf4a"
panel.type.varying.col[which(panel.type.varying.col==2)]<-"#ff7f00"
panel.varying.col<-most.varying.info[,"panel"]
#panel.varying.col[which(panel.varying.col=="CVDII")]<-
  
  

d <- 1 - highly.varying.protein.mat.cor.subj
hcl.person <- hclust(as.dist(d), "average") 
pdf(file="dendrogram.person.highly.varying.all.visits.pdf",w=14, h=5)
plot(hcl.person, hang=-1, cex=1)
dev.off()

d.prot <- 1 - highly.varying.protein.mat.cor.prot
hcl.prot <- hclust(as.dist(d.prot), "average") 
pdf(file="dendrogram.protein.highly.varying.all.visits.pdf",w=30, h=5)
plot(hcl.prot, hang=-1, cex=0.5)
dev.off()
#maPalette(high="mediumblue", mid="mediumturquoise",low="#EEEEFF") -> cols
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)


pdf(file="most.varying.heatmap.subject.all.visits.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(highly.varying.protein.mat.cor.subj, Rowv=as.dendrogram(hcl.person), Colv=rev(as.dendrogram(hcl.person)), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.4, cexRow=0.4, col=my_palette, RowSideColors = rep(olink.sex.col,4), ColSideColors = olink.visit.cols)
dev.off()

pdf(file="most.varying.heatmap.protein.all.visits.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(highly.varying.protein.mat.cor.prot, Rowv=as.dendrogram(hcl.prot), Colv=rev(as.dendrogram(hcl.prot)), trace="none", na.col="gray" ,margins=c(7,7), cexCol=0.8, cexRow=0.8, col=my_palette,ColSideColors=membrane.colors, RowSideColors = panel.type.varying.col)
dev.off()

pdf(file="most.varying.heatmap.protein.subject.all.visits.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(highly.varying.protein.mat, Rowv=as.dendrogram(hcl.person), Colv=as.dendrogram(hcl.prot), labRow=olink.subjects.visits, trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.8, cexRow=0.4, col=my_palette,RowSideColors = rep(olink.sex.col,4))
dev.off()

#Gör histogram på korrelationer
pdf("most.varying.cor.histograms.pdf", h=8, w=12)
layout(matrix(1:6, ncol=3, byrow=T))
mean.cor.vec<-rep(0,6)
for(j in 1:6) {
  mean.cor<-round(mean(most.varying.cor[,j], na.rm=T),2)
  mean.cor.vec[j]<-mean.cor
  hist(most.varying.cor[,j], main=colnames(cor.mat)[j], xlab="Pearson cor", col=rainbow(6)[j], breaks=30, ylim=c(0,11))
  legend("topleft", legend=paste0("Mean cor: ",mean.cor), bty="n")
}
dev.off()


#Gör om samma heatmaps men baserat på proteiner 4 gånger
olink.proteins.visits.highly.varying<-c(paste0(names(olink.visit1.tot)[highly.varying.proteins.pos], "_1"),paste0(names(olink.visit1.tot)[highly.varying.proteins.pos], "_2"),paste0(names(olink.visit1.tot)[highly.varying.proteins.pos], "_3"),paste0(names(olink.visit1.tot)[highly.varying.proteins.pos], "_4"))

highly.varying.protein.times.4.mat<-as.matrix(cbind(olink.visit1.tot[,highly.varying.proteins.pos],olink.visit2.tot[,highly.varying.proteins.pos],olink.visit3.tot[,highly.varying.proteins.pos],olink.visit4.tot[,highly.varying.proteins.pos])) 
colnames(highly.varying.protein.times.4.mat)<-olink.proteins.visits.highly.varying
mode(highly.varying.protein.times.4.mat)<-"numeric"
highly.varying.protein.mat.times.4.cor.prot<-cor(highly.varying.protein.times.4.mat, method="spearman", use="pairwise.complete.obs")
na.pos<-which(apply(highly.varying.protein.mat.times.4.cor.prot, 2, function(x) length(which(is.na(x))))>0)
most.varying.visit.cols<-c(rep("#e41a1c", length(highly.varying.proteins.pos)), rep("#377eb8", length(highly.varying.proteins.pos)) ,rep("#4daf4a", length(highly.varying.proteins.pos)), rep("#984ea3", length(highly.varying.proteins.pos)))

if(length(na.pos)>0) {
  highly.varying.protein.mat.times.4.cor.prot<-highly.varying.protein.mat.times.4.cor.prot[-na.pos,-na.pos]
  most.varying.visit.cols<-most.varying.visit.cols[-na.pos]
  
}
highly.varying.protein.mat.times.4.cor.subj<-cor(t(highly.varying.protein.times.4.mat), method="spearman", use="pairwise.complete.obs")
colnames(highly.varying.protein.mat.times.4.cor.subj)<-olink.subjects
rownames(highly.varying.protein.mat.times.4.cor.subj)<-olink.subjects


d <- 1 - highly.varying.protein.mat.times.4.cor.subj
hcl.person <- hclust(as.dist(d), "average") 
d.prot <- 1 - highly.varying.protein.mat.times.4.cor.prot
hcl.prot <- hclust(as.dist(d.prot), "average") 
pdf(file="dendrogram.protein.highly.varying.all.visits.protein.pdf",w=30, h=5)
plot(hcl.prot, hang=-1, cex=0.5)
dev.off()
#maPalette(high="mediumblue", mid="mediumturquoise",low="#EEEEFF") -> cols
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)

pdf(file="most.varying.heatmap.subject.all.visits.protein.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(highly.varying.protein.mat.times.4.cor.subj, Rowv=as.dendrogram(hcl.person), Colv=rev(as.dendrogram(hcl.person)), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.4, cexRow=0.4, col=my_palette, RowSideColors = olink.sex.col)
dev.off()

pdf(file="most.varying.heatmap.protein.all.visits.protein.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(highly.varying.protein.mat.times.4.cor.prot, Rowv=as.dendrogram(hcl.prot), Colv=rev(as.dendrogram(hcl.prot)), trace="none", na.col="gray" ,margins=c(7,7), cexCol=0.3, cexRow=0.3, col=my_palette, RowSideColors=most.varying.visit.cols)
dev.off()

pdf(file="most.varying.heatmap.protein.subject.all.visits.protein.pdf",w=13,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(highly.varying.protein.times.4.mat, Rowv=as.dendrogram(hcl.person), Colv=as.dendrogram(hcl.prot), labRow=olink.subjects, trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.3, cexRow=0.6, col=my_palette,ColSideColors=most.varying.visit.cols,RowSideColors = olink.sex.col)
dev.off()


#Gör PCA
na.pos<-which(apply(highly.varying.protein.times.4.mat, 2, function(x) length(which(is.na(x))))>0)
most.varying.visit.cols<-c(rep("#e41a1c", length(highly.varying.proteins.pos)), rep("#377eb8", length(highly.varying.proteins.pos)) ,rep("#4daf4a", length(highly.varying.proteins.pos)), rep("#984ea3", length(highly.varying.proteins.pos)))
most.varying.visit.cols.no.na<-most.varying.visit.cols[-na.pos]
rownames(highly.varying.protein.times.4.mat)<-olink.subjects
pca<-prcomp(highly.varying.protein.times.4.mat[,-na.pos],scale.=T)
rot<-pca$r
pdf(file="pca.most.varying.proteins.pdf",w=10,h=10)
layout(matrix(nrow=2, 1:4, byrow=T))
plot(rot[,1:2], pch=19, main="Loadings",col=most.varying.visit.cols.no.na)
plot(rot[,1:2], pch="", main="Loadings")
text(rot[,1:2], colnames(highly.varying.protein.times.4.mat)[-na.pos], col=most.varying.visit.cols.no.na, cex=0.7)
scores<-pca$x
plot(scores[,1:2], pch="", main="Scores")
#plot(scores[,1:2], pch=19, main="Scores")
text(scores[,1:2], rownames(highly.varying.protein.times.4.mat), col=olink.sex.col)
biplot(pca, main="Biplot", cex=0.7)
#plot(pca)
dev.off()

r<-Rtsne(highly.varying.protein.times.4.mat[,-na.pos], perplexity=20)
r.prot<-Rtsne(t(highly.varying.protein.times.4.mat[,-na.pos]), perplexity=5)

pdf(file="tsne.most.varying.proteins.pdf",w=10,h=6)
layout(matrix(nrow=1, 1:2, byrow=T))
plot(r.prot$Y[,1:2], pch=19,col=most.varying.visit.cols.no.na,xlab="tSNE1",ylab="tSNE2")
plot(r.prot$Y[,1:2], pch="",xlab="tSNE1",ylab="tSNE2")
text(r.prot$Y[,1:2], colnames(highly.varying.protein.times.4.mat)[-na.pos], col=most.varying.visit.cols.no.na, cex=0.6)
#plot(r$Y[,1:2], pch="",xlab="tSNE1",ylab="tSNE2")
#text(r$Y[,1:2], rownames(highly.varying.protein.times.4.mat), col=olink.sex.col, cex=0.6)
dev.off()


#Gör om samma sak men välj  ut proteiner som har dålig korrelation <0.3
cor.mat.mean<-apply(cor.mat, 1, mean, na.rm=T)
pdf("histogram.cor.mat.mean.pdf",w=10, h=10)
hist(cor.mat.mean)
dev.off()

#Plotta medelkorrelation mot protein-SD
plot(prot.sd.mean, cor.mat.mean)

sd.cor.colors<-rep(" ",length(prot.sd.mean))
sd.cor.colors[which(prot.sd.mean>0.4)]<-"intra SD > 0.4"
sd.cor.colors[which(cor.mat.mean<0.3)]<-"cor < 0.3"
sd.cor.colors[which(cor.mat.mean<0.3 & prot.sd.mean>0.4)]<-"intra SD > 0.4 and cor < 0.3"
sd.cor.df<-data.frame(protein=names(prot.sd.mean), mean.correlation=cor.mat.mean, mean.sd=prot.sd.mean, cols=sd.cor.colors)

prot.clustered.pos<-which(olink.proteins %in% prot.clustered.ext.names.multi.add)

diff.pos<-which(cor.mat.mean<0.3 & prot.sd.mean>0.4)
as.vector(sd.cor.df[diff.pos,"protein"])

pdf(file="intra.sd.vs.correlation.pdf",w=17,h=7)
g1<-ggplot(sd.cor.df, aes(x=mean.correlation, y=mean.sd, color=cols)) + geom_point()+ geom_hline(yintercept=0.4)+ geom_vline(xintercept=0.3) + xlab("mean visit-to-visit correlation")+ ylab("mean intravisit SD")#+ggtitle("Protein standard deviations")
#plot(g1)
g2<-ggplot(sd.cor.df, aes(x=mean.correlation, y=mean.sd, color=cols)) + geom_point(data=subset(sd.cor.df, mean.correlation > 0.3 & mean.sd < 0.4),aes(x=mean.correlation, y=mean.sd)) + geom_text(data=subset(sd.cor.df, mean.correlation <= 0.3 |  mean.sd >= 0.4),aes(x=mean.correlation, y=mean.sd,label=protein)) + xlab("mean visit-to-visit correlation")+ ylab("mean intravisit SD")#+ggtitle("Protein standard deviations")
#plot(g2)
#g2<-ggplot(protein.intra.inter.sd.all.visits.df.melt, aes(x=visit.SD, y=mean.intraindividual.sd, color=visit)) + geom_point() + xlab("individual variation for one visit (visit SD)")+ ylab("variation for individuals in four visits (mean of all subject SD)") +  scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3")) #+ geom_point(data=you.df,color=c("#e41a1c","#377eb8","#4daf4a","#984ea3"), size=3)#+ggtitle("Protein standard deviations")+
multiplot(g1, g2, cols=2)
dev.off()

prot.clustered.pos<-which(olink.proteins %in% prot.clustered.ext.names.multi.add)

sd.cor.colors<-rep(" ",length(prot.sd.mean))
sd.cor.colors[prot.clustered.pos]<-"clustered by visit"
sd.cor.df<-data.frame(protein=names(prot.sd.mean), mean.correlation=cor.mat.mean, mean.sd=prot.sd.mean, cols=sd.cor.colors)


pdf(file="170825 intra.sd.vs.correlation.clustered.by.visit.pdf",w=17,h=7)
g1<-ggplot(sd.cor.df, aes(x=mean.correlation, y=mean.sd, color=cols)) + geom_point()+ geom_hline(yintercept=0.4)+ geom_vline(xintercept=0.3) + xlab("mean visit-to-visit correlation")+ ylab("mean intravisit SD") + scale_colour_manual(values=c("black","red"))#+ggtitle("Protein standard deviations")
#plot(g1)
g2<-ggplot(sd.cor.df, aes(x=mean.correlation, y=mean.sd, color=cols)) + geom_point(data=subset(sd.cor.df, sd.cor.colors==" "),aes(x=mean.correlation, y=mean.sd)) + geom_text(data=subset(sd.cor.df,  sd.cor.colors=="clustered by visit"),aes(x=mean.correlation, y=mean.sd,label=protein)) + xlab("mean visit-to-visit correlation")+ ylab("mean intravisit SD")+ scale_colour_manual(values=c("black","red"))#+ggtitle("Protein standard deviations")
#plot(g2)
#g2<-ggplot(protein.intra.inter.sd.all.visits.df.melt, aes(x=visit.SD, y=mean.intraindividual.sd, color=visit)) + geom_point() + xlab("individual variation for one visit (visit SD)")+ ylab("variation for individuals in four visits (mean of all subject SD)") +  scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3")) #+ geom_point(data=you.df,color=c("#e41a1c","#377eb8","#4daf4a","#984ea3"), size=3)#+ggtitle("Protein standard deviations")+
multiplot(g1, g2, cols=2)
dev.off()

pdf(file="170511 correlation.vs.sd.between.visits..pdf",w=17,h=7)
g1<-ggplot(sd.cor.df, aes(x=mean.correlation, y=mean.sd, color=cols)) + geom_point()+ geom_hline(yintercept=0.4)+ geom_vline(xintercept=0.3) + xlab("mean visit-to-visit correlation")+ ylab("mean standard deviation between visits") + scale_colour_manual(values=c("black","red"))#+ggtitle("Protein standard deviations")
g2<-ggplot(sd.cor.df, aes(x=mean.correlation, y=mean.sd, color=cols, label=protein)) + geom_text(data=subset(sd.cor.df, sd.cor.colors==" "),size=3,aes(x=mean.correlation, y=mean.sd)) + geom_text(data=subset(sd.cor.df,  sd.cor.colors=="clustered by visit"),aes(x=mean.correlation, y=mean.sd), size=3) + xlab("mean visit-to-visit correlation")+ ylab("mean standard deviation between visits")+ scale_colour_manual(values=c("black","red"))#+ggtitle("Protein standard deviations")
multiplot(g1, g2, cols=2)
dev.off()

######################### Titta på intra och intervisit variation för varje protein
protein.intra.inter.sd<-matrix(nrow=num.prot, ncol=2)
colnames(protein.intra.inter.sd)<-c("mean.intravisit.sd","mean.intraindividual.sd")
rownames(protein.intra.inter.sd)<-olink.proteins

protein.intra.inter.sd.all.visits<-matrix(nrow=num.prot, ncol=5)
colnames(protein.intra.inter.sd.all.visits)<-c("sd.visit.1","sd.visit.2","sd.visit.3","sd.visit.4","mean.intraindividual.sd")
rownames(protein.intra.inter.sd.all.visits)<-olink.proteins

protein.person.sd.mat<-matrix(nrow=num.prot, ncol=length(olink.subjects))
rownames(protein.person.sd.mat)<-olink.proteins
colnames(protein.person.sd.mat)<-olink.subjects

for(j in 1:num.prot) {
  prot.name<-olink.proteins[j]
  prot.data<-cbind(olink.visit1.tot[,prot.name], olink.visit2.tot[,prot.name], olink.visit3.tot[,prot.name], olink.visit4.tot[,prot.name])
  colnames(prot.data)<-c("visit 1","visit 2", "visit 3","visit 4")
  person.sd<- apply(prot.data, 1, sd, na.rm=T)
  protein.person.sd.mat[j,]<-person.sd
  names(person.sd)<-olink.subjects
  visit.sd<- apply(prot.data, 2, sd, na.rm=T)
  protein.intra.inter.sd.all.visits[j,]<-c(visit.sd, mean(person.sd, na.rm=T))
  protein.intra.inter.sd[j,]<-c(mean(visit.sd, na.rm=T), mean(person.sd, na.rm=T))
}

protein.intra.inter.sd.df<-as.data.frame(protein.intra.inter.sd)
protein.intra.inter.sd.df$protein<-rownames(protein.intra.inter.sd)
protein.intra.inter.sd.df$uniprot<-olink.go.uniprot.reduced.mat$Uniprot.id
protein.intra.inter.sd.df$biological.function<-olink.go.uniprot.reduced.mat$Function
protein.intra.inter.sd.df$panel<-olink.go.uniprot.reduced.mat$Panels

write.xls(protein.intra.inter.sd.df, file="protein.intravisit.intraindividual.sd.xls")

protein.person.sd.df<-as.data.frame(protein.person.sd.mat)
protein.person.sd.df$protein<-olink.proteins
protein.person.sd.df$uniprot<-olink.go.uniprot.reduced.mat$Uniprot.id
protein.person.sd.df$uniprot<-olink.go.uniprot.reduced.mat$Uniprot.id

protein.person.sd.df$ensg<-uniprot.olink.selected[,"ensg_id"]
protein.person.sd.df<-select(protein.person.sd.df, protein, ensg, uniprot, everything())

pdf(file="protein.intra.visit.subject.new.pdf",6,6,  useDingbats = F)
xlim<-0.9
ylim<-0.35
p <- ggplot(protein.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd)) + geom_point(alpha=0.4)
#p <- p + geom_point(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd <= xlim & mean.intraindividual.sd <= ylim),aes(mean.intravisit.sd,mean.intraindividual.sd), alpha=0.5)
p <- p + geom_text_repel(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd > xlim | mean.intraindividual.sd > ylim),aes(mean.intravisit.sd,mean.intraindividual.sd,label=protein))
p <- p + xlab("variation between individuals")+ ylab("variation within individuals")#+ggtitle("Protein standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black")) + coord_fixed(ratio=2)
#p <- p + geom_hline(yintercept=ylim, linetype=2) + geom_vline(xintercept=xlim, linetype=2) 
p
dev.off()

pdf(file="protein.intra.visit.subject.label.pdf",10,10,  useDingbats = F)
xlim<-0
ylim<-0
p <- ggplot(protein.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd))# + geom_point(alpha=0.4)
#p <- p + geom_point(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd <= xlim & mean.intraindividual.sd <= ylim),aes(mean.intravisit.sd,mean.intraindividual.sd), alpha=0.5)
p <- p + geom_text(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd > xlim | mean.intraindividual.sd > ylim),aes(mean.intravisit.sd,mean.intraindividual.sd,label=protein))
p <- p + xlab("variation between individuals")+ ylab("variation within individuals")#+ggtitle("Protein standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black")) + coord_fixed(ratio=2)
#p <- p + geom_hline(yintercept=ylim, linetype=2) + geom_vline(xintercept=xlim, linetype=2) 
p
dev.off()



pdf(file="protein.intra.visit.for.protein.atlas.GH1.pdf",w=7,h=7,  useDingbats = F)
xlim<-1
ylim<-0.4
point.mat<-filter(protein.intra.inter.sd.df, protein=="GH1")
p <- ggplot(protein.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd, color=category)) + geom_point(alpha=0.6, color="grey")
p <- p + xlab("variation between individuals")+ ylab("variation within individuals")#+ggtitle("Protein standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"), legend.position = "none") #+ coord_fixed(ratio=2)
p <- p + geom_point(data=point.mat,  aes(x=mean.intravisit.sd, y=mean.intraindividual.sd),color="red")+ geom_text_repel(data=point.mat,  aes(x=mean.intravisit.sd, y=mean.intraindividual.sd, label=protein, color="red"))
p
dev.off()

pdf(file="protein.intra.visit.for.protein.atlas.LEP.pdf",w=7,h=7,  useDingbats = F)
xlim<-1
ylim<-0.4
point.mat<-filter(protein.intra.inter.sd.df, protein=="LEP")
p <- ggplot(protein.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd, color=category)) + geom_point(alpha=0.6, color="grey")
p <- p + xlab("variation between individuals")+ ylab("variation within individuals")#+ggtitle("Protein standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"), legend.position = "none") #+ coord_fixed(ratio=2)
p <- p + geom_point(data=point.mat,  aes(x=mean.intravisit.sd, y=mean.intraindividual.sd),color="red")+ geom_text_repel(data=point.mat,  aes(x=mean.intravisit.sd, y=mean.intraindividual.sd, label=protein, color="red"))
p
dev.off()


pdf(file="protein.intra.visit.for.protein.atlas.IQGAP2.pdf",w=7,h=7,  useDingbats = F)
xlim<-1
ylim<-0.4
point.mat<-filter(protein.intra.inter.sd.df, protein=="IQGAP2")
p <- ggplot(protein.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd, color=category)) + geom_point(alpha=0.6, color="grey")
p <- p + xlab("variation between individuals")+ ylab("variation within individuals")#+ggtitle("Protein standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"), legend.position = "none") #+ coord_fixed(ratio=2)
p <- p + geom_point(data=point.mat,  aes(x=mean.intravisit.sd, y=mean.intraindividual.sd),color="red")+ geom_text_repel(data=point.mat,  aes(x=mean.intravisit.sd, y=mean.intraindividual.sd, label=protein, color="red"))
p
dev.off()

pdf(file="protein.intra.visit.for.protein.atlas.FOLR3.pdf",w=7,h=7,  useDingbats = F)
xlim<-1
ylim<-0.4
point.mat<-filter(protein.intra.inter.sd.df, protein=="FOLR3")
p <- ggplot(protein.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd, color=category)) + geom_point(alpha=0.6, color="grey")
p <- p + xlab("variation between individuals")+ ylab("variation within individuals")#+ggtitle("Protein standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"), legend.position = "none") #+ coord_fixed(ratio=2)
p <- p + scale_color_manual(values=c("#d95f02", "grey","#7570b3","#1b9e77"))
p <- p + geom_point(data=point.mat,  aes(x=mean.intravisit.sd, y=mean.intraindividual.sd),color="red")+ geom_text_repel(data=point.mat,  aes(x=mean.intravisit.sd, y=mean.intraindividual.sd, label=protein, color="red"))
p
dev.off()

olink.triangle.data<-read.table("Olink_triangle_value.txt",header=T, sep="\t")
names(olink.triangle.data)[1]<-"protein"
protein.intra.inter.sd.df.triangle<-merge(protein.intra.inter.sd.df, olink.triangle.data, by="protein")
#names(protein.intra.inter.sd.df.triangle)[which(names(protein.intra.inter.sd.df.triangle)=="category")]<-"color.cat"

pdf(file="protein.intra.visit.subject.paper.pdf",w=10,h=7,  useDingbats = F)
xlim<-0.8
ylim<-0.35
p <- ggplot(protein.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd)) + geom_point(alpha=0.4)
#p <- p + geom_point(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd <= xlim & mean.intraindividual.sd <= ylim),aes(mean.intravisit.sd,mean.intraindividual.sd), alpha=0.5)
p <- p + geom_text_repel(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd > xlim | mean.intraindividual.sd > ylim),aes(mean.intravisit.sd,mean.intraindividual.sd,label=protein))
p <- p + xlab("variation between individuals")+ ylab("variation within individuals")#+ggtitle("Protein standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black")) #+ coord_fixed(ratio=2)
#p <- p + geom_hline(yintercept=ylim, linetype=2) + geom_vline(xintercept=xlim, linetype=2) 
p
dev.off()

pdf(file="protein.intra.visit.subject.paper.triangle.colors.pdf",w=10,h=7,  useDingbats = F)
xlim<-1
ylim<-0.4
p <- ggplot(protein.intra.inter.sd.df.triangle, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd, color=category)) + geom_point(alpha=0.4)+ geom_point(data=subset(protein.intra.inter.sd.df.triangle, category!="none"), alpha=0.8)
#p <- p + geom_point(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd <= xlim & mean.intraindividual.sd <= ylim),aes(mean.intravisit.sd,mean.intraindividual.sd), alpha=0.5)
p <- p + geom_text_repel(data=subset(protein.intra.inter.sd.df.triangle, mean.intravisit.sd > xlim | mean.intraindividual.sd > ylim),aes(mean.intravisit.sd,mean.intraindividual.sd,label=protein))
#p <- p + geom_text_repel(data=subset(protein.intra.inter.sd.df.triangle, category!="none"),aes(mean.intravisit.sd,mean.intraindividual.sd,label=protein))
p <- p + xlab("variation between individuals")+ ylab("variation within individuals")#+ggtitle("Protein standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black")) #+ coord_fixed(ratio=2)
p <- p + scale_color_manual(values=c("#d95f02", "grey","#7570b3","#1b9e77"))
#p <- p + geom_hline(yintercept=ylim, linetype=2) + geom_vline(xintercept=xlim, linetype=2) 
p
dev.off()


write.xls(protein.intra.inter.sd.df, file="olink.protein.intra.inter.sd.xls")

######### Make own triangle plot

olink.exprs.melt<-melt(olink.tot.mat)
names(olink.exprs.melt)<-c("subject.visit","protein","value")
olink.exprs.melt$subject_id<-substring(olink.exprs.melt$subject.visit, 0,4)
olink.exprs.melt$visit<-substring(olink.exprs.melt$subject.visit, 6)

## olink.exprs.melt (protein, value, visit, subject_id)

olink.perMat = sapply(levels(olink.exprs.melt$protein),function(i){
  gene.profile <- olink.exprs.melt[olink.exprs.melt$protein==i,]
  gene.fit <- lm(gene.profile$value~gene.profile$visit+gene.profile$subject_id)
  gene.aov <- anova(gene.fit)
  gene.afss <- gene.aov$`Sum Sq`
  return(gene.afss/sum(gene.afss)*100)
})

perMat = t(olink.perMat)
colnames(perMat)=c("Time_varying", "Inter_individual", "Residual")
perMat <- data.frame(perMat)
perMat$name <- rownames(perMat)

ggtern(perMat, aes(Inter_individual,Residual,Time_varying,label=name))+ geom_point()+  geom_mask()+  scale_size_manual(values=c(0.1,2.5,2.5,2.5))# + stat_density_tern(aes(fill=..level..), bin=5,  size=.1,  color='grey')

pdf("olink.triangle.plot.2d.version.pdf",w=10,h=10)
ggplot(perMat, aes(y=Inter_individual,x=Time_varying,label=name))+ geom_text()+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.position = "none")
dev.off()

pdf("olink.triangle.plot.2d.version.IQGAP2.pdf",w=10,h=10)
point.mat<-filter(perMat, name=="IQGAP2")
g <- ggplot(perMat, aes(y=Inter_individual,x=Time_varying))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.position = "none")
g <- g + geom_point(color="grey")+ geom_point(data=point.mat,  aes(y=Inter_individual,x=Time_varying),color="red")
g <- g + geom_text(data=point.mat,  aes(y=Inter_individual,x=Time_varying,label=name, color="red"))
plot(g)
dev.off()

pdf("olink.triangle.plot.2d.version.FOLR3.pdf",w=10,h=10)
point.mat<-filter(perMat, name=="FOLR3")
g <- ggplot(perMat, aes(y=Inter_individual,x=Time_varying))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.position = "none")
g <- g + geom_point(color="grey")+ geom_point(data=point.mat,  aes(y=Inter_individual,x=Time_varying),color="red")
g <- g + geom_text(data=point.mat,  aes(y=Inter_individual,x=Time_varying,label=name, color="red"))
plot(g)
dev.off()

pdf("olink.triangle.plot.2d.version.LEP.pdf",w=10,h=10)
point.mat<-filter(perMat, name=="LEP")
g <- ggplot(perMat, aes(y=Inter_individual,x=Time_varying))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.position = "none")
g <- g + geom_point(color="grey")+ geom_point(data=point.mat,  aes(y=Inter_individual,x=Time_varying),color="red")
g <- g + geom_text(data=point.mat,  aes(y=Inter_individual,x=Time_varying,label=name, color="red"))
plot(g)
dev.off()

pdf("olink.triangle.plot.2d.version.GH1.pdf",w=10,h=10)
point.mat<-filter(perMat, name=="GH1")
g <- ggplot(perMat, aes(y=Inter_individual,x=Time_varying))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.position = "none")
g <- g + geom_point(color="grey")+ geom_point(data=point.mat,  aes(y=Inter_individual,x=Time_varying),color="red")
g <- g + geom_text(data=point.mat,  aes(y=Inter_individual,x=Time_varying,label=name, color="red"))
plot(g)
dev.off()

write.table(perMat, file="olink.triangle.plot.data.txt", sep="\t",quote=F, row.names=F)


pdf("olink.triangle.plot.pdf",w=13,h=10)
g1<-ggtern(perMat, aes(Inter_individual,Residual,Time_varying,label=name)) + geom_point(color="black")+  geom_mask()+  scale_size_manual(values=c(0.1,2.5,2.5,2.5))
g1<-g1+ theme_light()#theme_custom(base_size = 12, base_family = "",tern.plot.background = NULL, tern.panel.background = "white",   col.T = "grey", col.L = "grey", col.R = "grey",  col.grid.minor = "white")
g1
dev.off()

pdf("olink.triangle.plot.label.pdf",w=13,h=10)
g1<-ggtern(perMat, aes(Inter_individual,Residual,Time_varying,label=name)) + geom_text()+ geom_mask()+  scale_size_manual(values=c(0.1,2.5,2.5,2.5))
g1<-g1+ theme_light()#theme_custom(base_size = 12, base_family = "",tern.plot.background = NULL, tern.panel.background = "white",   col.T = "grey", col.L = "grey", col.R = "grey",  col.grid.minor = "white")
g1
dev.off()


pdf("olink.triangle.plot.IQGAP.pdf",w=13,h=10)
point.mat<-filter(perMat, name=="IQGAP2")
g1<-ggtern(perMat, aes(Inter_individual,Residual,Time_varying,label=name)) + geom_point(color="grey")+ geom_point(data=point.mat,  aes(Inter_individual,Residual,Time_varying,label=name),color="red")+ geom_text(data=point.mat,  aes(Inter_individual,Residual,Time_varying,label=name, color="red"))+  geom_mask()+  scale_size_manual(values=c(0.1,2.5,2.5,2.5))
g1<-g1+  theme_light() + theme(legend.position="none")#theme_custom(base_size = 12, base_family = "",tern.plot.background = NULL, tern.panel.background = "white",   col.T = "grey", col.L = "grey", col.R = "grey",  col.grid.minor = "white")
g1
dev.off()

pdf("olink.triangle.plot.LEP.pdf",w=13,h=10)
point.mat<-filter(perMat, name=="LEP")
g1<-ggtern(perMat, aes(Inter_individual,Residual,Time_varying,label=name)) + geom_point(color="grey")+ geom_point(data=point.mat,  aes(Inter_individual,Residual,Time_varying,label=name),color="red")+ geom_text(data=point.mat,  aes(Inter_individual,Residual,Time_varying,label=name, color="red"))+  geom_mask()+  scale_size_manual(values=c(0.1,2.5,2.5,2.5))
g1<-g1+  theme_light() + theme(legend.position="none")#theme_custom(base_size = 12, base_family = "",tern.plot.background = NULL, tern.panel.background = "white",   col.T = "grey", col.L = "grey", col.R = "grey",  col.grid.minor = "white")
g1
dev.off()

pdf("olink.triangle.plot.FOLR3.pdf",w=13,h=10)
point.mat<-filter(perMat, name=="FOLR3")
g1<-ggtern(perMat, aes(Inter_individual,Residual,Time_varying,label=name)) + geom_point(color="grey")+ geom_point(data=point.mat,  aes(Inter_individual,Residual,Time_varying,label=name),color="red")+ geom_text(data=point.mat,  aes(Inter_individual,Residual,Time_varying,label=name, color="red"))+  geom_mask()+  scale_size_manual(values=c(0.1,2.5,2.5,2.5))
g1<-g1+  theme_light() + theme(legend.position="none")#theme_custom(base_size = 12, base_family = "",tern.plot.background = NULL, tern.panel.background = "white",   col.T = "grey", col.L = "grey", col.R = "grey",  col.grid.minor = "white")
g1
dev.off()

pdf("olink.triangle.plot.GH1.pdf",w=13,h=10)
point.mat<-filter(perMat, name=="GH1")
g1<-ggtern(perMat, aes(Inter_individual,Residual,Time_varying,label=name)) + geom_point(color="grey")+ geom_point(data=point.mat,  aes(Inter_individual,Residual,Time_varying,label=name),color="red")+ geom_text(data=point.mat,  aes(Inter_individual,Residual,Time_varying,label=name, color="red"))+  geom_mask()+  scale_size_manual(values=c(0.1,2.5,2.5,2.5))
g1<-g1+  theme_light() + theme(legend.position="none")#theme_custom(base_size = 12, base_family = "",tern.plot.background = NULL, tern.panel.background = "white",   col.T = "grey", col.L = "grey", col.R = "grey",  col.grid.minor = "white")
g1
dev.off()



#+ stat_density_tern(aes(fill=..level..), bin=5,  size=.1,  color='grey') 



#+  scale_colour_manual(values=colorPalette) +
#+ geom_point(aes(color=category,size=category))



#Gör samma sak men med alla visiter i olika färg
protein.intra.inter.sd.all.visits.df<-as.data.frame(protein.intra.inter.sd.all.visits)
protein.intra.inter.sd.all.visits.df$protein<-olink.proteins
protein.intra.inter.sd.all.visits.df.melt<-melt(protein.intra.inter.sd.all.visits.df, c("protein","mean.intraindividual.sd"))
names(protein.intra.inter.sd.all.visits.df.melt)[3:4]<-c("visit","visit.SD")
protein.intra.inter.sd.all.visits.df.melt$visit<-substr(protein.intra.inter.sd.all.visits.df.melt$visit, 10,11)

protein.intra.inter.sd.all.visits.df.tot<-protein.intra.inter.sd.all.visits.df
protein.intra.inter.sd.all.visits.df.tot$mean.intravisit.sd<-protein.intra.inter.sd.df$mean.intravisit.sd
protein.intra.inter.sd.all.visits.df.tot$uniprot<-olink.go.uniprot.reduced.mat$Uniprot.id
protein.intra.inter.sd.all.visits.df.tot$ensg<-uniprot.olink.selected[,"ensg_id"]
protein.intra.inter.sd.all.visits.df.tot<-select(protein.intra.inter.sd.all.visits.df.tot, protein, uniprot,ensg, everything())

#write.table(protein.person.sd.df, file="olink.protein.person.sd.table.txt",sep="\t", dec=".", row.names = F, quote=F)
#write.table(protein.intra.inter.sd.all.visits.df.tot, file="olink.protein.visit.sd.table.txt",sep="\t", dec=".", row.names = F, quote=F)




pdf(file="protein.intra.visit.subject.multi.pdf",w=20,h=7)
g1<-ggplot(protein.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd)) + geom_point(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd < 1 & mean.intraindividual.sd < 0.4),aes(mean.intravisit.sd,mean.intraindividual.sd)) + geom_text(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd > 1 | mean.intraindividual.sd > 0.4),aes(mean.intravisit.sd,mean.intraindividual.sd,label=protein)) + xlab("individual variation for one visit (mean visit SD)")+ ylab("variation for individuals in four visits (mean of all subject SD)")#+ggtitle("Protein standard deviations")
g2<-ggplot(protein.intra.inter.sd.all.visits.df.melt, aes(x=visit.SD, y=mean.intraindividual.sd, color=visit)) + geom_point() + xlab("individual variation for one visit (visit SD)")+ ylab("variation for individuals in four visits (mean of all subject SD)") +  scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3")) #+ geom_point(data=you.df,color=c("#e41a1c","#377eb8","#4daf4a","#984ea3"), size=3)#+ggtitle("Protein standard deviations")+
g3<-ggplot(protein.intra.inter.sd.all.visits.df.melt, aes(x=visit.SD, y=mean.intraindividual.sd, color=visit)) + geom_point(data=subset(protein.intra.inter.sd.all.visits.df.melt, visit.SD <= 1 & mean.intraindividual.sd <= 0.4),aes(visit.SD,mean.intraindividual.sd,label=protein)) + geom_text(data=subset(protein.intra.inter.sd.all.visits.df.melt, visit.SD > 1 | mean.intraindividual.sd > 0.4),aes(visit.SD,mean.intraindividual.sd,label=protein)) + xlab("individual variation for one visit (visit SD")+ ylab("variation for individuals in four visits (mean of all subject SD)") +  scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3")) #+ geom_point(data=you.df,color=c("#e41a1c","#377eb8","#4daf4a","#984ea3"), size=3)#+ggtitle("Protein standard deviations")+
multiplot(g1, g2, g3, cols=3)
dev.off()



pdf(file="protein.intra.visit.subject.pdf",7,7)
ggplot(protein.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd)) + geom_point() + geom_text(data=subset(protein.intra.inter.sd.df, mean.intravisit.sd > 1 | mean.intraindividual.sd > 0.55),aes(mean.intravisit.sd,mean.intraindividual.sd,label=protein)) + xlab("individual variation for one visit (mean)")+ ylab("variation for individuals in four visits (mean)")#+ggtitle("Protein standard deviations")
dev.off()

#Gör samma sak men med personer över tid
subject.intra.inter.sd<-matrix(nrow=num.person, ncol=2)
colnames(subject.intra.inter.sd)<-c("mean.intravisit.sd","mean.intraprotein.sd")
rownames(subject.intra.inter.sd)<-olink.subjects

subject.intra.inter.sd.all.visits<-matrix(nrow=num.person, ncol=5)
colnames(subject.intra.inter.sd.all.visits)<-c("sd.visit.1","sd.visit.2","sd.visit.3","sd.visit.4","mean.intraprotein.sd")
rownames(subject.intra.inter.sd.all.visits)<-olink.subjects

for(j in 1:num.person) {
  subj<-olink.subjects[j]
  subj.data<-cbind(as.numeric(filter(olink.visit1.tot, subject_id==subj))[-1], as.numeric(filter(olink.visit2.tot, subject_id==subj))[-1],as.numeric(filter(olink.visit3.tot, subject_id==subj))[-1],as.numeric(filter(olink.visit4.tot, subject_id==subj))[-1])
  names(subj.data)<-c("visit 1","visit 2", "visit 3","visit 4")
  protein.sd<- apply(subj.data, 1, sd, na.rm=T)
  names(protein.sd)<-olink.proteins
  visit.sd<- apply(subj.data, 2, sd, na.rm=T)
  subject.intra.inter.sd[j,]<-c(mean(visit.sd, na.rm=T), mean(protein.sd, na.rm=T))
  subject.intra.inter.sd.all.visits[j,]<-c(visit.sd, mean(protein.sd, na.rm=T))
  
}
subject.intra.inter.sd.df<-as.data.frame(subject.intra.inter.sd)
subject.intra.inter.sd.df$subjects<-olink.subjects
#subject.intra.inter.sd.df$sex<-olink.sex.col
sex.char<-unlist((wellness.data[which(wellness.data$subject_id %in% olink.visit1.tot$subject_id ),"sex"]))
sex.char.weight.low<-sex.char
sex.char.weight.low[weight.down.olink.pos]<-"weight loss"
sex.char.weight.low[weight.up.olink.pos]<-"weight gain"

subject.intra.inter.sd.df$gender<-sex.char
subject.intra.inter.sd.df$gender_weight_loss<-sex.char.weight.low

pdf(file="subject.intra.visit.pdf",7,7)
ggplot(subject.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraprotein.sd, label=subjects, color=gender)) + geom_text() + xlab("protein variation for one visit (mean visit SD)")+ ylab("variation for one protein in four visits (mean of total protein SD)")
dev.off()

pdf(file="subject.intra.visit.clean.pdf",7,7)
p <- ggplot(subject.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraprotein.sd, label=subjects, color=gender)) + geom_text() 
p <- p + xlab("variation between proteins")+ ylab("variation within proteins")#+ggtitle("subject standard deviations")
p <- p + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),axis.line = element_line(colour = "black"))
p
dev.off()


dev.off()


pdf(file="subject.intra.visit.weight.loss.gain.pdf",7,7)
ggplot(subject.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraprotein.sd, label=subjects, color=gender_weight_loss)) + geom_text() + xlab("protein variation for one visit (mean visit SD)")+ ylab("variation for one protein in four visits (mean of total protein SD)")#+ggtitle("subject standard deviations")
dev.off()

subject.intra.inter.sd.all.visits.df<-as.data.frame(subject.intra.inter.sd.all.visits)
subject.intra.inter.sd.all.visits.df$subject<-olink.subjects
subject.intra.inter.sd.all.visits.df$gender<-sex.char

subject.intra.inter.sd.all.visits.df.melt<-melt(subject.intra.inter.sd.all.visits.df, c("subject","mean.intraprotein.sd","gender"))
names(subject.intra.inter.sd.all.visits.df.melt)[4:5]<-c("visit","visit.SD")
subject.intra.inter.sd.all.visits.df.melt$visit<-substr(subject.intra.inter.sd.all.visits.df.melt$visit, 10,11)

pdf(file="subject.intra.visit.subject.multi.pdf",w=15,h=7)
g1<-ggplot(subject.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraprotein.sd, label=subjects, color=gender)) + geom_text() + xlab("protein variation for one visit (mean visit SD)")+ ylab("variation for one protein in four visits (mean of all protein SD)")#+ggtitle("subject standard deviations")
g2<-ggplot(subject.intra.inter.sd.all.visits.df.melt, aes(x=visit.SD, y=mean.intraprotein.sd, label=subject, color=visit)) + geom_text() + xlab("protein variation for one visit (visit SD)")+ ylab("variation for one protein in four visits (mean of all protein SD)")+  scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3"))
multiplot(g1, g2, cols=2)
dev.off()


g1<-ggplot(subject.intra.inter.sd.df, aes(x=mean.intravisit.sd, y=mean.intraindividual.sd)) + geom_point(data=subset(subject.intra.inter.sd.df, mean.intravisit.sd < 1 & mean.intraprotein.sd < 0.5),aes(mean.intravisit.sd,mean.intraindividual.sd)) + geom_text(data=subset(subject.intra.inter.sd.df, mean.intravisit.sd > 1 | mean.intraindividual.sd > 0.5),aes(mean.intravisit.sd,mean.intraindividual.sd,label=subject)) + xlab("individual variation for one visit (mean)")+ ylab("variation for individuals in four visits (mean)")#+ggtitle("subject standard deviations")
g2<-ggplot(subject.intra.inter.sd.all.visits.df.melt, aes(x=visit.SD, y=mean.intraindividual.sd, color=visit)) + geom_point() + xlab("individual variation for one visit")+ ylab("variation for individuals in four visits (mean)") +  scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3")) #+ geom_point(data=you.df,color=c("#e41a1c","#377eb8","#4daf4a","#984ea3"), size=3)#+ggtitle("subject standard deviations")+
g3<-ggplot(subject.intra.inter.sd.all.visits.df.melt, aes(x=visit.SD, y=mean.intraindividual.sd, color=visit)) + geom_point(data=subset(subject.intra.inter.sd.all.visits.df.melt, visit.SD <= 1 & mean.intraindividual.sd <= 0.75),aes(visit.SD,mean.intraindividual.sd,label=subject)) + geom_text(data=subset(subject.intra.inter.sd.all.visits.df.melt, visit.SD > 1 | mean.intraindividual.sd > 0.75),aes(visit.SD,mean.intraindividual.sd,label=subject)) + xlab("individual variation for one visit")+ ylab("variation for individuals in four visits (mean)") +  scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3")) #+ geom_point(data=you.df,color=c("#e41a1c","#377eb8","#4daf4a","#984ea3"), size=3)#+ggtitle("subject standard deviations")+
multiplot(g1, g2, g3, cols=3)
dev.off()



#Ta även fram SD för varje besök och protein
sd.visit1<-apply(olink.visit1.tot[,-1], 2, sd, na.rm=T)
sd.visit2<-apply(olink.visit2.tot[,-1], 2, sd, na.rm=T)
sd.visit3<-apply(olink.visit3.tot[,-1], 2, sd, na.rm=T)
sd.visit4<-apply(olink.visit4.tot[,-1], 2, sd, na.rm=T)

sd.prot.mat<-cbind(sd.visit1,sd.visit2,sd.visit3,sd.visit4)
sd.prot.mat.mean<-apply(sd.prot.mat, 1, mean, na.rm=T)
sd.cor.intra.inter.df<-data.frame(protein=names(prot.sd.mean), mean.correlation=cor.mat.mean, mean.intra.sd=prot.sd.mean, mean.inter.sd=sd.prot.mat.mean, cols=sd.cor.colors)

pdf(file="inter.sd.vs.correlation.pdf",w=17,h=7)
g1<-ggplot(sd.cor.intra.inter.df, aes(x=mean.correlation, y=mean.inter.sd, color=cols)) + geom_hline(yintercept=0.5) + xlab("mean visit-to-visit correlation")+ ylab("mean intervisit SD")+ geom_point(data=subset(sd.cor.intra.inter.df,  mean.inter.sd < 0.5),aes(x=mean.correlation, y=mean.inter.sd)) + geom_text(data=subset(sd.cor.intra.inter.df,  mean.inter.sd >= 0.5),aes(x=mean.correlation, y=mean.inter.sd,label=protein))
g2<-ggplot(sd.cor.intra.inter.df, aes(x=mean.correlation, y=mean.inter.sd, color=cols)) +geom_point() + xlab("mean visit-to-visit correlation")+ ylab("mean intervisit SD")#+ggtitle("Protein standard deviations")#+ geom_point(data=subset(sd.cor.df, mean.correlation > 0.3 & mean.sd < 0.4),aes(x=mean.correlation, y=mean.sd)) + geom_text(data=subset(sd.cor.df, mean.correlation <= 0.3 |  mean.sd >= 0.4),aes(x=mean.correlation, y=mean.sd,label=protein)) + xlab("mean visit-to-visit correlation")+ ylab("mean intravisit SD")#+ggtitle("Protein standard deviations")
#g2<-ggplot(sd.cor.intra.inter.df, aes(x=mean.correlation, y=mean.inter.sd)) +geom_point() + xlab("mean visit-to-visit correlation")+ ylab("mean intervisit SD")#+ggtitle("Protein standard deviations")#+ geom_point(data=subset(sd.cor.df, mean.correlation > 0.3 & mean.sd < 0.4),aes(x=mean.correlation, y=mean.sd)) + geom_text(data=subset(sd.cor.df, mean.correlation <= 0.3 |  mean.sd >= 0.4),aes(x=mean.correlation, y=mean.sd,label=protein)) + xlab("mean visit-to-visit correlation")+ ylab("mean intravisit SD")#+ggtitle("Protein standard deviations")
multiplot(g1, g2, cols=2)
dev.off()


### GÖr selected heatmaps 

protein.vec<-olink.proteins
name<-"all.proteins.752"
type<-"All proteins.752"

selected.proteins.heatmaps<-function(protein.vec, name,type) {
  protein.pos<-which(names(olink.visit1.tot) %in% protein.vec)
  num<-length(protein.vec)
  olink.proteins.visits.vec<-c(paste0(names(olink.visit1.tot)[protein.pos], "_1"),paste0(names(olink.visit1.tot)[protein.pos], "_2"),paste0(names(olink.visit1.tot)[protein.pos], "_3"),paste0(names(olink.visit1.tot)[protein.pos], "_4"))
  low.cor.protein.times.4.mat<-as.matrix(cbind(olink.visit1.tot[,protein.pos],olink.visit2.tot[,protein.pos],olink.visit3.tot[,protein.pos],olink.visit4.tot[,protein.pos])) 
  colnames(low.cor.protein.times.4.mat)<-olink.proteins.visits.vec
  mode(low.cor.protein.times.4.mat)<-"numeric"
  low.cor.protein.mat.times.4.cor.prot<-cor(low.cor.protein.times.4.mat, method="spearman", use="pairwise.complete.obs")
  na.pos<-which(apply(low.cor.protein.mat.times.4.cor.prot, 2, function(x) length(which(is.na(x))))>0)
  low.correlation.visit.cols<-c(rep("#e41a1c", length(protein.pos)), rep("#377eb8", length(protein.pos)) ,rep("#4daf4a", length(protein.pos)), rep("#984ea3", length(protein.pos)))
  panels.colors<-rep(panel.seq.cols[protein.pos],4)
  if(length(na.pos)>0) {
    low.cor.protein.mat.times.4.cor.prot<-low.cor.protein.mat.times.4.cor.prot[-na.pos,-na.pos]
    low.correlation.visit.cols<-low.correlation.visit.cols[-na.pos]
    panels.cols<-panels.cols[-na.pos]
  }
  low.cor.protein.mat.times.4.cor.subj<-cor(t(low.cor.protein.times.4.mat), method="spearman", use="pairwise.complete.obs")
  colnames(low.cor.protein.mat.times.4.cor.subj)<-olink.subjects
  rownames(low.cor.protein.mat.times.4.cor.subj)<-olink.subjects
  
  d <- 1 - low.cor.protein.mat.times.4.cor.subj
  hcl.person <- hclust(as.dist(d), "average") 
  d.prot <- 1 - low.cor.protein.mat.times.4.cor.prot
  
  hcl.prot <- hclust(as.dist(d.prot), "average") 
  
  pdf(file=paste0(name,".selected.dendrogram.proteins.in.four.visits.pdf"),w=500,h=10)
  plot(hcl.prot, hang=-1, cex=0.8)
  dev.off()
  
  pdf(file=paste0(name,".selected.colored.dendrogram.proteins.in.four.visits.pdf"),w=300,h=10)
  plotColoredClusters(hcl.prot, hcl.prot$labels, col=low.correlation.visit.cols, cex=1,xlab="")
  dev.off()
  
  pdf(file=paste0(name,".selected.heatmap.proteins.in.four.visits.pdf"),w=10,h=10)
  my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
  heatmap.2(low.cor.protein.mat.times.4.cor.prot, Rowv=as.dendrogram(hcl.prot), Colv=rev(as.dendrogram(hcl.prot)), main=paste0(type,", ",num, " proteins"),trace="none", na.col="gray" ,margins=c(7,7), cexCol=0.2, cexRow=0.2, col=my_palette, RowSideColors=low.correlation.visit.cols,ColSideColors=panels.colors)
  legend("topright",panel.names, fill=panel.seq.colors.11, bty="n", cex=0.7)
    dev.off()
  
  png(file=paste0(name,".selected.heatmap.proteins.in.four.visits.png"),w=10000,h=10000)
  my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
  heatmap.2(low.cor.protein.mat.times.4.cor.prot, Rowv=as.dendrogram(hcl.prot), Colv=rev(as.dendrogram(hcl.prot)), main=paste0(type,", ",num, " proteins"),trace="none", na.col="gray" ,margins=c(7,7), cexCol=0.3, cexRow=0.1, col=my_palette, RowSideColors=low.correlation.visit.cols)
  dev.off()
  
  pdf(file=paste0(name,".selected.heatmap.subjects.proteins.in.four.visits.pdf"),w=13,h=10)
  my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
  heatmap.2(low.cor.protein.times.4.mat, Rowv=as.dendrogram(hcl.person), Colv=as.dendrogram(hcl.prot), main=paste0(type,", ",num, " proteins"), labRow=olink.subjects, trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.3, cexRow=0.6, col=my_palette,ColSideColors=low.correlation.visit.cols,RowSideColors = olink.sex.col)
  dev.off()
  
  #Gör PCA
  na.pos<-which(apply(low.cor.protein.times.4.mat, 2, function(x) length(which(is.na(x))))>0)
  low.correlation.visit.cols<-c(rep("#e41a1c", length(protein.pos)), rep("#377eb8", length(protein.pos)) ,rep("#4daf4a", length(protein.pos)), rep("#984ea3", length(protein.pos)))
  low.correlation.visit.cols.no.na<-low.correlation.visit.cols[-na.pos]
  rownames(low.cor.protein.times.4.mat)<-olink.subjects
  pca<-prcomp(low.cor.protein.times.4.mat[,-na.pos],scale.=T)
  rot<-pca$r
  pdf(file=paste0(name,".selected.pca.in.four.visits.pdf"),w=10,h=10)
  layout(matrix(nrow=2, 1:4, byrow=T))
  plot(rot[,1:2], pch=19, main="Loadings",col=low.correlation.visit.cols.no.na)
  plot(rot[,1:2], pch="", main="Loadings")
  text(rot[,1:2], colnames(low.cor.protein.times.4.mat)[-na.pos], col=low.correlation.visit.cols.no.na, cex=0.7)
  scores<-pca$x
  plot(scores[,1:2], pch="", main="Scores")
  #plot(scores[,1:2], pch=19, main="Scores")
  text(scores[,1:2], rownames(low.cor.protein.times.4.mat), col=olink.sex.col)
  biplot(pca, main="Biplot", cex=0.7)
  #plot(pca)
  dev.off()
  
  r<-Rtsne(low.cor.protein.times.4.mat[,-na.pos], perplexity=10)
  r.prot<-Rtsne(t(low.cor.protein.times.4.mat[,-na.pos]), perplexity=10)
  
  pdf(file=paste0(name,".selected.tsne.in.four.visits.pdf"),w=10,h=6)
  layout(matrix(nrow=1, 1:2, byrow=T))
  plot(r.prot$Y[,1:2], pch=19,col=low.correlation.visit.cols.no.na,xlab="tSNE1",ylab="tSNE2")
  plot(r.prot$Y[,1:2], pch="",xlab="tSNE1",ylab="tSNE2")
  text(r.prot$Y[,1:2], colnames(low.cor.protein.times.4.mat)[-na.pos], col=low.correlation.visit.cols.no.na, cex=0.6)
  #plot(r$Y[,1:2], pch="",xlab="tSNE1",ylab="tSNE2")
  #text(r$Y[,1:2], rownames(low.cor.protein.times.4.mat), col=olink.sex.col, cex=0.6)
  dev.off()
}


low.cor.proteins.pos<-which(cor.mat.mean<0.5)+1
protein.cor.0.5<-names(cor.mat.mean)[which(cor.mat.mean<0.5)]
protein.cor.0.4<-names(cor.mat.mean)[which(cor.mat.mean<0.4)]
protein.cor.0.3<-names(cor.mat.mean)[which(cor.mat.mean<0.3)]

selected.proteins.heatmaps(protein.cor.0.5,"cor.below.0.5","Cor <0.5")
selected.proteins.heatmaps(protein.cor.0.4,"cor.below.0.4","Cor <0.4")
selected.proteins.heatmaps(protein.cor.0.3,"cor.below.0.3","Cor <0.3")
selected.proteins.heatmaps(olink.proteins,"all.proteins","All proteins")


#Ta fram vilka proteiner som klustrar inom samma visit
#osäkra som togs bort från filen pga att de klustrar "fel" i mindre grupp: PAI, ADA, PECAM1.1, JAM.A, ARHGAP1,WASF1
prot.clustered.visit<-read.table("wellness_clustered_by_visit.txt")
prot.clustered.visit<-as.vector(prot.clustered.visit[,1])
prot.clustered.name <- as.vector(sapply(prot.clustered.visit, function(x) strsplit(x, "_")[[1]][1]))
prot.clustered.vis <- as.numeric(sapply(prot.clustered.visit, function(x) strsplit(x, "_")[[1]][2]))
prot.clustered.names.multi<-names(table(prot.clustered.name)[which(table(prot.clustered.name)>3)])

selected.proteins.heatmaps(prot.clustered.names.multi,"prot.clustered.visit","Proteins clustered by visit")

prot.clustered.visit.ext<-read.table("../wellness_clustered_by_visit_extended_3.txt")
prot.clustered.ext.visit<-as.vector(prot.clustered.visit.ext[,1])
prot.clustered.ext.name <- as.vector(sapply(prot.clustered.ext.visit, function(x) strsplit(x, "_")[[1]][1]))
prot.clustered.ext.vis <- as.numeric(sapply(prot.clustered.ext.visit, function(x) strsplit(x, "_")[[1]][2]))
prot.clustered.ext.names.multi<-names(table(prot.clustered.ext.name)[which(table(prot.clustered.ext.name)>1)])

#Ta bort proteiner som klustrar med sig själv #gränsfall för SPARC
remove<-c("PAI","TDRKH","ST1A1")
prot.clustered.ext.names.multi<-prot.clustered.ext.names.multi[-which(prot.clustered.ext.names.multi %in% remove)]
remove<-c("XCL1","MVK","STX8")
prot.clustered.ext.names.multi<-prot.clustered.ext.names.multi[-which(prot.clustered.ext.names.multi %in% remove)]

selected.proteins.heatmaps(prot.clustered.ext.names.multi,"prot.clustered.visit.extended","Proteins clustered by visit")


#hämta uniprot för dessa proteiner
prot.clustered.names.multi.uni<-matrix(nrow=length(prot.clustered.ext.names.multi.add), ncol=7)
colnames(prot.clustered.names.multi.uni)<-c("Olink name","Olink uniprot","ensg_id","hgnc_gene","all_uniprot","description","ncbi_gene_summary")
for(j in 1:length(prot.clustered.ext.names.multi.add)) {
  prot<-prot.clustered.ext.names.multi.add[j]
  pos<-match(prot, proseek.uniprot.names)
  uni<-proseek.uniprot.tot[pos]
  vec<-c(prot, uni, "","","","","")
  #Hämta även ensg och HGNC för dessa
  pos<-grep(uni, ensg.info$uniprot_id)
  if(length(pos)>0) {
    row<-ensg.info[pos,]
    vec[3:7]<-as.vector(unlist(row[c(1,2,5,6,7)]))
  }
  prot.clustered.names.multi.uni[j,]<-vec
  
}
write.xls(prot.clustered.names.multi.uni, file="170503 proteins.highly.correlated.by.visit.uniprot.xls")


###############################
########### TA FRAM EN MASSA OLIKA INFO FÖR EN PERSON INKL DE SOM VARIERAR MEST OCH MER OM DESSA PROTEINER
###############################

plot.person.varying.info<-function(subj) {
  subj<-3834
  subj<-3920
  #Ta fram de proteiner som varierar mest
  sd.vec<-sort(person.sd.mat[match(subj, rownames(person.sd.mat)),],decreasing=T)
  sd.vec<-rev(sd.vec[1:30])
  proseek.vec1<-filter(olink.visit1.tot, subject_id==subj)
  proseek.vec2<-filter(olink.visit2.tot, subject_id==subj)
  proseek.vec3<-filter(olink.visit3.tot, subject_id==subj)
  proseek.vec4<-filter(olink.visit4.tot, subject_id==subj)
 
  person.proseek.mat<-matrix(nrow=0, ncol=6)
  colnames(person.proseek.mat)<-c("protein","SD","visit 1", "visit 2", "visit 3", "visit 4")
  for(k in 1:length(sd.vec)) {
    prot<-names(sd.vec)[k]
    sd<-sd.vec[k]
    person.proseek.mat<-rbind(person.proseek.mat, c(prot, sd, proseek.vec1[prot],proseek.vec2[prot],proseek.vec3[prot],proseek.vec4[prot]))
  }
  person.proseek.df<-as.data.frame(person.proseek.mat)
  person.proseek.df$protein<-as.factor(unlist(person.proseek.df$protein))
  person.proseek.df$SD<-as.numeric(unlist(person.proseek.df$SD))
  person.proseek.df$visit1<-as.numeric(unlist(person.proseek.df$`visit 1`))
  person.proseek.df$visit2<-as.numeric(unlist(person.proseek.df$`visit 2`))
  person.proseek.df$visit3<-as.numeric(unlist(person.proseek.df$`visit 3`))
  person.proseek.df$visit4<-as.numeric(unlist(person.proseek.df$`visit 4`))
  person.proseek.df<-select(person.proseek.df, SD, protein, visit1, visit2, visit3, visit4)
  person.proseek.df.melt<-melt(person.proseek.df, id.vars=c("protein","SD"))
  names(person.proseek.df.melt)<-c("protein","SD","visit","NPX")
  person.proseek.df.melt$protein <- reorder(person.proseek.df.melt$protein, -person.proseek.df.melt$SD)

  layout(matrix(nrow=3,1:3))  
  #Plotta de 30 mest varierande proteinerna i en lineplot
  q1<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") + xlab("") + scale_shape_manual(values=rep(c(15:17,0:2), 5)[1:nlevels(person.proseek.df.melt$protein)])
  plot(q)
  
  q2<-ggplot(person.proseek.df.melt,aes(x=protein, y=NPX, color=visit)) + geom_point(size=2)  +ggtitle(subj)+ylab("log NPX") + xlab("") + scale_color_manual(values=visit.col)+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
  plot(q2)
 
  visit.col<-c("#e41a1c","#377eb8","#4daf4a","#984ea3")
 
  #Hämta info om proteiner
  varying.prot<-as.vector(person.proseek.df$protein)
  varying.pos<-which(olink.proteins %in% varying.prot)
  #olink.proteins[varying.pos]
  varying.olink.go.info<-olink.go.uniprot.reduced.mat[varying.pos,]
  varying.gene.info<-uniprot.olink.selected[varying.pos,]
 
 prot.table<-cbind( varying.gene.info[,c("olink_name","gene_description")],varying.olink.go.info$Reactome.Pathway,varying.olink.go.info$Protein.class)
 colnames(prot.table)<-c( "olink_name","gene_description","Reactome_pathway","protein_class")
 prot.table.df<-as.data.frame(prot.table)
 write.xls(cbind(varying.olink.go.info,varying.gene.info), file=paste0(subj,".30.most.varying.info.xls"))
 reactome.vec<-as.vector(unlist(prot.table.df$Reactome_pathway))
 reactome.vec.long<-vector()
 for(j in 1:length(reactome.vec)) {
   term<-reactome.vec[j]
   if(term!="") {
     if(length(grep(";", term))>0) {
       term.vec<-unlist(strsplit(term, "; "))
       for(k in 1:length(term.vec)) {
         reactome.vec.long<-c(reactome.vec.long,term.vec[k])
       }
     } else {
       reactome.vec.long<-c(reactome.vec.long,term)
     }
   }
 }
 reactome.table<-cbind(names(table(reactome.vec.long)),as.numeric(table(reactome.vec.long)))
 reactome.table<-reactome.table[order(as.numeric(reactome.table[,2]), decreasing = T),]
 colnames(reactome.table)<-c("Reactome.pathway","# proteins")
 
 plot.new()
 grid.table(reactome.table)
 
  #Hämta info om personen
  person.info.table<-select(filter(enkat.dat, subject_id==subj), visit, health_change_details, sjukdom_ny, sjalvupplevd_halsa, stress_livshandelser,mediciner_paborjats_detaljer, mediciner_avslutats_detaljer, antibiotic_details)
 names(person.info.table)<-c("visit","health_change","sjukdom","sjalvupplevd_halsa","stress_livshandelser","nya_mediciner","mediciner_avslut","antibiotics")
 person.info.table.filtered<-Filter(function(x) !(all(x=="")), person.info.table)
   plot.new()
  grid.table(person.info.table.filtered)
#  person.info.table.filtered[,2] <- sapply(strwrap(person.info.table.filtered[,2], width = 30, simplify = FALSE), paste, collapse = "\n")
  
  splitString <- function(text) {
    strings <- strsplit(text, " ")[[1]]
    newstring <- strings[1]
    linewidth <- stringWidth(newstring)
    gapwidth <- stringWidth(" ")
    availwidth <-
      convertWidth(unit(1, "npc"),
                   "inches", valueOnly=TRUE)
    for (i in 2:length(strings)) {
      width <- stringWidth(strings[i])
      if (convertWidth(linewidth + gapwidth + width,
                       "inches", valueOnly=TRUE) <
          availwidth) {
        sep <- " "
        linewidth <- linewidth + gapwidth + width
      } else {
        sep <- "\n"
        linewidth <- width
      }
      newstring <- paste(newstring, strings[i], sep=sep)
    }
    newstring
  }
  splitString(as.character(unlist(person.info.table.filtered[,2])))
  splitString(person.info.table.filtered[3,2])
  
  
  tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))
  tbl <- tableGrob(person.info.table.filtered, rows=NULL, theme=tt)#,gpar.coretext =gpar(fontsize=8), gpar.coltext=gpar(fontsize=5, fontface='bold'), gpar.rowtext=gpar(fontsize=5, fontface='bold'))
  
  pdf(file="3920.person.table.example.pdf",h=12,w=10)
  pdf(file="3920.2.person.table.example.pdf",h=12,w=10)
  #pdf(file="3834.person.table.example.pdf",h=12,w=10)
  grid.arrange(q1, q2,tbl, nrow=3,as.table=TRUE,heights=c(3,1,1))
  plot.new()
  mytheme <- gridExtra::ttheme_default(
    core = list(fg_params=list(cex = 2.0)),
    colhead = list(fg_params=list(cex = 1.0)),
    rowhead = list(fg_params=list(cex = 1.0)))
  
  prot.tab <- gridExtra::tableGrob(prot.table, theme = mytheme)
  #grid.draw(myt)
  
  grid.table(prot.tab)
  
  dev.off()
 
  g1 <- g2 <- tableGrob(prot.table.df, rows=NULL)
  g2$widths <- unit(rep(1/ncol(g2), ncol(g2)), "npc")
  grid.newpage()
  gt = arrangeGrob(textGrob("page 1"), textGrob("page 2"), 
                   rectGrob(gp=gpar(fill="grey98")), 
                   rectGrob(gp=gpar(fill="grey98")), 
                   nullGrob(),  
                   layout_matrix=rbind(c(1,5,2), c(3,5,4)),
                   widths = unit(c(1,5,1),c("null", "cm", "null")), 
                   heights = unit(c(1, 1),c("line", "null")),
                   vp = viewport(width=0.9, height=0.9))
  tc = list(g1, g2)
  gt <- gtable::gtable_add_grob(gt, tc, l=c(1,3), t=2, 
                                name="newgrobs")
  
  grid.draw(gt)
  
   g3 <- tableGrob(prot.table, theme = ttheme_default(7),
                  rows=NULL, cols=gsub("\\.", "\\\n",names(prot.table.df)))
  g3$widths <- unit(rep(1/ncol(g2), ncol(g2)), "npc")
  grid.newpage()
  
  gt = arrangeGrob(textGrob("page 1"), textGrob("page 2"), 
                   rectGrob(gp=gpar(fill="grey98")), 
                   rectGrob(gp=gpar(fill="grey98")), 
                   nullGrob(),  
                   layout_matrix=rbind(c(1,5,2), c(3,5,4)),
                   widths = unit(c(1,1,1),c("null", "line", "null")), 
                   heights = unit(c(1, 1),c("line", "null")),
                   vp = viewport(width=0.9, height=0.9))
  tc = list(g2, g3)
 # tc = list(g3)
  gt <- gtable::gtable_add_grob(gt, tc, l=c(1,3), t=2, 
                                name="newgrobs")
  
  grid.draw(gt)
  
  d = sapply(lapply(prot.table.df$gene_description, strwrap, width=50), paste, collapse="\n")
  grid.table(d)
  
  
  person.info.table.2<-select(filter(weight.data, subject_id==subj), contains("health_change_details"))
  
  print.data.frame(select(wellness.data, subject_id, contains("health_change_details"))[32,])
  print.data.frame(select(wellness.data, subject_id, contains("health_change_details"))[43,])
  
}







##### Klustra person 4032 mot 3838 för att se vilket prov som är fel

olink.mat.4032<-rbind(filter(olink.visit1.tot, subject_id==4032),filter(olink.visit2.tot, subject_id==4032),filter(olink.visit3.tot, subject_id==4032),filter(olink.visit4.tot, subject_id==4032))
olink.mat.3339<-rbind(filter(olink.visit1.tot, subject_id==3339),filter(olink.visit2.tot, subject_id==3339),filter(olink.visit3.tot, subject_id==3339),filter(olink.visit4.tot, subject_id==3339))
olink.mat.4032.3339<-rbind(olink.mat.4032,olink.mat.3339)

olink.mat.4032.3339.cor<-cor(t(olink.mat.4032.3339[,-1]), method="spearman", use="pairwise.complete.obs")
rownames(olink.mat.4032.3339.cor)<-paste0(olink.mat.4032.3339$subject_id, c("_1","_2","_3","_4"))
colnames(olink.mat.4032.3339.cor)<-paste0(olink.mat.4032.3339$subject_id, c("_1","_2","_3","_4"))

d <- 1 - olink.mat.4032.3339.cor
hcl.person <- hclust(as.dist(d), "average") 

pdf(file="dendrogram.4032.3339.pdf",w=10,h=10)
plot(hcl.person, hang=-1, cex=1)
dev.off()

pdf(file="heatmap.4032.3339.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(olink.mat.4032.3339.cor, Rowv=as.dendrogram(hcl.person), Colv=rev(as.dendrogram(hcl.person)),trace="none", na.col="gray", col=my_palette,margins=c(7,7))
dev.off()

#Ta enbart de mest stabila proteiner med högst correlation
high.cor<-names(sort(cor.mat.mean, decreasing=T)[1:30])
olink.mat.4032.3339.high.cor<-olink.mat.4032.3339[,which(names(olink.mat.4032.3339) %in% high.cor)]
olink.mat.4032.3339.cor.high<-cor(t(olink.mat.4032.3339.high.cor[,-1]), method="spearman", use="pairwise.complete.obs")
rownames(olink.mat.4032.3339.cor.high)<-paste0(olink.mat.4032.3339$subject_id, c("_1","_2","_3","_4"))
colnames(olink.mat.4032.3339.cor.high)<-paste0(olink.mat.4032.3339$subject_id, c("_1","_2","_3","_4"))
d <- 1 - olink.mat.4032.3339.cor.high
hcl.person.high <- hclust(as.dist(d), "average") 

pdf(file="heatmap.4032.3339.high.cor.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(olink.mat.4032.3339.cor.high, Rowv=as.dendrogram(hcl.person.high), Colv=rev(as.dendrogram(hcl.person.high)),trace="none", na.col="gray", col=my_palette,margins=c(7,7))
dev.off()

###Fokusera på 3920 och se om det finns gemensamma nämnare med 3512

pdf(file="top.30.variance.proteins.for.3920.3512.pdf", w=13, h=5)
subj<-3920
sd.vec<-person.sd.mat[match(subj, rownames(person.sd.mat)),]
sd.vec<-sort(sd.vec[which(sd.vec>0.5)], decr=TRUE)
high.sd.3920<-names(sd.vec)
sd.vec.3512<-person.sd.mat[match(3512, rownames(person.sd.mat)),]
high.sd.3512<-names(sort(sd.vec.3512[which(sd.vec.3512>0.5)], decr=TRUE))
high.sd.3512.30<-names(sort(sd.vec.3512[which(sd.vec.3512>0.5)], decr=TRUE))[1:30]
intersect(high.sd.3920, high.sd.3512)
intersect(high.sd.3920, high.sd.3512.30)
length(intersect(high.sd.3920, high.sd.3512))
length(intersect(high.sd.3920, high.sd.3512.30))

if(length(sd.vec)>30) {
  sd.vec<-sd.vec[1:30]
}
proseek.vec1<-filter(olink.visit1.tot, subject_id==subj)
proseek.vec2<-filter(olink.visit2.tot, subject_id==subj)
proseek.vec3<-filter(olink.visit3.tot, subject_id==subj)
proseek.vec4<-filter(olink.visit4.tot, subject_id==subj)
# prot.vec<-names(sd.vec)
# filter(select_(olink.visit1.tot, .dots = prot.vec), subject_id==subj)
person.proseek.mat<-matrix(nrow=0, ncol=6)
colnames(person.proseek.mat)<-c("protein","SD","visit 1", "visit 2", "visit 3", "visit 4")
for(k in 1:length(sd.vec)) {
  prot<-names(sd.vec)[k]
  sd<-sd.vec[k]
  person.proseek.mat<-rbind(person.proseek.mat, c(prot, sd, proseek.vec1[prot],proseek.vec2[prot],proseek.vec3[prot],proseek.vec4[prot]))
}
person.proseek.df<-as.data.frame(person.proseek.mat)
person.proseek.df$protein<-as.factor(unlist(person.proseek.df$protein))
person.proseek.df$SD<-as.numeric(unlist(person.proseek.df$SD))
person.proseek.df$visit1<-as.numeric(unlist(person.proseek.df$`visit 1`))
person.proseek.df$visit2<-as.numeric(unlist(person.proseek.df$`visit 2`))
person.proseek.df$visit3<-as.numeric(unlist(person.proseek.df$`visit 3`))
person.proseek.df$visit4<-as.numeric(unlist(person.proseek.df$`visit 4`))
person.proseek.df<-select(person.proseek.df, SD, protein, visit1, visit2, visit3, visit4)
person.proseek.df.melt<-melt(person.proseek.df, id.vars=c("protein","SD"))
names(person.proseek.df.melt)<-c("protein","SD","visit","NPX")
person.proseek.df.melt$protein <- reorder(person.proseek.df.melt$protein, -person.proseek.df.melt$SD)

#q<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") +  scale_shape_manual(values=(1:nlevels(person.proseek.df.melt$protein))%%5) 
q1<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") + xlab("") + scale_shape_manual(values=rep(c(15:17,0:2), 5)[1:nlevels(person.proseek.df.melt$protein)])
#plot(q1)
  
subj<-3512
proseek.vec1<-filter(olink.visit1.tot, subject_id==subj)
proseek.vec2<-filter(olink.visit2.tot, subject_id==subj)
proseek.vec3<-filter(olink.visit3.tot, subject_id==subj)
proseek.vec4<-filter(olink.visit4.tot, subject_id==subj)
# prot.vec<-names(sd.vec)
# filter(select_(olink.visit1.tot, .dots = prot.vec), subject_id==subj)
person.proseek.mat<-matrix(nrow=0, ncol=6)
colnames(person.proseek.mat)<-c("protein","SD","visit 1", "visit 2", "visit 3", "visit 4")
for(k in 1:length(sd.vec)) {
  prot<-names(sd.vec)[k]
  sd<-sd.vec[k]
  person.proseek.mat<-rbind(person.proseek.mat, c(prot, sd, proseek.vec1[prot],proseek.vec2[prot],proseek.vec3[prot],proseek.vec4[prot]))
}
person.proseek.df<-as.data.frame(person.proseek.mat)
person.proseek.df$protein<-as.factor(unlist(person.proseek.df$protein))
person.proseek.df$SD<-as.numeric(unlist(person.proseek.df$SD))
person.proseek.df$visit1<-as.numeric(unlist(person.proseek.df$`visit 1`))
person.proseek.df$visit2<-as.numeric(unlist(person.proseek.df$`visit 2`))
person.proseek.df$visit3<-as.numeric(unlist(person.proseek.df$`visit 3`))
person.proseek.df$visit4<-as.numeric(unlist(person.proseek.df$`visit 4`))
person.proseek.df<-select(person.proseek.df, SD, protein, visit1, visit2, visit3, visit4)
person.proseek.df.melt<-melt(person.proseek.df, id.vars=c("protein","SD"))
names(person.proseek.df.melt)<-c("protein","SD","visit","NPX")
person.proseek.df.melt$protein <- reorder(person.proseek.df.melt$protein, -person.proseek.df.melt$SD)

#q<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") +  scale_shape_manual(values=(1:nlevels(person.proseek.df.melt$protein))%%5) 
q2<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") + xlab("") + scale_shape_manual(values=rep(c(15:17,0:2), 5)[1:nlevels(person.proseek.df.melt$protein)])
#plot(q2)

multiplot(q1, q2, cols=2)
dev.off()

#Kolla om det finns fler med förkylning
health.data<-select(wellness.data, subject_id, contains("health_change_details"))
print.data.frame(health.data)
select(wellness.data, subject_id, contains("health_change"))[32,]
print.data.frame(select(wellness.data, subject_id, contains("health_change"))[32,])

cold.subjects<-vector()
cold.subjects.visit<-vector()
for(j in 1:4) {
  vec<-unlist(health.data[,(j+1)])
  pos<-grep("Förkyl", vec)
  pos<-c(pos, grep("förkyl", vec))
  pos<-c(pos, grep("forkyl", vec))
  subs<-health.data$subject_id[pos]
  cold.subjects<-c(cold.subjects, subs)
  cold.subjects.visit<-c(cold.subjects.visit, rep(j, length(subs)))
 # pos<-c(pos, grep("forkyl", health.data[,(j+1)]))
  for(k in 1:length(pos)){
    print(paste("visit ",j,pos, subs[k], vec[pos[k]]))
  }
}

virus.subjects<-vector()
virus.subjects.visit<-vector()
for(j in 1:4) {
  vec<-unlist(health.data[,(j+1)])
  pos<-grep("Virus", vec)
  pos<-c(pos, grep("virus", vec))
#  pos<-c(pos, grep("sjuk", vec))
  subs<-health.data$subject_id[pos]
  virus.subjects<-c(virus.subjects, subs)
  virus.subjects.visit<-c(virus.subjects.visit, rep(j, length(subs)))
  # pos<-c(pos, grep("forkyl", health.data[,(j+1)]))
  for(k in 1:length(pos)){
    print(paste("visit ",j,pos, subs[k], vec[pos[k]]))
  }
}


grep("Förkyld",health.data$visit1_other_health_change_details)
grep("förkyld",health.data$visit1_other_health_change_details)

forkyld.compare.with.3920<-function(cold.sub) {
  subj<-3920
  sd.vec<-person.sd.mat[match(subj, rownames(person.sd.mat)),]
  sd.vec<-sort(sd.vec[which(sd.vec>0.5)], decr=TRUE)
  high.sd.3920<-names(sd.vec)

  #Välj de proteiner som ökar i visit 2
   
  sd.vec.cold<-person.sd.mat[match(cold.sub, rownames(person.sd.mat)),]
  high.sd.cold<-names(sort(sd.vec.cold[which(sd.vec.cold>0.5)], decr=TRUE))
  high.sd.cold.30<-names(sort(sd.vec.cold[which(sd.vec.cold>0.5)], decr=TRUE))[1:30]
  intersect(high.sd.3920, high.sd.cold)
  intersect(high.sd.3920, high.sd.cold.30)
  length(intersect(high.sd.3920, high.sd.cold))
  length(intersect(high.sd.3920, high.sd.cold.30))
  
  if(length(sd.vec)>30) {
    sd.vec<-sd.vec[1:30]
  }
  proseek.vec1<-filter(olink.visit1.tot, subject_id==subj)
  proseek.vec2<-filter(olink.visit2.tot, subject_id==subj)
  proseek.vec3<-filter(olink.visit3.tot, subject_id==subj)
  proseek.vec4<-filter(olink.visit4.tot, subject_id==subj)
  # prot.vec<-names(sd.vec)
  # filter(select_(olink.visit1.tot, .dots = prot.vec), subject_id==subj)
  person.proseek.mat<-matrix(nrow=0, ncol=6)
  colnames(person.proseek.mat)<-c("protein","SD","visit 1", "visit 2", "visit 3", "visit 4")
  for(k in 1:length(sd.vec)) {
    prot<-names(sd.vec)[k]
    sd<-sd.vec[k]
    person.proseek.mat<-rbind(person.proseek.mat, c(prot, sd, proseek.vec1[prot],proseek.vec2[prot],proseek.vec3[prot],proseek.vec4[prot]))
  }
  person.proseek.df<-as.data.frame(person.proseek.mat)
  person.proseek.df$protein<-as.factor(unlist(person.proseek.df$protein))
  person.proseek.df$SD<-as.numeric(unlist(person.proseek.df$SD))
  person.proseek.df$visit1<-as.numeric(unlist(person.proseek.df$`visit 1`))
  person.proseek.df$visit2<-as.numeric(unlist(person.proseek.df$`visit 2`))
  person.proseek.df$visit3<-as.numeric(unlist(person.proseek.df$`visit 3`))
  person.proseek.df$visit4<-as.numeric(unlist(person.proseek.df$`visit 4`))
  person.proseek.df<-select(person.proseek.df, SD, protein, visit1, visit2, visit3, visit4)
  person.proseek.df.melt<-melt(person.proseek.df, id.vars=c("protein","SD"))
  names(person.proseek.df.melt)<-c("protein","SD","visit","NPX")
  person.proseek.df.melt$protein <- reorder(person.proseek.df.melt$protein, -person.proseek.df.melt$SD)
  
  #q<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") +  scale_shape_manual(values=(1:nlevels(person.proseek.df.melt$protein))%%5) 
  q1<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") + xlab("") + scale_shape_manual(values=rep(c(15:17,0:2), 5)[1:nlevels(person.proseek.df.melt$protein)])
  #plot(q1)
  
  subj<-cold.sub
  proseek.vec1<-filter(olink.visit1.tot, subject_id==subj)
  proseek.vec2<-filter(olink.visit2.tot, subject_id==subj)
  proseek.vec3<-filter(olink.visit3.tot, subject_id==subj)
  proseek.vec4<-filter(olink.visit4.tot, subject_id==subj)
  # prot.vec<-names(sd.vec)
  # filter(select_(olink.visit1.tot, .dots = prot.vec), subject_id==subj)
  person.proseek.mat<-matrix(nrow=0, ncol=6)
  colnames(person.proseek.mat)<-c("protein","SD","visit 1", "visit 2", "visit 3", "visit 4")
  for(k in 1:length(sd.vec)) {
    prot<-names(sd.vec)[k]
    sd<-sd.vec[k]
    person.proseek.mat<-rbind(person.proseek.mat, c(prot, sd, proseek.vec1[prot],proseek.vec2[prot],proseek.vec3[prot],proseek.vec4[prot]))
  }
  person.proseek.df<-as.data.frame(person.proseek.mat)
  person.proseek.df$protein<-as.factor(unlist(person.proseek.df$protein))
  person.proseek.df$SD<-as.numeric(unlist(person.proseek.df$SD))
  person.proseek.df$visit1<-as.numeric(unlist(person.proseek.df$`visit 1`))
  person.proseek.df$visit2<-as.numeric(unlist(person.proseek.df$`visit 2`))
  person.proseek.df$visit3<-as.numeric(unlist(person.proseek.df$`visit 3`))
  person.proseek.df$visit4<-as.numeric(unlist(person.proseek.df$`visit 4`))
  person.proseek.df<-select(person.proseek.df, SD, protein, visit1, visit2, visit3, visit4)
  person.proseek.df.melt<-melt(person.proseek.df, id.vars=c("protein","SD"))
  names(person.proseek.df.melt)<-c("protein","SD","visit","NPX")
  person.proseek.df.melt$protein <- reorder(person.proseek.df.melt$protein, -person.proseek.df.melt$SD)
  
 # forkyld.subjects.visit.mat[grep(subj,forkyld.subjects.visit.mat$subject_id ),]
  title.string<-paste0(subj, "\n")
  if(length(grep(subj,forkyld.subjects.visit.mat$subject_id))>0) {
    vec<-forkyld.subjects.visit.mat[grep(subj,forkyld.subjects.visit.mat$subject_id ),3:6]
   for(j in 1:4) {
      if(vec[j]!="") {
        title.string<-paste0(title.string, "visit ", j, ": ",vec[j] ,"\n")
      }
    }
  }  
#  title.string<-paste(c("visit 1: ","visit 2: ","visit 3: ","visit 4: "),  forkyld.subjects.visit.mat[grep(subj,forkyld.subjects.visit.mat$subject_id ),3:6], collapse="\n"  )
 # title.string<-paste0(subj, "\n", title.string)
  #q<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") +  scale_shape_manual(values=(1:nlevels(person.proseek.df.melt$protein))%%5) 
  q2<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(title.string)+ylab("log NPX") + xlab("") + scale_shape_manual(values=rep(c(15:17,0:2), 5)[1:nlevels(person.proseek.df.melt$protein)])
  #plot(q2)
  
  #grid.arrange(q1, q2,ncol=2, top=textGrob("Förkylning", gp=gpar(fontsize=15,fontface="bold")))
  
  multiplot(q1, q2, cols=2)
}

pdf(file="top.30.variance.proteins.for.3920.and.cold.pdf", w=13, h=5)
for(j in 1:length(cold.subjects)) {
  if(cold.subjects[j]!=3920) {
    compare.with.3920(cold.subjects[j])
  }  
}
dev.off()

pdf(file="top.30.variance.proteins.for.3920.and.förkylning.pdf", w=13, h=5)
for(j in 1:length(forkyld.subjects.olink)) {
  if(forkyld.subjects.olink[j]!=3920) {
    forkyld.compare.with.3920(forkyld.subjects.olink[j])
  }  
}
dev.off()

pdf(file="top.30.variance.proteins.for.3920.and.förkylning.high.in.2.pdf", w=13, h=5)
for(j in 1:length(forkyld.subjects.olink)) {
  if(forkyld.subjects.olink[j]!=3920) {
    forkyld.compare.with.3920.high.in.visit.2(forkyld.subjects.olink[j])
  }  
}
dev.off()

forkyld.compare.with.3920.high.in.visit.2<-function(cold.sub) {
  subj<-3920
  sd.vec<-person.sd.mat[match(subj, rownames(person.sd.mat)),]
  sd.vec<-sort(sd.vec[which(sd.vec>0.5)], decr=TRUE)
  sd.high.names<-names(sd.vec)
   high.pos<-which(names(olink.visit1.tot) %in% sd.high.names )
  pos.3920<-grep(3920, olink.subjects)
  #Istället för högst SD, ta fram de med störst skillnad mot visit 2
  proseek.df<-data.frame(protein=names(olink.visit1.tot)[high.pos], visit1=unlist(olink.visit1.tot[pos.3920,high.pos]), visit2=unlist(olink.visit2.tot[pos.3920,high.pos]), visit3=unlist(olink.visit3.tot[pos.3920,high.pos]), visit4=unlist(olink.visit4.tot[pos.3920,high.pos]))
  proseek.df.diffs<-mutate(proseek.df, visit2_1 = visit2-visit1,visit2_3 = visit2-visit3,visit2_4 = visit2-visit4)
  proseek.df.diffs<-mutate(proseek.df.diffs, max_diffs=pmax(visit2_1,visit2_3,visit2_4))
  proseek.df.diffs<-arrange(proseek.df.diffs, desc(max_diffs))
 
  names.max.high<-as.vector(proseek.df.diffs$protein[1:30])
  max.diffs<-proseek.df.diffs$max_diffs[1:30]
  
  sd.vec.cold<-person.sd.mat[match(cold.sub, rownames(person.sd.mat)),]
  high.sd.cold<-names(sort(sd.vec.cold[which(sd.vec.cold>0.5)], decr=TRUE))
  high.sd.cold.30<-names(sort(sd.vec.cold[which(sd.vec.cold>0.5)], decr=TRUE))[1:30]
  intersect(high.sd.3920, high.sd.cold)
  intersect(high.sd.3920, high.sd.cold.30)
  length(intersect(high.sd.3920, high.sd.cold))
  length(intersect(high.sd.3920, high.sd.cold.30))
  

  person.proseek.df<-select(proseek.df.diffs,  protein,  visit1,visit2,visit3,visit4,max_diffs)[1:30,]
  person.proseek.df$protein<-as.factor(unlist(person.proseek.df$protein))
  person.proseek.df$max_diffs<-as.numeric(unlist(person.proseek.df$max_diffs))
  person.proseek.df.melt<-melt(person.proseek.df, id.vars=c("protein","max_diffs"))
  names(person.proseek.df.melt)<-c("protein","max_diffs","visit","NPX")
  person.proseek.df.melt$protein <- reorder(person.proseek.df.melt$protein, -person.proseek.df.melt$max_diffs)
  
  #q<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") +  scale_shape_manual(values=(1:nlevels(person.proseek.df.melt$protein))%%5) 
  q1<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") + xlab("") + scale_shape_manual(values=rep(c(15:17,0:2), 5)[1:nlevels(person.proseek.df.melt$protein)])
  #plot(q1)
  
  subj<-cold.sub
  proseek.vec1<-filter(olink.visit1.tot, subject_id==subj)
  proseek.vec2<-filter(olink.visit2.tot, subject_id==subj)
  proseek.vec3<-filter(olink.visit3.tot, subject_id==subj)
  proseek.vec4<-filter(olink.visit4.tot, subject_id==subj)
  # prot.vec<-names(sd.vec)
  # filter(select_(olink.visit1.tot, .dots = prot.vec), subject_id==subj)
  person.proseek.mat<-matrix(nrow=0, ncol=6)
  colnames(person.proseek.mat)<-c("protein","max_diff","visit 1", "visit 2", "visit 3", "visit 4")
  for(k in 1:length(names.max.high)) {
    prot<-names.max.high[k]
    max_diff<-max.diffs[k]
    person.proseek.mat<-rbind(person.proseek.mat, c(prot, max_diff, proseek.vec1[prot],proseek.vec2[prot],proseek.vec3[prot],proseek.vec4[prot]))
  }
  person.proseek.df<-as.data.frame(person.proseek.mat)
  person.proseek.df$protein<-as.factor(unlist(person.proseek.df$protein))
  person.proseek.df$max_diff<-as.numeric(unlist(person.proseek.df$max_diff))
  person.proseek.df$visit1<-as.numeric(unlist(person.proseek.df$`visit 1`))
  person.proseek.df$visit2<-as.numeric(unlist(person.proseek.df$`visit 2`))
  person.proseek.df$visit3<-as.numeric(unlist(person.proseek.df$`visit 3`))
  person.proseek.df$visit4<-as.numeric(unlist(person.proseek.df$`visit 4`))
  person.proseek.df<-select(person.proseek.df, max_diff, protein, visit1, visit2, visit3, visit4)
  person.proseek.df.melt<-melt(person.proseek.df, id.vars=c("protein","max_diff"))
  names(person.proseek.df.melt)<-c("protein","max_diff","visit","NPX")
  person.proseek.df.melt$protein <- reorder(person.proseek.df.melt$protein, -person.proseek.df.melt$max_diff)
  
  # forkyld.subjects.visit.mat[grep(subj,forkyld.subjects.visit.mat$subject_id ),]
  title.string<-paste0(subj, "\n")
  if(length(grep(subj,forkyld.subjects.visit.mat$subject_id))>0) {
    vec<-forkyld.subjects.visit.mat[grep(subj,forkyld.subjects.visit.mat$subject_id ),3:6]
    for(j in 1:4) {
      if(vec[j]!="") {
        title.string<-paste0(title.string, "visit ", j, ": ",vec[j] ,"\n")
      }
    }
  }  
  #  title.string<-paste(c("visit 1: ","visit 2: ","visit 3: ","visit 4: "),  forkyld.subjects.visit.mat[grep(subj,forkyld.subjects.visit.mat$subject_id ),3:6], collapse="\n"  )
  # title.string<-paste0(subj, "\n", title.string)
  #q<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(subj)+ylab("log NPX") +  scale_shape_manual(values=(1:nlevels(person.proseek.df.melt$protein))%%5) 
  q2<-ggplot(person.proseek.df.melt,aes(x=visit, y=NPX, color=protein, group=protein, shape=protein)) + geom_point(size=2) + geom_line() +ggtitle(title.string)+ylab("log NPX") + xlab("") + scale_shape_manual(values=rep(c(15:17,0:2), 5)[1:nlevels(person.proseek.df.melt$protein)])
  #plot(q2)
  
  #grid.arrange(q1, q2,ncol=2, top=textGrob("Förkylning", gp=gpar(fontsize=15,fontface="bold")))
  
  multiplot(q1, q2, cols=2)
 # multiplot(q2, q2, cols=2)
}



pdf(file="top.30.variance.proteins.for.3920.and.4295.pdf", w=13, h=5)
compare.with.3920(4295)
dev.off()

#Titta på förkylning baserat på enkätdata
forkyld.subjects<-sort(as.vector(forkyld.subjects))
olink.visit1.cold<-filter(olink.visit1.tot, subject_id %in% forkyld.subjects)
olink.visit2.cold<-filter(olink.visit2.tot, subject_id %in% forkyld.subjects)
olink.visit3.cold<-filter(olink.visit3.tot, subject_id %in% forkyld.subjects)
olink.visit4.cold<-filter(olink.visit4.tot, subject_id %in% forkyld.subjects)
forkyld.subjects.olink<-olink.visit1.cold$subject_id
#Gör heatmap baserat på 3920:s mest varierande proteiner

subj<-3920
sd.vec<-person.sd.mat[match(subj, rownames(person.sd.mat)),]
sd.vec<-sort(sd.vec[which(sd.vec>0.5)], decr=TRUE)
high.sd.3920<-names(sd.vec)
high.sd.3920.30<-names(sd.vec)[1:30]

forkyld.subjects.pos<-which(olink.subjects %in% forkyld.subjects.olink)
forkyld.col<-rep("grey", num.person)
forkyld.col[forkyld.subjects.pos]<-"red"
forkyld.col.1.4<-rep(forkyld.col,4)
forkyld.col.1.4.visits<-rep(forkyld.col,4)
names(forkyld.col.1.4.visits)<-rep(olink.subjects,4)

forkyld.subjects.visit.mat<-filter(enkat.dat.sjuk.wide, subject_id %in% forkyld.subjects.olink)
for(j in 1:length(forkyld.subjects.olink)) {
  subj<-forkyld.subjects.olink[j]
  row<-filter(forkyld.subjects.visit.mat, subject_id==subj)
  sjuk<-row[3:6]
  colors<-rep("black",4)
  for(k in 1:4) {
    if(sjuk[k]!="") {
      colors[k]<-visit.col[k]
    }
  }
  if(subj==3920) {
    colors[2]<-visit.col[2]
  }
  color.pos<-grep(subj, names(forkyld.col.1.4.visits))
  forkyld.col.1.4.visits[color.pos]<-colors
}  

forkyld.col.1.4.visits.all.person<-forkyld.col.1.4.visits
forkyld.col.1.4.visits.forkyld<-forkyld.col.1.4.visits[which(names(forkyld.col.1.4.visits) %in% forkyld.subjects.olink)]

varying.proteins.3920.pos<-which(names(olink.visit1.tot) %in% high.sd.3920[1:30]) #Välj om det ska vara top 30 eller alla 101
#varying.proteins.3920.pos<-which(names(olink.visit1.tot) %in% high.sd.3920)

varying.protein.3920.1.4.mat<-as.matrix(rbind(olink.visit1.tot[,varying.proteins.3920.pos], olink.visit2.tot[,varying.proteins.3920.pos], olink.visit3.tot[,varying.proteins.3920.pos], olink.visit4.tot[,varying.proteins.3920.pos])) 
mode(varying.protein.3920.1.4.mat)<-"numeric"
rownames(varying.protein.3920.1.4.mat)<-c(paste0(olink.subjects, "_1"),paste0(olink.subjects, "_2"),paste0(olink.subjects, "_3"),paste0(olink.subjects, "_4"))
varying.protein.3920.mat.cor.prot<-cor(varying.protein.3920.1.4.mat, method="spearman", use="pairwise.complete.obs")
varying.protein.3920.mat.cor.subj<-cor(t(varying.protein.3920.1.4.mat), method="spearman", use="pairwise.complete.obs")

varying.protein.3920.1.4.mat.forkyld<-as.matrix(rbind(olink.visit1.tot[forkyld.subjects.pos,varying.proteins.3920.pos], olink.visit2.tot[forkyld.subjects.pos,varying.proteins.3920.pos], olink.visit3.tot[forkyld.subjects.pos,varying.proteins.3920.pos], olink.visit4.tot[forkyld.subjects.pos,varying.proteins.3920.pos])) 
mode(varying.protein.3920.1.4.mat.forkyld)<-"numeric"
rownames(varying.protein.3920.1.4.mat.forkyld)<-c(paste0(olink.subjects[forkyld.subjects.pos], "_1"),paste0(olink.subjects[forkyld.subjects.pos], "_2"),paste0(olink.subjects[forkyld.subjects.pos], "_3"),paste0(olink.subjects[forkyld.subjects.pos], "_4"))
varying.protein.3920.mat.cor.prot.forkyld<-cor(varying.protein.3920.1.4.mat.forkyld, method="spearman", use="pairwise.complete.obs")
varying.protein.3920.mat.cor.subj.forkyld<-cor(t(varying.protein.3920.1.4.mat.forkyld), method="spearman", use="pairwise.complete.obs")

d <- 1 - varying.protein.3920.mat.cor.subj
hcl.person.3920 <- hclust(as.dist(d), "average") 
pdf(file="dendrogram.person.varying.3920.pdf",w=14, h=5)
plot(hcl.person.3920, hang=-1, cex=1)
dev.off()

d <- 1 - varying.protein.3920.mat.cor.subj.forkyld
hcl.person.3920.forkyld <- hclust(as.dist(d), "average") 
pdf(file="dendrogram.person.varying.3920.forkyld.pdf",w=14, h=5)
plot(hcl.person.3920.forkyld, hang=-1, cex=1)
dev.off()

d.prot <- 1 - varying.protein.3920.mat.cor.prot
hcl.prot.3920 <- hclust(as.dist(d.prot), "average") 
pdf(file="dendrogram.protein.varying.3920.pdf",w=30, h=5)
plot(hcl.prot, hang=-1, cex=0.5)
dev.off()

d.prot <- 1 - varying.protein.3920.mat.cor.prot.forkyld
hcl.prot.3920.forkyld <- hclust(as.dist(d.prot), "average") 
pdf(file="dendrogram.protein.varying.3920.forkyld.pdf",w=30, h=5)
plot(hcl.prot, hang=-1, cex=0.5)
dev.off()


#maPalette(high="mediumblue", mid="mediumturquoise",low="#EEEEFF") -> cols
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
library(RColorBrewer) 
mycol <- brewer.pal(5, "RdYlBu") ## if you only have 6 levels 
mycol<-brewer.pal(11,"RdBu")
my_palette <- brewer.pal(11,"RdBu")

pdf(file="varying.heatmap.subject.3920.pdf",w=10,h=10)
#my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(varying.protein.3920.mat.cor.subj, Rowv=as.dendrogram(hcl.person.3920), Colv=rev(as.dendrogram(hcl.person.3920)), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.4, cexRow=0.4, col=mycol, RowSideColors = rep(olink.sex.col,4), ColSideColors = forkyld.col.1.4.visits.all.person)
dev.off()

pdf(file="varying.heatmap.subject.3920.förkyld.pdf",w=10,h=10)
#my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(varying.protein.3920.mat.cor.subj.forkyld, Rowv=as.dendrogram(hcl.person.3920.forkyld), Colv=rev(as.dendrogram(hcl.person.3920.forkyld)), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.6, cexRow=0.6, col=mycol,ColSideColors = forkyld.col.1.4.visits.forkyld,RowSideColors = forkyld.col.1.4.visits.forkyld)
dev.off()

pdf(file="varying.heatmap.protein.3920.pdf",w=10,h=10)
#my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(varying.protein.3920.mat.cor.prot, Rowv=as.dendrogram(hcl.prot.3920), Colv=rev(as.dendrogram(hcl.prot.3920)), trace="none", na.col="gray" ,margins=c(7,7), cexCol=0.5, cexRow=0.5, col=my_palette)
dev.off()

pdf(file="varying.heatmap.protein.3920.förkyld.pdf",w=10,h=10)
#my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(varying.protein.3920.mat.cor.prot.forkyld, Rowv=as.dendrogram(hcl.prot.3920.forkyld), Colv=as.dendrogram(hcl.prot.3920.forkyld), trace="none", na.col="gray" ,margins=c(7,7), cexCol=0.6, cexRow=0.6, col=my_palette)
dev.off()

pdf(file="varying.heatmap.3920.protein.subject.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(varying.protein.3920.1.4.mat, Rowv=as.dendrogram(hcl.person.3920), Colv=as.dendrogram(hcl.prot.3920), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.8, cexRow=0.3, col=my_palette,RowSideColors = forkyld.col.1.4.visits.all.person)
dev.off()

pdf(file="varying.heatmap.3920.forkyld.protein.subject.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(varying.protein.3920.1.4.mat.forkyld, Rowv=as.dendrogram(hcl.person.3920.forkyld), Colv=as.dendrogram(hcl.prot.3920.forkyld), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.6, cexRow=0.5, col=my_palette, RowSideColors = forkyld.col.1.4.visits.forkyld)
dev.off()

#Kolla istället om jag kan hitta personer som har samma stegring för proteiner som för 3920
#Gå igenom protein för protein och se om det finns fler personer som har stor skillnad mellan besök för dessa 30 proteiner

high.sd.3920.30<-high.sd.3920[1:30]
protein.diff.mat<-matrix(nrow=num.person, ncol=30)
colnames(protein.diff.mat)<-high.sd.3920.30
rownames(protein.diff.mat)<-olink.subjects
for(j in 1:length(high.sd.3920.30)) {
  prot<-high.sd.3920.30[j]
  prot1<-olink.visit1.tot[,match(prot, names(olink.visit1.tot))]
  prot2<-olink.visit2.tot[,match(prot, names(olink.visit2.tot))]
  prot3<-olink.visit3.tot[,match(prot, names(olink.visit3.tot))]
  prot4<-olink.visit4.tot[,match(prot, names(olink.visit4.tot))]
  prot.mat<-cbind(prot1, prot2, prot3, prot4)
  rownames(prot.mat)<-olink.visit1.tot$subject_id
  max.vec<-apply(prot.mat, 1, max, na.rm=T)
  min.vec<-apply(prot.mat, 1, min, na.rm=T)
  diff.vec<-max.vec-min.vec
  diff.vec[which(diff.vec==-Inf)]<-NA
  protein.diff.mat[,j]<-diff.vec
  #sort(diff.vec)
}
diff.mat.mean<-apply(protein.diff.mat, 1, mean, na.rm=T)
diff.mat.mean.subj<-as.numeric(names(diff.mat.mean)[order(diff.mat.mean, decreasing=T)])
protein.diff.mat.sorted<-protein.diff.mat[order(diff.mat.mean, decreasing=T),]
intersect(diff.mat.mean.subj[1:30], forkyld.subjects.olink)  

pdf(file="top.30.variance.proteins.for.3920.and.same.high.subjects.pdf", w=13, h=5)
for(j in 1:20) {
  if(diff.mat.mean.subj[j]!=3920) {
    forkyld.compare.with.3920(diff.mat.mean.subj[j])
  }  
}
dev.off()


#Gör PCA istället för heatmap
varying.protein.3920.1.4.mat.no.na<-varying.protein.3920.1.4.mat[,!apply(varying.protein.3920.1.4.mat,2, function(x) any(is.na(x)))]
pca<-prcomp(varying.protein.3920.1.4.mat.no.na, scale.=T)
rot<-pca$r
layout(matrix(nrow=2, 1:4, byrow=T))
plot(rot[,1:2], pch="", main="Loadings")
text(rot[,1:2], colnames(varying.protein.3920.1.4.mat.no.na))
scores<-pca$x
plot(scores[,1:2], pch="", main="Scores")
text(scores[,1:2], rownames(varying.protein.3920.1.4.mat.no.na), col=forkyld.col.1.4.visits.all.person)
biplot(pca, main="Biplot", cex=0.7)
plot(pca)

varying.protein.3920.1.4.mat.no.na.forkyld<-varying.protein.3920.1.4.mat.forkyld[,!apply(varying.protein.3920.1.4.mat.forkyld,2, function(x) any(is.na(x)))]
varying.protein.3920.1.4.mat.no.na.forkyld<-varying.protein.3920.1.4.mat.no.na.forkyld[-grep(3920, rownames(varying.protein.3920.1.4.mat.no.na.forkyld)),]
pca<-prcomp(varying.protein.3920.1.4.mat.no.na.forkyld, scale.=T)
rot<-pca$r
layout(matrix(nrow=2, 1:4, byrow=T))
plot(rot[,1:2], pch="", main="Loadings")
text(rot[,1:2], colnames(varying.protein.3920.1.4.mat.no.na.forkyld))
scores<-pca$x
plot(scores[,1:2], pch="", main="Scores")
text(scores[,1:2], rownames(varying.protein.3920.1.4.mat.no.na.forkyld), col=forkyld.col.1.4.visits.forkyld)
biplot(pca, main="Biplot", cex=0.7)
plot(pca)



### Ta fram en lista på de personer som varierar mest enligt olika mått
high.variation.subj<-as.numeric(names(rev(subj.sd.mean.0.2.pos[ord])))


################ Titta på vad som är gemensamt i uttryck för de som har gått ner i vikt
weight.loss.data.visit1<-olink.visit1.tot[weight.down.olink.pos,]
weight.loss.data.visit2<-olink.visit2.tot[weight.down.olink.pos,]
weight.loss.data.visit3<-olink.visit3.tot[weight.down.olink.pos,]
weight.loss.data.visit4<-olink.visit4.tot[weight.down.olink.pos,]

weight.loss.data.changes<-weight.loss.data.visit4[,-1]-weight.loss.data.visit1[,-1]

weight.loss.cor<-cor(t(weight.loss.data.changes), method="pearson", use="pairwise.complete.obs")
colnames(weight.loss.cor)<-weight.loss.data.visit1$subject_id
rownames(weight.loss.cor)<-weight.loss.data.visit1$subject_id

proseek.person.cor.1<-cor(t(olink.visit1.tot[,-1]), method="pearson", use="pairwise.complete.obs")
colnames(proseek.person.cor.1)<-olink.visit1.tot$subject_id
rownames(proseek.person.cor.1)<-olink.visit1.tot$subject_id

olink.diff.4.1.tot<-olink.visit4.tot[,-1]-olink.visit1.tot[,-1]

proseek.diff.4.1.person.cor.1<-cor(t(olink.diff.4.1.tot), method="pearson", use="pairwise.complete.obs")
colnames(proseek.diff.4.1.person.cor.1)<-olink.visit1.tot$subject_id
rownames(proseek.diff.4.1.person.cor.1)<-olink.visit1.tot$subject_id

grep(3834, olink.visit1.tot$subject_id)
sort(proseek.person.cor.1[49,])
sort(proseek.diff.4.1.person.cor.1[49,])

#Gör istället korrelation på SD för varje protein för varje person
protein.person.sd.mat<-matrix(nrow=num.person, ncol=num.prot) 
colnames(protein.person.sd.mat)<-olink.proteins
rownames(protein.person.sd.mat)<-olink.subjects
for(j in 1:num.prot) {
  prot.name<-olink.proteins[j]
  prot.data<-cbind(olink.visit1.tot[,prot.name], olink.visit2.tot[,prot.name], olink.visit3.tot[,prot.name], olink.visit4.tot[,prot.name])
  names(prot.data)<-c("visit 1","visit 2", "visit 3","visit 4")
  person.sd<- apply(prot.data, 1, sd, na.rm=T)
  protein.person.sd.mat[,j]<-person.sd
}

proseek.person.sd.cor<-cor(t(protein.person.sd.mat), method="pearson", use="pairwise.complete.obs")
colnames(proseek.person.sd.cor)<-olink.visit1.tot$subject_id
rownames(proseek.person.sd.cor)<-olink.visit1.tot$subject_id


protein.person.sd.mat.no.var<- protein.person.sd.mat[,apply(protein.person.sd.mat, 2, var, na.rm=TRUE) != 0]
protein.person.sd.mat.no.var<-protein.person.sd.mat.no.var[ , ! apply( protein.person.sd.mat.no.var , 2 , function(x) all(is.na(x)) ) ]
protein.person.sd.mat.no.var<-protein.person.sd.mat.no.var[ , ! apply( protein.person.sd.mat.no.var , 2 , function(x) length(which(is.na(x)))> 50)]


proseek.protein.sd.cor<-cor(protein.person.sd.mat.no.var, method="spearman", use="pairwise.complete.obs")

cbind(1:82, round(sort(proseek.person.sd.cor[47,], decr=T),2))
proseek.person.sd.cor[47,weight.down.olink.pos]

d <- 1 - proseek.person.sd.cor
hcl.person <- hclust(as.dist(d), "average") 
pdf(file="dendrogram.person.sd.pdf",w=14, h=5)
plot(hcl.person, hang=-1, cex=1)
dev.off()

d.prot <- 1 - proseek.protein.sd.cor
hcl.prot <- hclust(as.dist(d.prot), "average") 
pdf(file="dendrogram.protein.sd.pdf",w=30, h=5)
plot(hcl.prot, hang=-1, cex=0.5)
dev.off()
#maPalette(high="mediumblue", mid="mediumturquoise",low="#EEEEFF") -> cols
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)

weight.change.cols<-rep("black", num.person)
weight.change.cols[weight.down.olink.pos]<-"green3"
weight.change.cols[weight.up.olink.pos]<-"red"


pdf(file="heatmap.subject.sd.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(proseek.person.sd.cor, Rowv=as.dendrogram(hcl.person), Colv=rev(as.dendrogram(hcl.person)), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.8, cexRow=0.8, col=my_palette, RowSideColors=weight.change.cols, ColSideColors=weight.change.cols)
dev.off()

pdf(file="heatmap.protein.sd.pdf",w=10,h=10)
my_palette <- colorRampPalette(c("red", "white", "blue"))(n = 100)
heatmap.2(proseek.protein.sd.cor, Rowv=as.dendrogram(hcl.prot), Colv=rev(as.dendrogram(hcl.prot)), trace="none", na.col="gray" ,margins=c(7,5), cexCol=0.5, cexRow=0.5, col=my_palette)
dev.off()

##############################################################################################################################  
############################################################### Kolla korrelationsplottar mm
##############################################################################################################################  


#Plotta de proteiner som finns med i fler paneler för att jämföra
plot.in.multiple.panels<-function(protein, panel1, panel2) {
  #protein<-"BOC"
  #panel1<-"CVDII"
  #panel2<-"CRE"

  # protein<-"uPA"
  # panel1<-"CVDIII"
  # panel2<-"INFI"
      #  protein<-"FGF21"
  # panel1<-"CVDII"
  #  panel2<-"INFI"
  # 
  # protein<-"TGF.alpha"
  # panel1<-"ONCII"
  # panel2<-"INFI"
  
  # protein<-"TNFSF10"
  # panel1<-"ONCII"
  # panel2<-"INFI"
  
  # "TNFSF10","ONCII","INFI")
  
  # protein<-"NTproBNP"
  # panel1<-"CVDIII"
  # panel2<-"MET"
  
 #  protein<-"KIM1"
#   panel1<-"CVDII"
#   panel2<-"CVDIII"
  
  
  
  # 
  if(panel1=="CVDIII") {
    panel1.visit1.df<-proseek.CVDIII.visit1.NA
    panel1.visit2.df<-proseek.CVDIII.visit2.NA
    panel1.visit3.df<-proseek.CVDIII.visit3.NA
    panel1.visit4.df<-proseek.CVDIII.visit4.NA
  } else 
    if(panel1=="CVDII") {
      panel1.visit1.df<-proseek.CVDII.visit1.NA
      panel1.visit2.df<-proseek.CVDII.visit2.NA
      panel1.visit3.df<-proseek.CVDII.visit3.NA
      panel1.visit4.df<-proseek.CVDII.visit4.NA
    } else 
      if(panel1=="INFI") {
        panel1.visit1.df<-proseek.INFI.visit1.NA
        panel1.visit2.df<-proseek.INFI.visit2.NA
        panel1.visit3.df<-proseek.INFI.visit3.NA
        panel1.visit4.df<-proseek.INFI.visit4.NA
      } else 
        if(panel1=="ONCII") {
          panel1.visit1.df<-proseek.ONCII.visit1.NA
          panel1.visit2.df<-proseek.ONCII.visit2.NA
          panel1.visit3.df<-proseek.ONCII.visit3.NA
          panel1.visit4.df<-proseek.ONCII.visit4.NA
        }  else 
          if(panel1=="NEU") {
            panel1.visit1.df<-proseek.NEU.visit1.NA
            panel1.visit2.df<-proseek.NEU.visit2.NA
            panel1.visit3.df<-proseek.NEU.visit3.NA
            panel1.visit4.df<-proseek.NEU.visit4.NA
          } else 
            if(panel1=="IRE") {
              panel1.visit1.df<-proseek.IRE.visit1.NA
              panel1.visit2.df<-proseek.IRE.visit2.NA
              panel1.visit3.df<-proseek.IRE.visit3.NA
              panel1.visit4.df<-proseek.IRE.visit4.NA
            } else 
              if(panel1=="ODA") {
                panel1.visit1.df<-proseek.ODA.visit1.NA
                panel1.visit2.df<-proseek.ODA.visit2.NA
                panel1.visit3.df<-proseek.ODA.visit3.NA
                panel1.visit4.df<-proseek.ODA.visit4.NA
              }
  if(panel2=="CVDIII") {
    panel2.visit1.df<-proseek.CVDIII.visit1.NA
    panel2.visit2.df<-proseek.CVDIII.visit2.NA
    panel2.visit3.df<-proseek.CVDIII.visit3.NA
    panel2.visit4.df<-proseek.CVDIII.visit4.NA
  } else 
    if(panel2=="CVDII") {
      panel2.visit1.df<-proseek.CVDII.visit1.NA
      panel2.visit2.df<-proseek.CVDII.visit2.NA
      panel2.visit3.df<-proseek.CVDII.visit3.NA
      panel2.visit4.df<-proseek.CVDII.visit4.NA
    } else 
      if(panel2=="INFI") {
        panel2.visit1.df<-proseek.INFI.visit1.NA
        panel2.visit2.df<-proseek.INFI.visit2.NA
        panel2.visit3.df<-proseek.INFI.visit3.NA
        panel2.visit4.df<-proseek.INFI.visit4.NA
      } else 
        if(panel2=="ONCII") {
          panel2.visit1.df<-proseek.ONCII.visit1.NA
          panel2.visit2.df<-proseek.ONCII.visit2.NA
          panel2.visit3.df<-proseek.ONCII.visit3.NA
          panel2.visit4.df<-proseek.ONCII.visit4.NA
        }  else 
          if(panel2=="NEU") {
            panel2.visit1.df<-proseek.NEU.visit1.NA
            panel2.visit2.df<-proseek.NEU.visit2.NA
            panel2.visit3.df<-proseek.NEU.visit3.NA
            panel2.visit4.df<-proseek.NEU.visit4.NA 
          }  else 
            if(panel2=="CRE") {
              panel2.visit1.df<-proseek.CRE.visit1.NA
              panel2.visit2.df<-proseek.CRE.visit2.NA
              panel2.visit3.df<-proseek.CRE.visit3.NA
              panel2.visit4.df<-proseek.CRE.visit4.NA
            }
            else 
            if(panel2=="MET") {
             panel2.visit1.df<-proseek.MET.visit1.NA
             panel2.visit2.df<-proseek.MET.visit2.NA
             panel2.visit3.df<-proseek.MET.visit3.NA
             panel2.visit4.df<-proseek.MET.visit4.NA
           }
   common.subj.ids<- Reduce(intersect, list(panel1.visit1.df$subject_id, panel1.visit2.df$subject_id, panel1.visit3.df$subject_id,panel1.visit4.df$subject_id, panel2.visit1.df$subject_id, panel2.visit2.df$subject_id, panel2.visit3.df$subject_id, panel2.visit4.df$subject_id))
  
  panel1.visit1.df.same<-panel1.visit1.df[which(panel1.visit1.df$subject_id %in% common.subj.ids),]
  panel1.visit2.df.same<-panel1.visit2.df[which(panel1.visit2.df$subject_id %in% common.subj.ids),]
  panel1.visit3.df.same<-panel1.visit3.df[which(panel1.visit3.df$subject_id %in% common.subj.ids),]
  panel1.visit4.df.same<-panel1.visit4.df[which(panel1.visit4.df$subject_id %in% common.subj.ids),]
  
  panel2.visit1.df.same<-panel2.visit1.df[which(panel2.visit1.df$subject_id %in% common.subj.ids),]
  panel2.visit2.df.same<-panel2.visit2.df[which(panel2.visit2.df$subject_id %in% common.subj.ids),]
  panel2.visit3.df.same<-panel2.visit3.df[which(panel2.visit3.df$subject_id %in% common.subj.ids),]
  panel2.visit4.df.same<-panel2.visit4.df[which(panel2.visit4.df$subject_id %in% common.subj.ids),]
  
  panel1.prot.pos<-match(protein, colnames(panel1.visit1.df.same))
  panel2.prot.pos<-match(protein, colnames(panel2.visit1.df.same))
  # if(protein=="TGF.alpha") {
  #    panel2.prot.pos<-match("TGFA", colnames(panel2.visit1.df.same))
  # }
  if(protein=="FGF21") {
    panel1.prot.pos<-match("FGF.21", colnames(panel1.visit1.df.same))
    panel2.prot.pos<-match("FGF.21", colnames(panel2.visit1.df.same))
  }
  # if(protein=="GDNF") {
  #    panel2.prot.pos<-match("hGDNF", colnames(panel2.visit1.df.same))
  # }
  #  if(protein=="TNFSF10") {
  #    panel2.prot.pos<-match("TRAIL", colnames(panel2.visit1.df.same))
  #  } 
  if(protein=="IL10") {
    panel2.prot.pos<-match("IL.10", colnames(panel2.visit1.df.same))
  }  
  if(protein=="IL5") {
    panel2.prot.pos<-match("IL.5", colnames(panel2.visit1.df.same))
  }  
  if(protein=="VEGFD") {
    panel1.prot.pos<-match("VEGF.D", colnames(panel1.visit1.df.same))
  } 
  if(protein=="BOC") {
    panel1.prot.pos<-match("Protein.BOC", colnames(panel1.visit1.df.same))
  }
  if(protein== "NTproBNP") {
    panel1.prot.pos<-match("NT.pro.BNP", colnames(panel1.visit1.df.same))
    panel2.prot.pos<-match("NT.proBNP", colnames(panel2.visit1.df.same))
    
  }
  if(protein== "KIM1") {
    panel1.prot.pos<-match("TIM", colnames(panel1.visit1.df.same))
    panel2.prot.pos<-match("TIMP4", colnames(panel2.visit1.df.same))
    
  }
  panel1.npx1<-unlist(panel1.visit1.df.same[,panel1.prot.pos])
  panel1.npx2<-unlist(panel1.visit2.df.same[,panel1.prot.pos])
  panel1.npx3<-unlist(panel1.visit3.df.same[,panel1.prot.pos])
  panel1.npx4<-unlist(panel1.visit4.df.same[,panel1.prot.pos])
  panel2.npx1<-unlist(panel2.visit1.df.same[,panel2.prot.pos])
  panel2.npx2<-unlist(panel2.visit2.df.same[,panel2.prot.pos])
  panel2.npx3<-unlist(panel2.visit3.df.same[,panel2.prot.pos])
  panel2.npx4<-unlist(panel2.visit4.df.same[,panel2.prot.pos])
  
  lower<-round(min(c(panel1.npx1, panel1.npx2, panel1.npx3,panel1.npx4,panel2.npx1, panel2.npx2, panel2.npx3,panel2.npx4), na.rm=T), 1)
  upper<-round(max(c(panel1.npx1, panel1.npx2, panel1.npx3,panel1.npx4,panel2.npx1, panel2.npx2, panel2.npx3,panel2.npx4), na.rm=T),1)
  
  pdf(file=paste0(protein, ".",panel1,".",panel2,".four.visits.pdf"), w=12, h=7,useDingbats = FALSE )
  layout(matrix(1:8, nrow=2, byrow=T))
  
  plot(panel1.npx1, panel1.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=olink.sex.col,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(protein," Panel: ",panel1,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel1.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=0.8, cex.lab=0.8)
  legend("topleft", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
  plot(panel1.npx1, panel1.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=olink.sex.col,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 3", main=paste0(protein," Panel: ",panel1,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel1.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=0.8, cex.lab=0.8)
  
  plot(panel2.npx1, panel2.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=olink.sex.col,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(protein," Panel: ",panel2,  "\n",paste0("Pearson: ",round(cor(panel2.npx1, panel2.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=0.8, cex.lab=0.8)
  plot(panel2.npx1, panel2.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=olink.sex.col,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 3", main=paste0(protein," Panel: ",panel2,  "\n",paste0("Pearson: ",round(cor(panel2.npx1, panel2.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=0.8, cex.lab=0.8)
  
  plot(panel1.npx1, panel2.npx1, ylim=c(lower, upper),xlim=c(lower, upper), col=olink.sex.col,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 1", main=paste0(protein," Panels: ",panel1, "/", panel2,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel2.npx1, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=0.8, cex.lab=0.8)
  plot(panel1.npx2, panel2.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=olink.sex.col,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 2", main=paste0(protein," Panels: ",panel1, "/", panel2,  "\n",paste0("Pearson: ",round(cor(panel1.npx2, panel2.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=0.8, cex.lab=0.8)
  plot(panel1.npx3, panel2.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=olink.sex.col,pch=19, xlab="log NPX visit 3", ylab="log NPX visit 3", main=paste0(protein," Panels: ",panel1, "/", panel2, "\n",paste0("Pearson: ",round(cor(panel1.npx3, panel2.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=0.8, cex.lab=0.8)
  plot(panel1.npx4, panel2.npx4, ylim=c(lower, upper),xlim=c(lower, upper), col=olink.sex.col,pch=19, xlab="log NPX visit 4", ylab="log NPX visit 4", main=paste0(protein," Panels: ",panel1, "/", panel2, "\n",paste0("Pearson: ",round(cor(panel1.npx4, panel2.npx4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=0.8, cex.lab=0.8)
  
  
  dev.off()
  replicate.cor.vec<-c(protein,cor(panel1.npx1, panel2.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx2, panel2.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx3, panel2.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel1.npx4, panel2.npx4, method="pearson",use = "pairwise.complete.obs"))
  
  
  return(replicate.cor.vec)
  
}
replicate.cor.mat<-matrix(nrow=0, ncol=5)
colnames(replicate.cor.mat)<-c("protein","visit1","visit2","visit3","visit4")

replicate.cor.mat<-rbind(replicate.cor.mat, plot.in.multiple.panels("uPA","CVDIII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat, plot.in.multiple.panels("MCP.1","CVDIII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat, plot.in.multiple.panels("OPG","CVDIII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat, plot.in.multiple.panels("CXCL1","CVDII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat, plot.in.multiple.panels("IL.18","CVDII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("FGF21","CVDII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("FGF.23","CVDII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("CCL3","CVDII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("VEGF.A","ONCII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("TGF.alpha","ONCII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("TNFSF10","ONCII","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("HGF","ONCII","INFI"))
#plot.in.multiple.panels("BDNF","NEU","INFI")
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("GDNF","NEU","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("Beta.NGF","NEU","INFI"))

#nya mot nya replikat
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("ZBTB16","IRE","CRE"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("DCBLD2","IRE","CRE"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("JUN","IRE","CRE"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("ENTPD6","ODA","CRE"))

#Nya mot gamla replikat
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("CCL11","IRE","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("BOC","CVDII","CRE"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("IL10","IRE","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("IL5","IRE","INFI"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("VEGFD","CVDII","CRE"))
replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("TNFRSF10A","CVDII","CRE"))
#replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("NTproBNP","CVDIII","MET"))
#replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("KIM1","CVDIII","CAM"))
#replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("AR","ONCII","CAM"))
#replicate.cor.mat<-rbind(replicate.cor.mat,plot.in.multiple.panels("PlGF","CVDIII","CAM"))

# 
# TNFRSF10A
 grep("TIM", proseek.mapping.matrix[,2])
 proseek.mapping.matrix[grep("TIM", proseek.mapping.matrix[,2]),]
 proseek.mapping.matrix[grep("KIM", proseek.mapping.matrix[,2]),]
 # proseek.mapping.matrix[grep("BOC", proseek.mapping.matrix[,2]),]
# proseek.mapping.matrix[grep("IL.10", proseek.mapping.matrix[,2]),]
# proseek.mapping.matrix[grep("TNFRSF10A", proseek.mapping.matrix[,2]),]
grep("Q99727", proseek.mapping.matrix[,3])
 grep("Q99727",olink.go.uniprot.mat[,1])

 proseek.mapping.matrix[grep("AR", proseek.mapping.matrix[,2]),]
 proseek.mapping.matrix[grep("AREG", proseek.mapping.matrix[,2]),]
 proseek.mapping.matrix[grep("P15514", proseek.mapping.matrix[,3]),]
 P15514

#Plotta de två proteiner som är med i tre paneler separat
plot.triplicate.proteins<-function(protein) {
  #  protein<-"IL.6"
  #  protein<-"SCF"
  panel1<-"CVDII"
  panel2<-"INFI"
  panel3<-"ONCII"
  panel1.visit1.df<-proseek.CVDII.visit1.NA
  panel1.visit2.df<-proseek.CVDII.visit2.NA
  panel1.visit3.df<-proseek.CVDII.visit3.NA
  panel1.visit4.df<-proseek.CVDII.visit4.NA
  panel2.visit1.df<-proseek.INFI.visit1.NA
  panel2.visit2.df<-proseek.INFI.visit2.NA
  panel2.visit3.df<-proseek.INFI.visit3.NA
  panel2.visit4.df<-proseek.INFI.visit4.NA
  panel3.visit1.df<-proseek.ONCII.visit1.NA
  panel3.visit2.df<-proseek.ONCII.visit2.NA
  panel3.visit3.df<-proseek.ONCII.visit3.NA
  panel3.visit4.df<-proseek.ONCII.visit4.NA
  common.subj.ids<- Reduce(intersect, list(panel1.visit1.df$subject_id, panel1.visit2.df$subject_id, panel1.visit3.df$subject_id, panel1.visit4.df$subject_id,panel2.visit1.df$subject_id, panel2.visit2.df$subject_id, panel2.visit3.df$subject_id,panel2.visit4.df$subject_id,panel3.visit1.df$subject_id, panel3.visit2.df$subject_id, panel3.visit3.df$subject_id,panel3.visit4.df$subject_id))
  sex<-unlist((wellness.data[which(wellness.data$subject_id %in% common.subj.ids ),"sex"]))
  sex[which(sex=="f")]<-"#F8766D"
  sex[which(sex=="m")]<-"#00BFC4"
  panel1.visit1.df.same<-panel1.visit1.df[which(panel1.visit1.df$subject_id %in% common.subj.ids),]
  panel1.visit2.df.same<-panel1.visit2.df[which(panel1.visit2.df$subject_id %in% common.subj.ids),]
  panel1.visit3.df.same<-panel1.visit3.df[which(panel1.visit3.df$subject_id %in% common.subj.ids),]
  panel1.visit4.df.same<-panel1.visit4.df[which(panel1.visit4.df$subject_id %in% common.subj.ids),]
  panel2.visit1.df.same<-panel2.visit1.df[which(panel2.visit1.df$subject_id %in% common.subj.ids),]
  panel2.visit2.df.same<-panel2.visit2.df[which(panel2.visit2.df$subject_id %in% common.subj.ids),]
  panel2.visit3.df.same<-panel2.visit3.df[which(panel2.visit3.df$subject_id %in% common.subj.ids),]
  panel2.visit4.df.same<-panel2.visit4.df[which(panel2.visit4.df$subject_id %in% common.subj.ids),]
  panel3.visit1.df.same<-panel3.visit1.df[which(panel3.visit1.df$subject_id %in% common.subj.ids),]
  panel3.visit2.df.same<-panel3.visit2.df[which(panel3.visit2.df$subject_id %in% common.subj.ids),]
  panel3.visit3.df.same<-panel3.visit3.df[which(panel3.visit3.df$subject_id %in% common.subj.ids),]
  panel3.visit4.df.same<-panel3.visit4.df[which(panel3.visit4.df$subject_id %in% common.subj.ids),]
  
  panel1.prot.pos<-match(protein, colnames(panel1.visit1.df.same))
  panel2.prot.pos<-match(protein, colnames(panel2.visit1.df.same))
  panel3.prot.pos<-match(protein, colnames(panel3.visit1.df.same))
  
  panel1.npx1<-unlist(panel1.visit1.df.same[,panel1.prot.pos])
  panel1.npx2<-unlist(panel1.visit2.df.same[,panel1.prot.pos])
  panel1.npx3<-unlist(panel1.visit3.df.same[,panel1.prot.pos])
  panel1.npx4<-unlist(panel1.visit4.df.same[,panel1.prot.pos])
  panel2.npx1<-unlist(panel2.visit1.df.same[,panel2.prot.pos])
  panel2.npx2<-unlist(panel2.visit2.df.same[,panel2.prot.pos])
  panel2.npx3<-unlist(panel2.visit3.df.same[,panel2.prot.pos])
  panel2.npx4<-unlist(panel2.visit4.df.same[,panel2.prot.pos])
  panel3.npx1<-unlist(panel3.visit1.df.same[,panel3.prot.pos])
  panel3.npx2<-unlist(panel3.visit2.df.same[,panel3.prot.pos])
  panel3.npx3<-unlist(panel3.visit3.df.same[,panel3.prot.pos])
  panel3.npx4<-unlist(panel3.visit4.df.same[,panel3.prot.pos])
  lower<-round(min(c(panel1.npx1, panel1.npx2, panel1.npx3,panel1.npx4,panel2.npx1, panel2.npx2, panel2.npx3,panel2.npx4,panel3.npx1, panel3.npx2, panel3.npx3,panel3.npx4), na.rm=T), 1)
  upper<-round(max(c(panel1.npx1, panel1.npx2, panel1.npx3,panel1.npx4,panel2.npx1, panel2.npx2, panel2.npx3,panel2.npx4,panel3.npx1, panel3.npx2, panel3.npx3,panel3.npx4), na.rm=T),1)
  
  pdf(file=paste0(protein, ".",panel1,".",panel2,".",panel3,".triplicate.four.visits.pdf"), w=10, h=8)
  layout(matrix(1:12, nrow=3, byrow=T))
  ce<-1.1
  plot(panel1.npx1, panel2.npx1, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 1", main=paste0(protein," Panels: ",panel1, " / ", panel2,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel2.npx1, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  legend("topleft", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
  plot(panel1.npx2, panel2.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 2", main=paste0(protein," Panels: ",panel1, " / ", panel2,"\n",paste0("Pearson: ",round(cor(panel1.npx2, panel2.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx3, panel2.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 3", ylab="log NPX visit 3", main=paste0(protein," Panels: ",panel1, " / ", panel2, "\n",paste0("Pearson: ",round(cor(panel1.npx3, panel2.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx4, panel2.npx4, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 4", ylab="log NPX visit 4", main=paste0(protein," Panels: ",panel1, " / ", panel2, "\n",paste0("Pearson: ",round(cor(panel1.npx4, panel2.npx4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  
  plot(panel1.npx1, panel3.npx1, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 1", main=paste0(protein," Panels: ",panel1, " / ", panel3,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel3.npx1, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx2, panel3.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 2", main=paste0(protein," Panels: ",panel1, " / ", panel3,"\n",paste0("Pearson: ",round(cor(panel1.npx2, panel3.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx3, panel3.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 3", ylab="log NPX visit 3", main=paste0(protein," Panels: ",panel1, " / ", panel3, "\n",paste0("Pearson: ",round(cor(panel1.npx3, panel3.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx4, panel3.npx4, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 4", ylab="log NPX visit 4", main=paste0(protein," Panels: ",panel1, " / ", panel3, "\n",paste0("Pearson: ",round(cor(panel1.npx4, panel3.npx4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  
  plot(panel2.npx1, panel3.npx1, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 1", main=paste0(protein," Panels: ",panel2, " / ", panel3,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel3.npx1, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel2.npx2, panel3.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 2", main=paste0(protein," Panels: ",panel2, " / ", panel3,"\n",paste0("Pearson: ",round(cor(panel1.npx2, panel3.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel2.npx3, panel3.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 3", ylab="log NPX visit 3", main=paste0(protein," Panels: ",panel2, " / ", panel3, "\n",paste0("Pearson: ",round(cor(panel1.npx3, panel3.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel2.npx4, panel3.npx4, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 4", ylab="log NPX visit 4", main=paste0(protein," Panels: ",panel2, " / ", panel3, "\n",paste0("Pearson: ",round(cor(panel1.npx4, panel3.npx4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  dev.off()
  
  replicate.cor.mat<-c(protein,cor(panel1.npx1, panel2.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx2, panel2.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx3, panel2.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel1.npx4, panel2.npx4, method="pearson",use = "pairwise.complete.obs"))
  replicate.cor.mat<-rbind(replicate.cor.mat, c(protein,cor(panel1.npx1, panel3.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx2, panel3.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx3, panel3.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel1.npx4, panel3.npx4, method="pearson",use = "pairwise.complete.obs")))
  replicate.cor.mat<-rbind(replicate.cor.mat, c(protein,cor(panel2.npx1, panel3.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel2.npx2, panel3.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel2.npx3, panel3.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel2.npx4, panel3.npx4, method="pearson",use = "pairwise.complete.obs")))
  return(replicate.cor.mat)
}
#replicate.cor.mat<-rbind(replicate.cor.mat, plot.triplicate.proteins("IL.6"))
replicate.cor.mat<-rbind(replicate.cor.mat, plot.triplicate.proteins("SCF"))


plot.quadruple.proteins<-function(protein) {
  #  protein<-"IL.6"
  #  protein<-"SCF"
  panel1<-"CVDII"
  panel2<-"INFI"
  panel3<-"ONCII"
  panel4<-"IRE"
  panel1.visit1.df<-proseek.CVDII.visit1.NA
  panel1.visit2.df<-proseek.CVDII.visit2.NA
  panel1.visit3.df<-proseek.CVDII.visit3.NA
  panel1.visit4.df<-proseek.CVDII.visit4.NA
  panel2.visit1.df<-proseek.INFI.visit1.NA
  panel2.visit2.df<-proseek.INFI.visit2.NA
  panel2.visit3.df<-proseek.INFI.visit3.NA
  panel2.visit4.df<-proseek.INFI.visit4.NA
  panel3.visit1.df<-proseek.ONCII.visit1.NA
  panel3.visit2.df<-proseek.ONCII.visit2.NA
  panel3.visit3.df<-proseek.ONCII.visit3.NA
  panel3.visit4.df<-proseek.ONCII.visit4.NA
  panel4.visit1.df<-proseek.IRE.visit1.NA
  panel4.visit2.df<-proseek.IRE.visit2.NA
  panel4.visit3.df<-proseek.IRE.visit3.NA
  panel4.visit4.df<-proseek.IRE.visit4.NA
  common.subj.ids<- Reduce(intersect, list(panel1.visit1.df$subject_id, panel1.visit2.df$subject_id, panel1.visit3.df$subject_id, panel1.visit4.df$subject_id,panel2.visit1.df$subject_id, panel2.visit2.df$subject_id, panel2.visit3.df$subject_id,panel2.visit4.df$subject_id,panel3.visit1.df$subject_id, panel3.visit2.df$subject_id, panel3.visit3.df$subject_id,panel3.visit4.df$subject_id,panel4.visit1.df$subject_id, panel4.visit2.df$subject_id, panel4.visit3.df$subject_id,panel4.visit4.df$subject_id))
  sex<-unlist((wellness.data[which(wellness.data$subject_id %in% common.subj.ids ),"sex"]))
  sex[which(sex=="f")]<-"#F8766D"
  sex[which(sex=="m")]<-"#00BFC4"
  panel1.visit1.df.same<-panel1.visit1.df[which(panel1.visit1.df$subject_id %in% common.subj.ids),]
  panel1.visit2.df.same<-panel1.visit2.df[which(panel1.visit2.df$subject_id %in% common.subj.ids),]
  panel1.visit3.df.same<-panel1.visit3.df[which(panel1.visit3.df$subject_id %in% common.subj.ids),]
  panel1.visit4.df.same<-panel1.visit4.df[which(panel1.visit4.df$subject_id %in% common.subj.ids),]
  panel2.visit1.df.same<-panel2.visit1.df[which(panel2.visit1.df$subject_id %in% common.subj.ids),]
  panel2.visit2.df.same<-panel2.visit2.df[which(panel2.visit2.df$subject_id %in% common.subj.ids),]
  panel2.visit3.df.same<-panel2.visit3.df[which(panel2.visit3.df$subject_id %in% common.subj.ids),]
  panel2.visit4.df.same<-panel2.visit4.df[which(panel2.visit4.df$subject_id %in% common.subj.ids),]
  panel3.visit1.df.same<-panel3.visit1.df[which(panel3.visit1.df$subject_id %in% common.subj.ids),]
  panel3.visit2.df.same<-panel3.visit2.df[which(panel3.visit2.df$subject_id %in% common.subj.ids),]
  panel3.visit3.df.same<-panel3.visit3.df[which(panel3.visit3.df$subject_id %in% common.subj.ids),]
  panel3.visit4.df.same<-panel3.visit4.df[which(panel3.visit4.df$subject_id %in% common.subj.ids),]
  panel4.visit1.df.same<-panel4.visit1.df[which(panel4.visit1.df$subject_id %in% common.subj.ids),]
  panel4.visit2.df.same<-panel4.visit2.df[which(panel4.visit2.df$subject_id %in% common.subj.ids),]
  panel4.visit3.df.same<-panel4.visit3.df[which(panel4.visit3.df$subject_id %in% common.subj.ids),]
  panel4.visit4.df.same<-panel4.visit4.df[which(panel4.visit4.df$subject_id %in% common.subj.ids),]
  
  panel1.prot.pos<-match(protein, colnames(panel1.visit1.df.same))
  panel2.prot.pos<-match(protein, colnames(panel2.visit1.df.same))
  panel3.prot.pos<-match(protein, colnames(panel3.visit1.df.same))
  panel4.prot.pos<-match("IL6", colnames(panel4.visit1.df.same))
  
  panel1.npx1<-unlist(panel1.visit1.df.same[,panel1.prot.pos])
  panel1.npx2<-unlist(panel1.visit2.df.same[,panel1.prot.pos])
  panel1.npx3<-unlist(panel1.visit3.df.same[,panel1.prot.pos])
  panel1.npx4<-unlist(panel1.visit4.df.same[,panel1.prot.pos])
  panel2.npx1<-unlist(panel2.visit1.df.same[,panel2.prot.pos])
  panel2.npx2<-unlist(panel2.visit2.df.same[,panel2.prot.pos])
  panel2.npx3<-unlist(panel2.visit3.df.same[,panel2.prot.pos])
  panel2.npx4<-unlist(panel2.visit4.df.same[,panel2.prot.pos])
  panel3.npx1<-unlist(panel3.visit1.df.same[,panel3.prot.pos])
  panel3.npx2<-unlist(panel3.visit2.df.same[,panel3.prot.pos])
  panel3.npx3<-unlist(panel3.visit3.df.same[,panel3.prot.pos])
  panel3.npx4<-unlist(panel3.visit4.df.same[,panel3.prot.pos])
  panel4.npx1<-unlist(panel4.visit1.df.same[,panel4.prot.pos])
  panel4.npx2<-unlist(panel4.visit2.df.same[,panel4.prot.pos])
  panel4.npx3<-unlist(panel4.visit3.df.same[,panel4.prot.pos])
  panel4.npx4<-unlist(panel4.visit4.df.same[,panel4.prot.pos])
  
  lower<-round(min(c(panel1.npx1, panel1.npx2, panel1.npx3,panel1.npx4,panel2.npx1, panel2.npx2, panel2.npx3,panel2.npx4,panel3.npx1, panel3.npx2, panel3.npx3,panel3.npx4,panel4.npx1, panel4.npx2, panel4.npx3,panel4.npx4), na.rm=T), 1)
  upper<-round(max(c(panel1.npx1, panel1.npx2, panel1.npx3,panel1.npx4,panel2.npx1, panel2.npx2, panel2.npx3,panel2.npx4,panel3.npx1, panel3.npx2, panel3.npx3,panel3.npx4,panel4.npx1, panel4.npx2, panel4.npx3,panel4.npx4), na.rm=T),1)
  
  pdf(file=paste0(protein, ".",panel1,".",panel2,".",panel3,".",panel4,".quadruple.four.visits.pdf"), w=10, h=11)
  layout(matrix(1:16, nrow=4, byrow=T))
  ce<-1.1
  plot(panel1.npx1, panel2.npx1, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 1", main=paste0(protein," Panels: ",panel1, " / ", panel2,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel2.npx1, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  legend("topleft", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
  plot(panel1.npx2, panel2.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 2", main=paste0(protein," Panels: ",panel1, " / ", panel2,"\n",paste0("Pearson: ",round(cor(panel1.npx2, panel2.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx3, panel2.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 3", ylab="log NPX visit 3", main=paste0(protein," Panels: ",panel1, " / ", panel2, "\n",paste0("Pearson: ",round(cor(panel1.npx3, panel2.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx4, panel2.npx4, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 4", ylab="log NPX visit 4", main=paste0(protein," Panels: ",panel1, " / ", panel2, "\n",paste0("Pearson: ",round(cor(panel1.npx4, panel2.npx4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  
  plot(panel1.npx1, panel3.npx1, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 1", main=paste0(protein," Panels: ",panel1, " / ", panel3,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel3.npx1, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx2, panel3.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 2", main=paste0(protein," Panels: ",panel1, " / ", panel3,"\n",paste0("Pearson: ",round(cor(panel1.npx2, panel3.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx3, panel3.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 3", ylab="log NPX visit 3", main=paste0(protein," Panels: ",panel1, " / ", panel3, "\n",paste0("Pearson: ",round(cor(panel1.npx3, panel3.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx4, panel3.npx4, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 4", ylab="log NPX visit 4", main=paste0(protein," Panels: ",panel1, " / ", panel3, "\n",paste0("Pearson: ",round(cor(panel1.npx4, panel3.npx4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  
  plot(panel2.npx1, panel3.npx1, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 1", main=paste0(protein," Panels: ",panel2, " / ", panel3,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel3.npx1, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel2.npx2, panel3.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 2", main=paste0(protein," Panels: ",panel2, " / ", panel3,"\n",paste0("Pearson: ",round(cor(panel1.npx2, panel3.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel2.npx3, panel3.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 3", ylab="log NPX visit 3", main=paste0(protein," Panels: ",panel2, " / ", panel3, "\n",paste0("Pearson: ",round(cor(panel1.npx3, panel3.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel2.npx4, panel3.npx4, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 4", ylab="log NPX visit 4", main=paste0(protein," Panels: ",panel2, " / ", panel3, "\n",paste0("Pearson: ",round(cor(panel1.npx4, panel3.npx4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  
  plot(panel1.npx1, panel4.npx1, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 1", main=paste0(protein," Panels: ",panel1, " / ", panel4,  "\n",paste0("Pearson: ",round(cor(panel1.npx1, panel4.npx1, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx2, panel4.npx2, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 2", main=paste0(protein," Panels: ",panel1, " / ", panel4,"\n",paste0("Pearson: ",round(cor(panel1.npx2, panel4.npx2, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx3, panel4.npx3, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 3", ylab="log NPX visit 3", main=paste0(protein," Panels: ",panel1, " / ", panel4, "\n",paste0("Pearson: ",round(cor(panel1.npx3, panel4.npx3, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  plot(panel1.npx4, panel4.npx4, ylim=c(lower, upper),xlim=c(lower, upper), col=sex,pch=19, xlab="log NPX visit 4", ylab="log NPX visit 4", main=paste0(protein," Panels: ",panel1, " / ", panel4, "\n",paste0("Pearson: ",round(cor(panel1.npx4, panel4.npx4, method="pearson",use = "pairwise.complete.obs"),2))), cex.axis=ce, cex.lab=ce)
  
  replicate.cor.mat<-c(protein,cor(panel1.npx1, panel2.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx2, panel2.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx3, panel2.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel1.npx4, panel2.npx4, method="pearson",use = "pairwise.complete.obs"))
  replicate.cor.mat<-rbind(replicate.cor.mat, c(protein,cor(panel1.npx1, panel3.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx2, panel3.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel1.npx3, panel3.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel1.npx4, panel3.npx4, method="pearson",use = "pairwise.complete.obs")))
  replicate.cor.mat<-rbind(replicate.cor.mat, c(protein,cor(panel2.npx1, panel3.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel2.npx2, panel3.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel2.npx3, panel3.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel2.npx4, panel3.npx4, method="pearson",use = "pairwise.complete.obs")))
  replicate.cor.mat<-rbind(replicate.cor.mat, c(protein,cor(panel4.npx1, panel3.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel4.npx2, panel3.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel4.npx3, panel3.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel4.npx4, panel3.npx4, method="pearson",use = "pairwise.complete.obs")))
  replicate.cor.mat<-rbind(replicate.cor.mat, c(protein,cor(panel4.npx1, panel2.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel4.npx2, panel2.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel4.npx3, panel2.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel4.npx4, panel2.npx4, method="pearson",use = "pairwise.complete.obs")))
  replicate.cor.mat<-rbind(replicate.cor.mat, c(protein,cor(panel4.npx1, panel1.npx1, method="pearson",use = "pairwise.complete.obs"),cor(panel4.npx2, panel1.npx2, method="pearson",use = "pairwise.complete.obs"),cor(panel4.npx3, panel1.npx3, method="pearson",use = "pairwise.complete.obs") , cor(panel4.npx4, panel1.npx4, method="pearson",use = "pairwise.complete.obs")))
  dev.off()
  return(replicate.cor.mat)
}
#plot.quadruple.proteins("IL.6")
replicate.cor.mat<-rbind(replicate.cor.mat, plot.quadruple.proteins("IL.6"))

replicate.cor.mat.long<-cbind(replicate.cor.mat[,1:2], "visit1")
replicate.cor.mat.long<-rbind(replicate.cor.mat.long, cbind(replicate.cor.mat[,c(1,3)], "visit2"))
replicate.cor.mat.long<-rbind(replicate.cor.mat.long, cbind(replicate.cor.mat[,c(1,4)], "visit3"))
replicate.cor.mat.long<-rbind(replicate.cor.mat.long, cbind(replicate.cor.mat[,c(1,5)], "visit4"))
colnames(replicate.cor.mat.long)<-c("protein","correlation", "visit")                                                            
replicate.cor.df<-as.data.frame(replicate.cor.mat.long)                                                   
replicate.cor.df$correlation<-as.numeric(as.character(replicate.cor.df$correlation))

#mean.cor<-replicate.cor.df %>% group_by(protein) %>% summarize(mean.cor=mean(correlation))

replicate.cor.df.mean<-replicate.cor.df %>% group_by(protein) %>%   mutate(mean.cor = mean(correlation))
replicate.cor.df.mean<-arrange(replicate.cor.df.mean, mean.cor)
replicate.cor.df.mean$protein_order <- reorder(replicate.cor.df.mean$protein, replicate.cor.df.mean$mean.cor)

pdf("olink.replicate.correlations.pdf",w=10,h=7)
g<-ggplot(replicate.cor.df.mean, aes(x=protein_order, y=correlation, color=visit)) + geom_point() + scale_color_manual(values=c("#e41a1c","#377eb8","#4daf4a","#984ea3"))+ theme_light() 
g<-g+ theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5, size=rel(0.7)), axis.title.x = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black")) 
g
dev.off()

replicate.cor.mean<-select(replicate.cor.df.mean, protein_order, mean.cor)
replicate.cor.mean<-unique(replicate.cor.mean)

#replicate.cor.mean<-arrange(replicate.cor.mean, mean.cor)

pdf("olink.replicate.correlations.mean.pdf",w=10,h=5)
g<-ggplot(replicate.cor.mean, aes(x=protein_order, y=mean.cor)) + geom_point() + theme_light() + ylab("average correlation between two panels")
g<-g+ theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5, size=14), axis.text.y=element_text(size=12), axis.title=element_text(size=12), axis.title.x = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black")) 
g
dev.off()




plot(density(as.numeric(as.vector(replicate.cor.mat[,-1]))))
hist(as.numeric(as.vector(replicate.cor.mat[,-1])))

#Plot distribution of correlations
plot.proseek.correlation.hist<-function(visit1.df, visit2.df,visit3.df, panel) {
  #visit1.df<-proseek.CVDII.visit1.LOD
  #visit2.df<-proseek.CVDII.visit2.LOD
  #visit3.df<-proseek.CVDII.visit3.LOD
  #visit1.df<-proseek.INFI.visit1.LOD
  #visit2.df<-proseek.INFI.visit2.LOD
  #visit3.df<-proseek.INFI.visit3.LOD
  #panel<-"INFI"
  common.subj.ids<- Reduce(intersect, list(visit1.df$subject_id, visit2.df$subject_id, visit3.df$subject_id))
  visit1.df.same<-visit1.df[which(visit1.df$subject_id %in% common.subj.ids),]
  visit2.df.same<-visit2.df[which(visit2.df$subject_id %in% common.subj.ids),]
  visit3.df.same<-visit3.df[which(visit3.df$subject_id %in% common.subj.ids),]
  
  #Visit 1 mot 2
  # Plotta histogram med experimental och random corr
  #kör random corr 10 gånger
  rand.list<-list()
  for(a in 1:10){
 #   print(a)
    cor.mat.rand<-get.cor.mat.rand(visit1.df.same,visit2.df.same)
    rand.list[[a]]<-as.numeric(cor.mat.rand[,3])
  }
  rand.all <- do.call(rbind, rand.list)
  
  #Räkna riktiga correlation mellan 1 och 2
  num<-ncol(visit1.df.same)
 
  cor.mat<-matrix(nrow=num, ncol=4)
  colnames(cor.mat)<-c("protein1","corr 1-2", "corr 1-3", "corr 2-3")
  for(j in 2:ncol(visit1.df.same)) {
    vec1<-unlist(visit1.df.same[,j])
    vec2<-unlist(visit2.df.same[,j])
    vec3<-unlist(visit3.df.same[,j])
    cor12<-cor(vec1, vec2, method="pearson",use="pairwise.complete.obs")
    cor13<-cor(vec1, vec3, method="pearson",use="pairwise.complete.obs")
    cor23<-cor(vec2, vec3, method="pearson",use="pairwise.complete.obs")
    cor.mat[j, ]<-c(colnames(visit1.df.same)[j], cor12, cor13, cor23)
  }
  cor.mat<-cor.mat[-1,]
 
  pdf(file=paste0(panel, ".correlation.visit1.2.3.random.pdf"), w=14, h=10)
  layout(matrix(nrow=3, 1:6, byrow=F))
  hist( as.numeric(cor.mat[,2]), col=rgb(0,0,1,1/4), freq=F, xlim=c(-0.6,1), ylim=c(0, 3.5), main=paste0(panel, " Pearson cor visit 1 and 2 \nMean cor: ", round(mean( as.numeric(cor.mat[,2]), na.rm=T), 2)), xlab="Pearson cor")  # first histogram
  hist( as.numeric(cor.mat[,3]), col=rgb(1,0,0,1/4), xlim=c(-0.6,1), ylim=c(0, 3.5), freq=F, main=paste0(panel, " Pearson cor visit 1 and 3 \nMean cor: ", round(mean( as.numeric(cor.mat[,3]), na.rm=T), 2)), xlab="Pearson cor")
  hist( as.numeric(cor.mat[,4]), col=rgb(0,1,0,1/4), xlim=c(-0.6,1), ylim=c(0, 3.5), freq=F, main=paste0(panel, " Pearson cor visit 2 and 3 \nMean cor: ", round(mean( as.numeric(cor.mat[,4]), na.rm=T), 2)), xlab="Pearson cor")
 # hist( rand.all,col="grey", xlim=c(-0.6,1), ylim=c(0, 3.5), freq=F, main="Pearson cor random proteins")
  hist( as.numeric(cor.mat[,2]), col=rgb(0,0,1,1/4), freq=F, xlim=c(-0.6,1), ylim=c(0, 3.5), main=paste0(panel, " Pearson cor, visit 1,2,3"), xlab="Pearson cor")  # first histogram
  legend("topleft", c("visit 1/2", "visit 1/3", "visit 2/3", "random"), bty="n", fill=c(rgb(0,0,1,1/4), rgb(1,0,0,1/4), rgb(0,1,0,1/4), "black"))
   hist( as.numeric(cor.mat[,3]), col=rgb(1,0,0,1/4), add=T, freq=F) 
  hist( as.numeric(cor.mat[,4]), col=rgb(0,1,0,1/4), add=T, freq=F)
  lines(density(rand.all, na.rm=T), col="black")
  plot(density(rep(as.numeric(cor.mat[,2]), 10), na.rm=T), type="l", col=rgb(0,0,1,1), xlim=c(-0.6,1), ylim=c(0, 3.5), main=paste0(panel, " Pearson cor, visit 1,2,3"), xlab="Pearson cor")
  lines(density(rep(as.numeric(cor.mat[,3]), 10), na.rm=T), col=rgb(1,0,0,1))
  lines(density(rep(as.numeric(cor.mat[,4]), 10), na.rm=T), col=rgb(0,1,0,1))
  lines(density(rand.all, na.rm=T), col="black")
  legend("topleft", c("visit 1/2", "visit 1/3", "visit 2/3", "random"), bty="n", fill=c(rgb(0,0,1,1), rgb(1,0,0,1), rgb(0,1,0,1), "black"))
  boxplot(list(as.numeric(cor.mat[,2]),as.numeric(cor.mat[,3]),as.numeric(cor.mat[,4]), rand.all), names=c("visit 1/2", "visit 1/3", "visit 2/3", "random"), ylab="Pearson cor")
  
  dev.off()
  
 #  boxplot(list(as.numeric(cor.mat[,2]),as.numeric(cor.mat[,3]),as.numeric(cor.mat[,4]), rand.all), names=c("visit 1/2", "visit 1/3", "visit 2/3", "random"))
 #   # visit.cols<-c("#e41a1c","#377eb8","#4daf4a","#984ea3")
 # plot(density(rep(as.numeric(cor.mat[,2]), 10)), type="l", col=visit.cols[1], xlim=c(-0.6,1), ylim=c(0, 3.5))
 # lines(density(rep(as.numeric(cor.mat[,3]), 10)), col=visit.cols[2])
 # lines(density(rep(as.numeric(cor.mat[,4]), 10)), col=visit.cols[3])
 # lines(density(rand.all), col="black")
 #  
 # plot(hist(as.numeric(cor.mat[,2])), type="l", col=visit.cols[1], xlim=c(-0.6,1), ylim=c(0, 3.5))
 # lines(hist(rep(as.numeric(cor.mat[,3]), 10)), col=visit.cols[2])
 # lines(density(rep(as.numeric(cor.mat[,4]), 10)), col=visit.cols[3])
 # lines(density(rand.all), col="black")
 # 
 #   hist(rand.all, col = "red", add = F, main="Random corr visit 1 and 2", xlab="Pearson correlation", xlim=c(-0.6, 1))
 #  #hist(rand.all, col = "red", add = T)#, ylim = c(0,50000))
 #  hist(rep(as.numeric(cor.mat[,"corr"]),10), col = rgb(29/255, 34/255, 181/255, alpha = 0.5), add= T) # repetera mina korrvärden 10 ggr för att få samma datamängd
 #  dev.off()
 }
get.cor.mat.rand<-function(matrix1,matrix2) {
  matrix1<-matrix1[,-1] #Ta bort col med subj_id
  matrix2<-matrix2[,-1] #Ta bort col med subj_id
  num<-ncol(matrix1)
  
  cor.mat<-matrix(nrow=num, ncol=3)
  colnames(cor.mat)<-c("protein1","protein2", "corr")
  set<-c(1:num) # för tpm-vals mot random ihc-vals
  for(i in 1:num) {
    prot1<-colnames(matrix1)[i]
    k<-sample(set,1)# för tpm-vals mot random ihc-vals
    while(i==k) {
      k<-sample(set,1)# för tpm-vals mot random ihc-vals
    }  
    prot2<-colnames(matrix2)[k]
    pos1<-match(prot1, colnames(matrix1))
    pos2<-match(prot2, colnames(matrix2))  
    
    vec1<-unlist(matrix1[,pos1])
    vec2<-unlist(matrix2[,pos2])
    
    corel<-cor(vec1, vec2, method="pearson",use="pairwise.complete.obs")
    cor.mat[i, ]<-c(prot1, prot2, corel)
    set<-set[!set%in%k]# för tpm-vals mot random ihc-vals
    
  }
  return(cor.mat)
}
  
plot.proseek.correlation.hist(proseek.INFI.visit1.LOD,proseek.INFI.visit2.LOD,proseek.INFI.visit3.LOD, "INFI")
plot.proseek.correlation.hist(proseek.CVDII.visit1.LOD,proseek.CVDII.visit2.LOD,proseek.CVDII.visit3.LOD, "CVDII")
plot.proseek.correlation.hist(proseek.CVDIII.visit1.LOD,proseek.CVDIII.visit2.LOD,proseek.CVDIII.visit3.LOD, "CVDIII")
plot.proseek.correlation.hist(proseek.ONCII.visit1.LOD,proseek.ONCII.visit2.LOD,proseek.ONCII.visit3.LOD, "ONCII")
plot.proseek.correlation.hist(proseek.NEU.visit1.LOD,proseek.NEU.visit2.LOD,proseek.NEU.visit3.LOD, "NEU")


#Plot distribution of correlations
plot.proseek.correlation.vs.npx<-function(visit1.df, visit2.df,visit3.df, panel) {
 # visit1.df<-proseek.CVDII.visit1.LOD.uncentered
#  visit2.df<-proseek.CVDII.visit2.LOD.uncentered
#  visit3.df<-proseek.CVDII.visit3.LOD.uncentered
 # panel<-"CVDII"
  common.subj.ids<- Reduce(intersect, list(visit1.df$subject_id, visit2.df$subject_id, visit3.df$subject_id))
  visit1.df.same<-visit1.df[which(visit1.df$subject_id %in% common.subj.ids),]
  visit2.df.same<-visit2.df[which(visit2.df$subject_id %in% common.subj.ids),]
  visit3.df.same<-visit3.df[which(visit3.df$subject_id %in% common.subj.ids),]
  
  #Räkna correlation mellan visits och spara även NPX (ocentrerat)
  num<-ncol(visit1.df.same)
  
  cor.mat<-matrix(nrow=num, ncol=6)
  colnames(cor.mat)<-c("corr 1-2", "corr 1-3", "corr 2-3", "mean NPX1", "mean NPX2", "mean NPX3")
  rownames(cor.mat)<-colnames(visit1.df.same)
  for(j in 2:num) {
    vec1<-unlist(visit1.df.same[,j])
    vec2<-unlist(visit2.df.same[,j])
    vec3<-unlist(visit3.df.same[,j])
    cor12<-cor(vec1, vec2, method="pearson",use="pairwise.complete.obs")
    cor13<-cor(vec1, vec3, method="pearson",use="pairwise.complete.obs")
    cor23<-cor(vec2, vec3, method="pearson",use="pairwise.complete.obs")
    cor.mat[j, ]<-c(cor12, cor13, cor23, mean(vec1, na.rm=T),mean(vec2, na.rm=T),mean(vec3, na.rm=T))
  }
  cor.mat<-cor.mat[-1,]
  pdf(file=paste0(panel, ".correlation.vs.npx.pdf"), w=14, h=4)
#  layout(matrix(nrow=1, 1:3))
#  plot(cor.mat[,1], apply(cor.mat[,4:5], 1, mean, na.rm=T), xlab="Pearson cor visit 1 and 2", ylab="mean (log NPX)", main=paste0(panel, " Correlation vs log NPX visit 1,2"), pch=19)
 # plot(cor.mat[,2], apply(cor.mat[,c(4,6)], 1, mean, na.rm=T), xlab="Pearson cor visit 1 and 3", ylab="mean (log NPX)", main=paste0(panel, " Correlation vs log NPX visit 1,3"), pch=19)
  #plot(cor.mat[,3], apply(cor.mat[,5:6], 1, mean, na.rm=T), xlab="Pearson cor visit 2 and 3", ylab="mean (log NPX)", main=paste0(panel, " Correlation vs log NPX visit 2,3"), pch=19)
  #dev.off()
  
  plot1<-ggplot(data.frame(corel=cor.mat[,1], mean.npx=apply(cor.mat[,4:5], 1, mean, na.rm=T)), aes(x=corel, y=mean.npx, color=mean.npx)) + geom_point() + scale_colour_gradientn(colours = rainbow(3), name="Mean NPX") + xlab("Pearson cor visit 1 and 2") + ylab("mean (log NPX)") + ggtitle("Visit 1 and 2") + theme_light()
  plot2<-ggplot(data.frame(corel=cor.mat[,2], mean.npx=apply(cor.mat[,c(4,6)], 1, mean, na.rm=T)), aes(x=corel, y=mean.npx, color=mean.npx)) + geom_point() + scale_colour_gradientn(colours = rainbow(3), name="Mean NPX") + xlab("Pearson cor visit 1 and 3") + ylab("mean (log NPX)") + ggtitle("Visit 1 and 3") + theme_light()
  plot3<-ggplot(data.frame(corel=cor.mat[,3], mean.npx=apply(cor.mat[,5:6], 1, mean, na.rm=T)), aes(x=corel, y=mean.npx, color=mean.npx)) + geom_point() + scale_colour_gradientn(colours = rainbow(3), name="Mean NPX") + xlab("Pearson cor visit 2 and 3") + ylab("mean (log NPX)") + ggtitle("Visit 2 and 3") + theme_light()
  grid.arrange(plot1, plot2,plot3, ncol=3, top=textGrob(paste0(panel, " correlation vs log NPX"), gp=gpar(fontsize=15,fontface="bold")))
  dev.off()
}

plot.proseek.correlation.vs.npx(proseek.INFI.visit1.NA.uncentered,proseek.INFI.visit2.NA.uncentered,proseek.INFI.visit3.NA.uncentered, "INFI")
plot.proseek.correlation.vs.npx(proseek.CVDII.visit1.NA.uncentered,proseek.CVDII.visit2.NA.uncentered,proseek.CVDII.visit3.NA.uncentered, "CVDII")
plot.proseek.correlation.vs.npx(proseek.CVDIII.visit1.NA.uncentered,proseek.CVDIII.visit2.NA.uncentered,proseek.CVDIII.visit3.NA.uncentered, "CVDIII")
plot.proseek.correlation.vs.npx(proseek.ONCII.visit1.NA.uncentered,proseek.ONCII.visit2.NA.uncentered,proseek.ONCII.visit3.NA.uncentered, "ONCII")
plot.proseek.correlation.vs.npx(proseek.NEU.visit1.NA.uncentered,proseek.NEU.visit2.NA.uncentered,proseek.NEU.visit3.NA.uncentered, "NEU")

### Heatmap dendrogram med alla 3 visits 
proseek.variation.cv.ss<-function(visit1.df, visit2.df,visit3.df, filename) {
  common.subj.ids<- Reduce(intersect, list(visit1.df$subject_id, visit2.df$subject_id, visit3.df$subject_id))
  visit1.df.same<-visit1.df[which(visit1.df$subject_id %in% common.subj.ids),]
  visit2.df.same<-visit2.df[which(visit2.df$subject_id %in% common.subj.ids),]
  visit3.df.same<-visit3.df[which(visit3.df$subject_id %in% common.subj.ids),]
  
  co.var.row.df <- function(x) ( 100*apply(x,1,sd)/rowMeans(x) )
  co.var.col.df <- function(x) ( 100*apply(x,2,sd)/colMeans(x) )
  CV <- function(x){
    m<-mean(x, na.rm=T)
    s<-sd(x, na.rm=T)
    return((s/m)*100)
  }
  
  num.cols<-ncol(visit1.df.same)
  cv.subjects<-matrix(nrow=(num.cols-1), ncol=3)
  rownames(cv.subjects)<-colnames(visit1.df.same)[-1]
  colnames(cv.subjects)<-c("visit 1", "visit 2","visit 3")
  cv.visits<-vector(length=num.cols-1)
  
  aov.mat<-matrix(nrow=(num.cols-1), ncol=2)
  rownames(aov.mat)<-colnames(visit1.df.same)[-1]
  colnames(aov.mat)<-c("aov.visit","aov.subjects")

  for(j in 2:num.cols) {
    prot.df<-data.frame(visit1.df.same$subject_id, unlist(visit1.df.same[,j]), unlist(visit2.df.same[,j]), unlist(visit3.df.same[,j]))
    names(prot.df)<-c("subject_id",1,2,3)
    prot.df.melt<-melt(prot.df,"subject_id")
    names(prot.df.melt)[2:3]<-c("visit","NPX")
    
    var.table<-aov(NPX ~visit + subject_id, data=prot.df.melt)
    summary(var.table)
    summary(var.table)
    
     
    
    
     var.visit<-aov(NPX~visit, data=prot.df.melt)
    var.visit$residuals
    var.visit$coef
   summary(var.visit)
    
    var.subj<-aov(NPX~subject_id, data=prot.df.melt)
    aov.mat[j-1,]<-c(var.visit, var.subj)
    prot.df.cv<-co.var.col.df(prot.df)
    cv.subjects[j-1,]<-co.var.col.df(prot.df)
   }

}
plot.proseek.cv(proseek.CVDII.visit1.LOD, proseek.CVDII.visit2.LOD, proseek.CVDII.visit3.LOD,"subjects.visit1.2.3.proseek.CVDII.pdf")
plot.proseek.cv(proseek.CVDIII.visit1.LOD, proseek.CVDIII.visit2.LOD, proseek.CVDIII.visit3.LOD,"subjects.visit1.2.3.proseek.CVDIII.pdf")
plot.proseek.cv(proseek.ONCII.visit1.LOD, proseek.ONCII.visit2.LOD, proseek.ONCII.visit3.LOD,"subjects.visit1.2.3.proseek.ONCII.pdf")
plot.proseek.cv(proseek.NEU.visit1.LOD, proseek.NEU.visit2.LOD, proseek.NEU.visit3.LOD,"subjects.visit1.2.3.proseek.NEU.pdf")
plot.proseek.cv(proseek.INFI.visit1.LOD, proseek.INFI.visit2.LOD, proseek.INFI.visit3.LOD,"subjects.visit1.2.3.proseek.INFI.pdf")

visit1.df<-proseek.INFI.visit1.LOD
visit2.df<-proseek.INFI.visit2.LOD
visit3.df<-proseek.INFI.visit3.LOD


### Heatmap dendrogram med alla 3 visits 
plot.proseek.triple.heatmap<-function(visit1.df, visit2.df,visit3.df, filename) {
  common.subj.ids<- Reduce(intersect, list(visit1.df$subject_id, visit2.df$subject_id, visit3.df$subject_id))
  visit1.df.same<-visit1.df[which(visit1.df$subject_id %in% common.subj.ids),]
  visit2.df.same<-visit2.df[which(visit2.df$subject_id %in% common.subj.ids),]
  visit3.df.same<-visit3.df[which(visit3.df$subject_id %in% common.subj.ids),]
  
  olink.triple<-rbind(visit1.df.same[,-1],visit2.df.same[,-1],visit3.df.same[,-1])
  olink.triple<-as.matrix(olink.triple)
 # rownames(olink.triple)<-rep(visit1.df.same$subject_id, 3)
  rownames(olink.triple)<-c(paste0(visit1.df.same$subject_id, " 1"),paste0(visit1.df.same$subject_id, " 2"),paste0(visit1.df.same$subject_id, " 3"))
  colors<-c("#e41a1c","#377eb8","#4daf4a","#984ea3") 
  num.subj<-nrow(visit2.df.same)
  visit.cols<-c(rep(colors[1], num.subj), rep(colors[2], num.subj),rep(num.subj))
  person.cols<-rep("black", num.subj*3)
  for(k in 1:num.subj) {
    person.cols[c(k, k+num.subj, k+num.subj+num.subj)]<-rainbow(num.subj)[k]
  }
 # Gör heatmap med klustring av alla 3 visits
  cor<-cor(olink.triple, method="pearson")
  cor.subj<-cor(t(olink.triple), method="pearson")
  
  d <- 1 - cor
  hcl <- hclust(as.dist(d), "average") 
  plot(hcl, hang=-1, cex=1)
  
  d.subj <- 1 - cor.subj
  hcl.subj <- hclust(as.dist(d.subj), "average") 
  pdf(paste0("dendrogram.", filename),30,6)
  plot(hcl.subj, hang=-1, cex=0.7,xlab="")
 # maPalette(high="mediumblue", mid="mediumturquoise",low="#EEEEFF") -> cols
  dev.off()
  pdf(paste0("dendrogram.colored.", filename),30,6)
  plotColoredClusters(hcl.subj, hcl.subj$labels, col=person.cols, cex=0.7,xlab="")
  # maPalette(high="mediumblue", mid="mediumturquoise",low="#EEEEFF") -> cols
  dev.off()
  
  #maPalette(high="red3", low="white") -> cols
#  file.name<-paste0("heatmap.",name, ".pdf")
  pdf(file=paste0("heatmap.", filename),11,10)
  heatmap.2(as.matrix(olink.triple), Rowv=as.dendrogram(hcl.subj), col=rev(heat.colors(20)),Colv=as.dendrogram(hcl), trace="none", na.col="gray", margins=c(7,5), cexCol=0.7, cexRow=0.7, RowSideColors=person.cols)
  dev.off()
  
}
plot.proseek.triple.heatmap(proseek.CVDII.visit1.LOD, proseek.CVDII.visit2.LOD, proseek.CVDII.visit3.LOD,"subjects.visit1.2.3.proseek.CVDII.pdf")
plot.proseek.triple.heatmap(proseek.CVDIII.visit1.LOD, proseek.CVDIII.visit2.LOD, proseek.CVDIII.visit3.LOD,"subjects.visit1.2.3.proseek.CVDIII.pdf")
plot.proseek.triple.heatmap(proseek.ONCII.visit1.LOD, proseek.ONCII.visit2.LOD, proseek.ONCII.visit3.LOD,"subjects.visit1.2.3.proseek.ONCII.pdf")
plot.proseek.triple.heatmap(proseek.NEU.visit1.LOD, proseek.NEU.visit2.LOD, proseek.NEU.visit3.LOD,"subjects.visit1.2.3.proseek.NEU.pdf")
plot.proseek.triple.heatmap(proseek.INFI.visit1.LOD, proseek.INFI.visit2.LOD, proseek.INFI.visit3.LOD,"subjects.visit1.2.3.proseek.INFI.pdf")

visit1.df<-proseek.INFI.visit1.NA
visit2.df<-proseek.INFI.visit2.NA
visit3.df<-proseek.INFI.visit3.NA
visit4.df<-proseek.INFI.visit4.NA


olink.pca.four.visits<-function(visit1.df, visit2.df,visit3.df,visit4.df, panel) {
  common.subj.ids<- Reduce(intersect, list(visit1.df$subject_id, visit2.df$subject_id, visit3.df$subject_id, visit4.df$subject_id))
  visit1.df.same<-visit1.df[which(visit1.df$subject_id %in% common.subj.ids),]
  visit2.df.same<-visit2.df[which(visit2.df$subject_id %in% common.subj.ids),]
  visit3.df.same<-visit3.df[which(visit3.df$subject_id %in% common.subj.ids),]
  visit4.df.same<-visit4.df[which(visit4.df$subject_id %in% common.subj.ids),]
  colnames(visit4.df.same)<-colnames(visit3.df.same)
  olink.quad<-rbind(visit1.df.same[,-1],visit2.df.same[,-1],visit3.df.same[,-1],visit4.df.same[,-1])
  olink.quad<-as.matrix(olink.quad)
  rownames(olink.quad)<-c(paste0(visit1.df.same$subject_id, " 1"),paste0(visit1.df.same$subject_id, " 2"),paste0(visit1.df.same$subject_id, " 3"),paste0(visit1.df.same$subject_id, " 4"))
  colors<-c("#e41a1c","#377eb8","#4daf4a","#984ea3") 
  num.subj<-nrow(visit2.df.same)
   # Remove columns that have 0 variance or many NA
  olink.quad<- olink.quad[,apply(olink.quad, 2, var, na.rm=TRUE) != 0]
  olink.quad<-olink.quad[ , ! apply( olink.quad , 2 , function(x) all(is.na(x)) ) ]
  olink.quad<-olink.quad[ , ! apply( olink.quad , 2 , function(x) length(which(is.na(x)))> 50)]
  
  olink.quad.no.na<-na.omit(olink.quad)
  #nya färger för de personer som blev kvar
  person.cols<-rep("black", nrow(olink.quad.no.na))
  for(k in 1:nrow(olink.quad.no.na)) {
    person<-rownames(olink.quad.no.na)[k]
    if(person.cols[k]=="black") {
      person<-substring(person, 0,4)
      pos<-grep(person, rownames(olink.quad.no.na))
      person.cols[pos]<-sample(rainbow(20), 1)
    }
  }
  
  pca<- prcomp(na.omit(olink.quad), scale.=TRUE)
  rot<-pca$r
  
  file.name<-paste0(panel, ".pca.persons.visit1.4.pdf")
  pdf(file=file.name,10,10)
  layout(matrix(nrow=2, 1:4, byrow=T))
  plot(rot[,1:2],pch="", main="Loadings") #col=group.cols, )
  text(rot[,1:2], colnames(olink.quad))
 # legend("topright", c("visit 1","visit 2"), fill=c("blue","red"), bty="n")     
  scores<-pca$x
  plot(scores[,1:2], pch="", main="Scores")
  text(scores[,1:2], rownames(scores), col=person.cols)
   biplot(pca, main="Biplot", cex=0.7)
  plot(pca)
  dev.off()
}
olink.pca.four.visits(proseek.CVDIII.visit1.NA,proseek.CVDIII.visit2.NA,proseek.CVDIII.visit3.NA,proseek.CVDIII.visit4.NA,"CVDIII")
olink.pca.four.visits(proseek.CVDII.visit1.NA,proseek.CVDII.visit2.NA,proseek.CVDII.visit3.NA,proseek.CVDII.visit4.NA,"CVDII")
olink.pca.four.visits(proseek.ONCII.visit1.NA,proseek.ONCII.visit2.NA,proseek.ONCII.visit3.NA,proseek.ONCII.visit4.NA,"ONCII")
olink.pca.four.visits(proseek.INFI.visit1.NA,proseek.INFI.visit2.NA,proseek.INFI.visit3.NA,proseek.INFI.visit4.NA,"INFI")
olink.pca.four.visits(proseek.NEU.visit1.NA,proseek.NEU.visit2.NA,proseek.NEU.visit3.NA,proseek.NEU.visit4.NA,"NEU")


#### Plotta person med högt CRP i INF-panelen
visit1.df<-proseek.INFI.visit1.LOD
visit2.df<-proseek.INFI.visit2.LOD
visit1.df.same<-visit1.df[which(visit1.df$subject_id %in% visit2.df$subject_id),]
visit2.df.same<-visit2.df[which(visit2.df$subject_id %in% visit1.df$subject_id),]
sex<-unlist((wellness.data[which(wellness.data$subject_id %in% visit1.df.same$subject_id ),"sex"]))
sex[which(sex=="f")]<-"#F8766D"
sex[which(sex=="m")]<-"#00BFC4"
pos<-which(wellness.data[which(wellness.data$subject_id %in% visit1.df.same$subject_id ),"subject_id"]==3920)
sex[pos]<-"purple"

pdf(file="INF.high.crp.color.pdf", w=10,h=11)
layout(matrix(1:16, ncol=4, byrow=T))
for(i in 2:ncol(visit1.df.same)) {
  plot(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(colnames(visit1.df.same)[i], "\n",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2))))
  if(i==2) {
    legend("topleft", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
    #legend("bottomright",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2)), bty="n")
  } 
}
dev.off()


pdf(file="INF.high.crp.color.subjectids.pdf", w=10,h=11)
layout(matrix(1:16, ncol=4, byrow=T))
for(i in 2:ncol(visit1.df.same)) {
  plot(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), col=sex,pch="", xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(colnames(visit1.df.same)[i], "\n",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2))))
  text(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), visit1.df.same$subject_id, col=sex, cex=0.8)
  if(i==2) {
    legend("topleft", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
    #legend("bottomright",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2)), bty="n")
  } 
}
dev.off()

#### Plotta båda personerna med högt CRP i INF-panelen i visit 2 och 3
visit3.df<-proseek.INFI.visit3.NA
visit2.df<-proseek.INFI.visit2.NA
visit3.df.same<-visit3.df[which(visit3.df$subject_id %in% visit2.df$subject_id),]
visit2.df.same<-visit2.df[which(visit2.df$subject_id %in% visit3.df$subject_id),]
sex<-unlist((wellness.data[which(wellness.data$subject_id %in% visit3.df.same$subject_id ),"sex"]))
sex[which(sex=="f")]<-"#F8766D"
sex[which(sex=="m")]<-"#00BFC4"
pos<-which(wellness.data[which(wellness.data$subject_id %in% visit3.df.same$subject_id ),"subject_id"]==3920)
high.crp.visit2<-wellness.data$subject_id[which(wellness.data$visit3_analysis_code_S.CRPUS.A1_result==37.00)]
pos2<-which(wellness.data[which(wellness.data$subject_id %in% visit3.df.same$subject_id ),"subject_id"]==3512)
sex[pos]<-"purple"
sex[pos2]<-"green3"

pdf(file="INF.high.crp.color.visit.2.3.pdf", w=10,h=11)
layout(matrix(1:16, ncol=4, byrow=T))
for(i in 2:ncol(visit3.df.same)) {
  if(!all(is.na((unlist(visit2.df.same[,i])))) & !all(is.na((unlist(visit3.df.same[,i]))))) {
    plot(unlist(visit2.df.same[,i]), unlist(visit3.df.same[,i]), col=sex,pch=19, xlab="log NPX visit 2", ylab="log NPX visit 3", main=paste0(colnames(visit3.df.same)[i], "\n",paste0("Pearson: ",round(cor(unlist(visit3.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2))))
    if(i==2) {
      legend("topleft", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
      #legend("bottomright",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2)), bty="n")
    } 
  }
}
dev.off()


#Plotta visit1 mot visit2
plot.proseek.visits<-function(visit1.df, visit2.df,filename1,filename2) {
  visit1.df.same<-visit1.df[which(visit1.df$subject_id %in% visit2.df$subject_id),]
  visit2.df.same<-visit2.df[which(visit2.df$subject_id %in% visit1.df$subject_id),]
  sex<-unlist((wellness.data[which(wellness.data$subject_id %in% visit1.df.same$subject_id ),"sex"]))
  sex[which(sex=="f")]<-"#F8766D"
  sex[which(sex=="m")]<-"#00BFC4"
  pdf(file=filename1, w=10,h=11)
  layout(matrix(1:16, ncol=4, byrow=T))
  for(i in 2:ncol(visit1.df.same)) {
    plot(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), col=sex,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(colnames(visit1.df.same)[i], "\n",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2))))
    if(i==2) {
      legend("topleft", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
      #legend("bottomright",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2)), bty="n")
    } 
  }
  dev.off()
  
  pdf(file=filename2, w=10,h=11)
  layout(matrix(1:9, ncol=3, byrow=T))
  for(i in 2:ncol(visit1.df.same)) {
    plot(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), pch="", xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(colnames(visit1.df.same)[i], "\n",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2))))
    text(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), visit1.df.same$subject_id, col=sex, cex=0.8)
    if(i==2) {
      legend("topleft", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
    }
  }
  dev.off()
}
visit1.df<-proseek.CVDII.visit1.LOD
visit2.df<-proseek.CVDII.visit2.LOD

plot.proseek.visits(proseek.INFI.visit1.LOD,proseek.INFI.visit2.LOD, "INF.visit1.visit2.ver.2.pdf","INF.visit1.visit2.text.ver2.pdf")
plot.proseek.visits(proseek.CVDII.visit1.LOD,proseek.CVDII.visit2.LOD, "CVDII.visit1.visit2.pdf","CVDII.visit1.visit2.text.pdf")
plot.proseek.visits(proseek.CVDIII.visit1.LOD,proseek.CVDIII.visit2.LOD, "CVDIII.visit1.visit2.pdf","CVDIII.visit1.visit2.text.pdf")
plot.proseek.visits(proseek.NEU.visit1.LOD,proseek.NEU.visit2.LOD, "NEU.visit1.visit2.ver.2.pdf","NEU.visit1.visit2.text.ver2.pdf")
plot.proseek.visits(proseek.NEU.visit1.LOD,proseek.NEU.visit2.LOD, "ONCII.visit1.visit2.ver.2.pdf","ONCII.visit1.visit2.text.ver2.pdf")

#Plotta visit1 mot visit2
plot.proseek.visits.atherocol<-function(visit1.df, visit2.df,filename1,filename2) {
  visit1.df.same<-visit1.df[which(visit1.df$subject_id %in% visit2.df$subject_id),]
  visit2.df.same<-visit2.df[which(visit2.df$subject_id %in% visit1.df$subject_id),]
  athero<-unlist((wellness.data[which(wellness.data$subject_id %in% visit1.df.same$subject_id),"athero"]))
  athero[which(athero==0)]<-"limegreen"
  athero[which(athero==1)]<-"deepskyblue2"
  athero[which(athero==2)]<-"darkslateblue"
  athero.col<- c("limegreen","deepskyblue2","darkslateblue")
#  barplot(1:3,col=c("springgreen3","deepskyblue2","darkslateblue"))
  
  pdf(file=filename1, w=10,h=11)
  layout(matrix(1:16, ncol=4, byrow=T))
  for(i in 2:ncol(visit1.df.same)) {
  
    plot(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), col=athero,pch=19, xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(colnames(visit1.df.same)[i], "\n",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2))))
    if(i==2) {
      legend("bottomright", c("none","stenois or plaque","stenosis and plaque"), fill=athero.col, bty="n")
    }
  }
  dev.off()
  
  pdf(file=filename2, w=10,h=11)
  layout(matrix(1:9, ncol=3, byrow=T))
  for(i in 2:ncol(visit1.df.same)) {
    plot(as.numeric(unlist(visit1.df.same[,i])), as.numeric(unlist(visit2.df.same[,i])), pch="", xlab="log NPX visit 1", ylab="log NPX visit 2", main=paste0(colnames(visit1.df.same)[i], "\n",paste0("Pearson: ",round(cor(unlist(visit1.df.same[,i]), unlist(visit2.df.same[,i]), method="pearson"),2))))
    text(as.numeric(unlist(visit1.df.same[,i])), as.numeric(unlist(visit2.df.same[,i])), visit1.df.same$subject_id, col=athero, cex=0.8)
    
     if(i==2) {
      legend("bottomright", c("none","stenois or plaque","stenosis and plaque"), fill=athero.col, bty="n")
    }
  }
  dev.off()
}
plot.proseek.visits.atherocol(proseek.INFI.visit1.LOD,proseek.INFI.visit2.LOD, "INF.visit1.visit2.athero.pdf","INF.visit1.visit2.text.athero.pdf")
plot.proseek.visits.atherocol(proseek.CVDII.visit1.LOD,proseek.CVDII.visit2.LOD, "CVDII.visit1.visit2.athero.pdf","CVDII.visit1.visit2.athero.text.pdf")
plot.proseek.visits.atherocol(proseek.CVDIII.visit1.LOD,proseek.CVDIII.visit2.LOD, "CVDIII.visit1.visit2.athero.pdf","CVDIII.visit1.visit2.athero.text.pdf")


as.matrix(select(wellness.data,subject_id, athero))[90:100,]
as.matrix(select(wellness.data[which(wellness.data$subject_id %in% visit1.df.same$subject_id),], subject_id, athero))[1:88,]

which(!proseek.INFI.visit1.LOD$subject_id %in% proseek.INFI.visit2.LOD$subject_id)
which(!proseek.INFI.visit2.LOD$subject_id %in% proseek.INFI.visit1.LOD$subject_id)


#### Plotta BMI mot proseek
proseek.INFI.visit1.LOD$subject_id %in% weight.data$subject_id
which(!proseek.INFI.visit1.LOD$subject_id %in% weight.data.INFI$subject_id)
weight.data$subject_id %in% proseek.INFI.visit1.LOD$subject_id

weight.data.INFI<-weight.data[which(weight.data$subject_id %in% proseek.INFI.visit1.LOD$subject_id),]
weight.data.CVDII<-weight.data[which(weight.data$subject_id %in% proseek.CVDII.visit1.LOD$subject_id),]
weight.data.CVDIII<-weight.data[which(weight.data$subject_id %in% proseek.CVDIII.visit1.LOD$subject_id),]

#weight.data.INFI<-weight.data[which(proseek.INFI.visit1.LOD$subject_id %in% weight.data$subject_id ),]
#weight.data.CVDII<-weight.data[which(weight.data.CVDII$subject_id %in% weight.data$subject_id ),]
#weight.data.CVDIII<-weight.data[which(weight.data.CVDIII$subject_id %in% weight.data$subject_id ),]

sex.col.vec.INFI<-weight.data.INFI$sex
sex.col.vec.INFI[which(sex.col.vec.INFI=="f")]<-"#F8766D"
sex.col.vec.INFI[which(sex.col.vec.INFI=="m")]<-"#00BFC4"
sex.col.vec.CVDII<-weight.data.CVDII$sex
sex.col.vec.CVDII[which(sex.col.vec.CVDII=="f")]<-"#F8766D"
sex.col.vec.CVDII[which(sex.col.vec.CVDII=="m")]<-"#00BFC4"
sex.col.vec.CVDIII<-weight.data.CVDIII$sex
sex.col.vec.CVDIII[which(sex.col.vec.CVDIII=="f")]<-"#F8766D"
sex.col.vec.CVDIII[which(sex.col.vec.CVDIII=="m")]<-"#00BFC4"

high.corr.INFI<-vector()
pdf(file="BMI.vs.proseek.INFI.pdf", 10,10)
layout(matrix(1:16, ncol=4, byrow=T))
for(i in 2:ncol(proseek.INFI.visit1.LOD)) {
  #for(i in 2:17) {
  corr<-as.numeric(round(cor(weight.data.INFI$visit1_bmi, as.numeric(unlist(proseek.INFI.visit1.LOD[,i])), method="spearman"),2))
  plot(weight.data.INFI$visit1_bmi, as.numeric(unlist(proseek.INFI.visit1.LOD[,i])), col=sex.col.vec.INFI, xlab="BMI", ylab=paste0("log NPX ",names(proseek.INFI.visit1.LOD[i])), pch=19, main=c(names(proseek.INFI.visit1.LOD[i]), paste0("Spearman: ",corr)))
  if(!is.na(corr)) {
    if(corr>0.3) {
      high.corr.INFI<-c(high.corr.INFI,i) 
    }
  }
}
dev.off()

pdf(file="BMI.vs.proseek.INFI.high.corr.pdf", 14,10)
num<-length(high.corr.INFI)
layout(matrix(1:num, nrow=2, byrow=T))
for(i in 1:num) {
  corr<-as.numeric(round(cor(weight.data.INFI$visit1_bmi, as.numeric(unlist(proseek.INFI.visit1.LOD[,high.corr.INFI[i]])), method="spearman"),2))
  plot(weight.data.INFI$visit1_bmi, as.numeric(unlist(proseek.INFI.visit1.LOD[,high.corr.INFI[i]])), pch="",col=sex.col.vec.INFI, xlab="BMI", ylab=paste0("log NPX ",names(proseek.INFI.visit1.LOD[high.corr.INFI[i]])), main=c(names(proseek.INFI.visit1.LOD[high.corr.INFI[i]]), paste0("Spearman: ",corr)))
  text(weight.data.INFI$visit1_bmi, as.numeric(unlist(proseek.INFI.visit1.LOD[,high.corr.INFI[i]])), proseek.INFI.visit1.LOD$subject_id, col=sex.col.vec.INFI)
}
dev.off()


high.corr.CVDII<-vector()
pdf(file="BMI.vs.proseek.CVDII.pdf", 10,10)
layout(matrix(1:16, ncol=4, byrow=T))
for(i in 2:ncol(proseek.CVDII.visit1.LOD)) {
  #for(i in 2:17) {
  corr<-round(cor(weight.data.CVDII$visit1_bmi, as.numeric(unlist(proseek.CVDII.visit1.LOD[,i])), method="spearman"),2)
  plot(weight.data.CVDII$visit1_bmi, as.numeric(unlist(proseek.CVDII.visit1.LOD[,i])), col=sex.col.vec.CVDII, xlab="BMI", ylab=paste0("log NPX ",names(proseek.CVDII.visit1.LOD[i])), pch=19, main=c(names(proseek.CVDII.visit1.LOD[i]), paste0("Spearman: ",corr)))
  if(!is.na(corr)) {
    if(corr>0.3) {
      high.corr.CVDII<-c(high.corr.CVDII,i) 
    }
  }
}
dev.off()

pdf(file="BMI.vs.proseek.CVDII.high.corr.pdf", 12,10)
num<-length(high.corr.CVDII)
layout(matrix(1:12, nrow=3, byrow=T))
for(i in 1:num) {
  corr<-as.numeric(round(cor(weight.data.CVDII$visit1_bmi, as.numeric(unlist(proseek.CVDII.visit1.LOD[,high.corr.CVDII[i]])), method="spearman"),2))
  plot(weight.data.CVDII$visit1_bmi, as.numeric(unlist(proseek.CVDII.visit1.LOD[,high.corr.CVDII[i]])), pch="",col=sex.col.vec.CVDII, xlab="BMI", ylab=paste0("log NPX ",names(proseek.CVDII.visit1.LOD[high.corr.CVDII[i]])), main=c(names(proseek.CVDII.visit1.LOD[high.corr.CVDII[i]]), paste0("Spearman: ",corr)))
  text(weight.data.CVDII$visit1_bmi, as.numeric(unlist(proseek.CVDII.visit1.LOD[,high.corr.CVDII[i]])), proseek.CVDII.visit1.LOD$subject_id, col=sex.col.vec.CVDII)
}
dev.off()

high.corr.CVDIII<-vector()
pdf(file="BMI.vs.proseek.CVDIII.pdf", 10,10)
layout(matrix(1:16, ncol=4, byrow=T))
for(i in 2:ncol(proseek.CVDIII.visit1.LOD)) {
  #for(i in 2:17) {
  corr<-round(cor(weight.data.CVDIII$visit1_bmi, as.numeric(unlist(proseek.CVDIII.visit1.LOD[,i])), method="spearman"),2)
  plot(weight.data.CVDIII$visit1_bmi, as.numeric(unlist(proseek.CVDIII.visit1.LOD[,i])), col=sex.col.vec.CVDIII, xlab="BMI", ylab=paste0("log NPX ",names(proseek.CVDIII.visit1.LOD[i])), pch=19, main=c(names(proseek.CVDIII.visit1.LOD[i]), paste0("Spearman: ",corr)))
  if(!is.na(corr)) {
    if(corr>0.3) {
      high.corr.CVDIII<-c(high.corr.CVDIII,i) 
    }
  }
}
dev.off()

pdf(file="BMI.vs.proseek.CVDIII.high.corr.pdf", 14,10)
num<-length(high.corr.CVDIII)
layout(matrix(1:6, nrow=2, byrow=T))
for(i in 1:num) {
  corr<-as.numeric(round(cor(weight.data.CVDIII$visit1_bmi, as.numeric(unlist(proseek.CVDIII.visit1.LOD[,high.corr.CVDIII[i]])), method="spearman"),2))
  plot(weight.data.CVDIII$visit1_bmi, as.numeric(unlist(proseek.CVDIII.visit1.LOD[,high.corr.CVDIII[i]])), pch="",col=sex.col.vec.CVDIII, xlab="BMI", ylab=paste0("log NPX ",names(proseek.CVDIII.visit1.LOD[high.corr.CVDIII[i]])), main=c(names(proseek.CVDIII.visit1.LOD[high.corr.CVDIII[i]]), paste0("Spearman: ",corr)))
  text(weight.data.CVDIII$visit1_bmi, as.numeric(unlist(proseek.CVDIII.visit1.LOD[,high.corr.CVDIII[i]])), proseek.CVDIII.visit1.LOD$subject_id, col=sex.col.vec.CVDIII)
}
dev.off()


######## Boxplot över variationen i datat
proseek.INFI.visit1.LOD.mat<-as.matrix(proseek.INFI.visit1.LOD[,-1])
rownames(proseek.INFI.visit1.LOD.mat)<-proseek.INFI.visit1.LOD$subject_id
mode(proseek.INFI.visit1.LOD.mat)<-"numeric"
median.val.INFI<-apply(proseek.INFI.visit1.LOD.mat, 2, median, na.rm=T)
median.ord.INFI<-order(median.val.INFI)

pdf(file="proseek.boxplot.INFI.visit1.pdf", w=14,h=10)
par(las=2, mar=c(7,4,4,2))
boxplot(proseek.INFI.visit1.LOD.mat[,median.ord.INFI],ylab="log NPX", main="INFI visit 1")
dev.off()

proseek.CVDII.visit1.LOD.mat<-as.matrix(proseek.CVDII.visit1.LOD[,-1])
rownames(proseek.CVDII.visit1.LOD.mat)<-proseek.CVDII.visit1.LOD$subject_id
mode(proseek.CVDII.visit1.LOD.mat)<-"numeric"

median.val.CVDII<-apply(proseek.CVDII.visit1.LOD.mat, 2, median, na.rm=T)
median.ord.CVDII<-order(median.val.CVDII)

pdf(file="proseek.boxplot.CVDII.visit1.pdf", w=14,h=10)
par(las=2, mar=c(7,4,4,2))
boxplot(proseek.CVDII.visit1.LOD.mat[,median.ord.CVDII],ylab="log NPX", main="CVDII visit 1")
dev.off()

proseek.CVDIII.visit1.LOD.mat<-as.matrix(proseek.CVDIII.visit1.LOD[,-1])
rownames(proseek.CVDIII.visit1.LOD.mat)<-proseek.CVDIII.visit1.LOD$subject_id
mode(proseek.CVDIII.visit1.LOD.mat)<-"numeric"
median.val.CVDIII<-apply(proseek.CVDIII.visit1.LOD.mat, 2, median, na.rm=T)
median.ord.CVDIII<-order(median.val.CVDIII)

pdf(file="proseek.boxplot.CVDIII.visit1.pdf", w=14,h=10)
par(las=2, mar=c(7,4,4,2))
boxplot(proseek.CVDIII.visit1.LOD.mat[,median.ord.CVDIII],ylab="log NPX", main="CVDIII visit 1")
dev.off()

proseek.INFI.visit2.LOD.mat<-as.matrix(proseek.INFI.visit2.LOD[,-1])
rownames(proseek.INFI.visit2.LOD.mat)<-proseek.INFI.visit2.LOD$subject_id
mode(proseek.INFI.visit2.LOD.mat)<-"numeric"
median.val.INFI<-apply(proseek.INFI.visit2.LOD.mat, 2, median, na.rm=T)
median.ord.INFI<-order(median.val.INFI)

pdf(file="proseek.boxplot.INFI.visit2.pdf", w=14,h=10)
par(las=2, mar=c(7,4,4,2))
boxplot(proseek.INFI.visit2.LOD.mat[,median.ord.INFI],ylab="log NPX", main="INFI visit 2")
dev.off()

#Båda i samma
pdf(file="proseek.boxplot.INFI.visit1.visit2.pdf", w=14,h=10)
par(las=2, mar=c(7,4,4,2))
layout(matrix(nrow=2, 1:2))
boxplot(proseek.INFI.visit1.LOD.mat[,median.ord.INFI],ylab="log NPX", main="INFI visit 1")
boxplot(proseek.INFI.visit2.LOD.mat[,median.ord.INFI],ylab="log NPX", main="INFI visit 2")
dev.off()


proseek.CVDII.visit2.LOD.mat<-as.matrix(proseek.CVDII.visit2.LOD[,-1])
rownames(proseek.CVDII.visit2.LOD.mat)<-proseek.CVDII.visit2.LOD$subject_id
mode(proseek.CVDII.visit2.LOD.mat)<-"numeric"

median.val.CVDII<-apply(proseek.CVDII.visit2.LOD.mat, 2, median, na.rm=T)
median.ord.CVDII<-order(median.val.CVDII)

pdf(file="proseek.boxplot.CVDII.visit2.pdf", w=14,h=10)
par(las=2, mar=c(7,4,4,2))
boxplot(proseek.CVDII.visit2.LOD.mat[,median.ord.CVDII],ylab="log NPX", main="CVDII visit 2")
dev.off()

proseek.CVDIII.visit2.LOD.mat<-as.matrix(proseek.CVDIII.visit2.LOD[,-1])
rownames(proseek.CVDIII.visit2.LOD.mat)<-proseek.CVDIII.visit2.LOD$subject_id
mode(proseek.CVDIII.visit2.LOD.mat)<-"numeric"
median.val.CVDIII<-apply(proseek.CVDIII.visit2.LOD.mat, 2, median, na.rm=T)
median.ord.CVDIII<-order(median.val.CVDIII)

pdf(file="proseek.boxplot.CVDIII.visit2.pdf", w=14,h=10)
par(las=2, mar=c(7,4,4,2))
boxplot(proseek.CVDIII.visit2.LOD.mat[,median.ord.CVDIII],ylab="log NPX", main="CVDIII visit 2")
dev.off()




########## PCA med olink-data

olink.pca<-function(olink.data, name) {
 # olink.data<-proseek.INFI.visit1.LOD
  # olink.mat<-proseek.CVDIII.visit2.LOD.mat
   olink.full.data<-olink.data
   olink.data<-olink.data[,-1]
   olink.subj<-as.numeric(olink.full.data$subject_id)
  
   sex.col<-filter(wellness.data, subject_id %in% olink.subj)$sex
   sex.col[which(sex.col=="f")]<-"#F8766D"
   sex.col[which(sex.col=="m")]<-"#00BFC4"
   
   # Remove columns that have 0 variance
   olink.data<- olink.data[,apply(olink.data, 2, var, na.rm=TRUE) != 0]
   rownames(olink.data)<-olink.subj
   pca<-prcomp(olink.data, scale.=TRUE)
   rot<-pca$r
   
   file.name<-paste0("pca",name, ".pdf")
   pdf(file=file.name,10,10)
   layout(matrix(nrow=2, 1:4, byrow=T))
   plot(rot[,1:2],pch="", main="Loadings") #col=group.cols, )
   text(rot[,1:2], colnames(olink.data))
   scores<-pca$x
   plot(scores[,1:2], pch="", main="Scores")
   text(scores[,1:2], rownames(scores), col=sex.col)
   legend("topright", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
   biplot(pca, main="Biplot", cex=0.7)
   plot(pca)
   dev.off()
}

olink.pca(proseek.CVDIII.visit1.LOD,"proseek.CVDIII.visit1.LOD")
olink.pca(proseek.CVDII.visit1.LOD,"proseek.CVDII.visit1.LOD")
olink.pca(proseek.INFI.visit1.LOD,"proseek.INFI.visit1.LOD")
olink.pca(proseek.ONCII.visit1.LOD,"proseek.ONCII.visit1.LOD")
olink.pca(proseek.NEU.visit1.LOD,"proseek.NEU.visit1.LOD")
olink.pca(proseek.CVDIII.visit2.LOD,"proseek.CVDIII.visit2.LOD")
olink.pca(proseek.CVDII.visit2.LOD,"proseek.CVDII.visit2.LOD")
olink.pca(proseek.INFI.visit2.LOD,"proseek.INFI.visit2.LOD")
olink.pca(proseek.ONCII.visit2.LOD,"proseek.ONCII.visit2.LOD")
olink.pca(proseek.NEU.visit2.LOD,"proseek.NEU.visit2.LOD")


olink.pca.two.visits<-function(olink.data.1, olink.data.2, name) {
  # olink.data<-proseek.INFI.visit1.LOD
  # olink.mat<-proseek.CVDIII.visit2.LOD.mat
#  olink.data.1<-proseek.CVDII.visit1.LOD
#  olink.data.2<-proseek.CVDII.visit2.LOD
  
  olink.data.1<-filter(olink.data.1, subject_id %in% olink.data.2$subject_id)
  olink.data.2<-filter(olink.data.2, subject_id %in% olink.data.1$subject_id)
  
  olink.full.data.1<-olink.data.1
  olink.full.data.2<-olink.data.2
  
  olink.data.1<-olink.data.1[,-1]
  olink.data.2<-olink.data.2[,-1]
  olink.subj<-as.numeric(olink.full.data.1$subject_id)
  
  sex.col<-filter(wellness.data, subject_id %in% olink.subj)$sex
  sex.col[which(sex.col=="f")]<-"#F8766D"
  sex.col[which(sex.col=="m")]<-"#00BFC4"
 # legend("topright", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
  
  sex.col.2<-filter(wellness.data, subject_id %in% olink.subj)$sex
  sex.col.2[which(sex.col.2=="f")]<-"#f442b3"
  sex.col.2[which(sex.col.2=="m")]<-"#4265f4"
   # Remove columns that have 0 variance
  olink.data.1<- olink.data.1[,apply(olink.data.1, 2, var, na.rm=TRUE) != 0]
  rownames(olink.data.1)<-olink.subj #paste0(olink.subj," visit 1")
  olink.data.2<- olink.data.2[,apply(olink.data.2, 2, var, na.rm=TRUE) != 0]
  rownames(olink.data.2)<-olink.subj #paste0(olink.subj," visit 2")
#  names(olink.data.1)<-paste0(names(olink.data.1), " visit 1")
#  names(olink.data.2)<-paste0(names(olink.data.2), " visit 2")
  
  olink.data<-cbind(olink.data.1, olink.data.2)
  pca<-prcomp(olink.data, scale.=TRUE)
  rot<-pca$r
  
  file.name<-paste0("pca",name, ".pdf")
  pdf(file=file.name,10,10)
  layout(matrix(nrow=2, 1:4, byrow=T))
  plot(rot[,1:2],pch="", main="Loadings") #col=group.cols, )
  text(rot[,1:2], colnames(olink.data), col=c(rep("blue",ncol(olink.data.1)), rep("red",ncol(olink.data.2))))
  legend("topright", c("visit 1","visit 2"), fill=c("blue","red"), bty="n")     
  scores<-pca$x
  plot(scores[,1:2], pch="", main="Scores")
  text(scores[,1:2], rownames(scores), col=sex.col)
 # legend("topright", c("f 1","m 1","f 2","m 2"), fill=c("#f44242", "#00BFC4","#f442b3","#4265f4"), bty="n")
  legend("topright", c("f","m"), fill=c("#F8766D", "#00BFC4"), bty="n")
  
  biplot(pca, main="Biplot", cex=0.7)
  plot(pca)
  dev.off()
}

olink.pca.two.visits(proseek.CVDIII.visit1.LOD,proseek.CVDIII.visit2.LOD,"proseek.CVDIII.visit1.visit2.LOD")

library("marray")
library("gplots")

###GÖr heatmap med allt data


olink.data<-olink.visit1.tot[,-1]

# Remove columns that have 0 variance
olink.data<- olink.data[,apply(olink.data, 2, var, na.rm=TRUE) != 0]
rownames(olink.data)<-olink.subjects

cor<-cor(olink.data, method="pearson", use="pairwise.complete.obs")
cor.subj<-cor(t(olink.data), method="pearson", use="pairwise.complete.obs")
#olink.data.no.na<-na.omit(olink.data)
d <- 1 - cor
hcl <- hclust(as.dist(d), "average") 
plot(hcl, hang=-1, cex=1)

d.subj <- 1 - cor.subj
hcl.subj <- hclust(as.dist(d.subj), "average") 
plot(hcl.subj, hang=-1, cex=1)
maPalette(high="mediumblue", mid="mediumturquoise",low="#EEEEFF") -> cols

#maPalette(high="red3", low="white") -> cols
file.name<-paste0("heatmap.",name, ".pdf")
pdf(file=file.name,11,10)
heatmap.2(as.matrix(olink.data), Rowv=as.dendrogram(hcl.subj), Colv=as.dendrogram(hcl), trace="none", na.col="gray", col=cols,margins=c(7,5), cexCol=0.7, cexRow=0.7)
dev.off()

olink.heatmap<-function(olink.data, name) {
  # olink.data<-proseek.INFI.visit1.LOD
  # olink.mat<-proseek.CVDIII.visit2.LOD.mat
  olink.full.data<-olink.data
  olink.data<-olink.data[,-1]
  olink.subj<-as.numeric(olink.full.data$subject_id)
  
  sex.col<-filter(wellness.data, subject_id %in% olink.subj)$sex
  sex.col[which(sex.col=="f")]<-"#F8766D"
  sex.col[which(sex.col=="m")]<-"#00BFC4"
  
  # Remove columns that have 0 variance
  olink.data<- olink.data[,apply(olink.data, 2, var, na.rm=TRUE) != 0]
  rownames(olink.data)<-olink.subj
 
  cor<-cor(olink.data, method="pearson")
  cor.subj<-cor(t(olink.data), method="pearson")
  
  d <- 1 - cor
  hcl <- hclust(as.dist(d), "average") 
  plot(hcl, hang=-1, cex=1)
  
  d.subj <- 1 - cor.subj
  hcl.subj <- hclust(as.dist(d.subj), "average") 
  plot(hcl.subj, hang=-1, cex=1)
  maPalette(high="mediumblue", mid="mediumturquoise",low="#EEEEFF") -> cols
  
  #maPalette(high="red3", low="white") -> cols
  file.name<-paste0("heatmap.",name, ".pdf")
  pdf(file=file.name,11,10)
  heatmap.2(as.matrix(olink.data), Rowv=as.dendrogram(hcl.subj), Colv=as.dendrogram(hcl), trace="none", na.col="gray", col=cols,margins=c(7,5), cexCol=0.7, cexRow=0.7)
  dev.off()
}

olink.heatmap(proseek.CVDIII.visit1.LOD,"proseek.CVDIII.visit1.LOD")
olink.heatmap(proseek.CVDII.visit1.LOD,"proseek.CVDII.visit1.LOD")
olink.heatmap(proseek.INFI.visit1.LOD,"proseek.INFI.visit1.LOD")
olink.heatmap(proseek.ONCII.visit1.LOD,"proseek.ONCII.visit1.LOD")
olink.heatmap(proseek.NEU.visit1.LOD,"proseek.NEU.visit1.LOD")
olink.heatmap(proseek.CVDIII.visit2.LOD,"proseek.CVDIII.visit2.LOD")
olink.heatmap(proseek.CVDII.visit2.LOD,"proseek.CVDII.visit2.LOD")
olink.heatmap(proseek.INFI.visit2.LOD,"proseek.INFI.visit2.LOD")
olink.heatmap(proseek.ONCII.visit2.LOD,"proseek.ONCII.visit2.LOD")
olink.heatmap(proseek.NEU.visit2.LOD,"proseek.NEU.visit2.LOD")


  
  
  