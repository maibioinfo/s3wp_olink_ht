# shared protein PCA plot Olink HT
summary(model)
plot(model)
gc()
View(imputed_olink_ht_long)
# analysis of each protein level
protein_results = imputed_olink_ht_long %>% group_by(protein_name) %>% summarize(
p_value = {model = lmer(npx_ht ~ visit + (1 | subject_id), data = cur_data())
anova(model)$`Pr(>F)`[1]})
# adjust multiple testing
protein_results = protein_results %>%
mutate(adj_p_value = p.adjust(p_value, method = 'fdr')) %>%
filter(adj_p_value < 0.05)
View(protein_results)
# analysis of each protein level
protein_results = imputed_olink_ht_long %>% group_by(protein_name) %>% summarize(
p_value = {model = lmer(npx_ht ~ visit + (1 | subject_id), data = cur_data())
anova(model)$`Pr(>F)`[1]})
class(imputed_olink_ht_long$visit)
# Change dtype to factors
imputed_olink_ht_long$visit = as.factor(imputed_olink_ht_long$visit)
imputed_olink_ht_long$Sex = as.factor(imputed_olink_ht_long$Sex)
class(imputed_olink_ht_long$visit)
# Analysis of each protein level
protein_results = imputed_olink_ht_long %>% group_by(protein_name) %>% summarize(
p_value = {model = lmer(npx_ht ~ visit + (1 | subject_id), data = cur_data())
anova(model)$`Pr(>F)`[1]})
View(protein_results)
protein_results = imputed_olink_ht_long %>%
group_by(protein_name) %>%
summarize(
p_value = {
subset_data = imputed_olink_ht_long %>% filter(protein_name == unique(protein_name))
model = lmer(npx_ht ~ visit + (1 | subject_id), data = subset_data)
anova(model)$`Pr(>F)`[1]
}
)
anova(model)$`Pr(>F)`[1]
# Analysis of each protein level
protein_results = imputed_olink_ht_long %>%
group_by(protein_name) %>%
summarize(
p_value = {
model = lmer(npx_ht ~ visit + (1 | subject_id), data = cur_data())
anova(model)$`Pr(>F)`[1]
}
)
protein_results = imputed_olink_ht_long %>%
group_by(protein_name) %>%
summarize(
p_value = {
model = lmer(npx_ht ~ visit + (1 | subject_id), data = cur_data())
anova(model)$`Pr(>F)`[1]
}
)
View(imputed_olink_ht_long)
# Analysis of each protein level
protein_results = imputed_olink_ht_long %>%
group_split(protein_name) %>%
lapply(function(protein_data) {
# Fit the model for each protein
model = lmer(npx_ht ~ visit + (1 | subject_id), data = protein_data)
p_value = anova(model)$`Pr(>F)`[1]
# Return protein name and p-value
tibble(
protein_name = unique(protein_data$protein_name),
p_value = p_value
)
}) %>%
bind_rows()
# Analysis of each protein level
# New approach: Directly loop through unique protein names
protein_names = unique(imputed_olink_ht_long$protein_name)
# Create an empty results data frame
protein_results = data.frame(protein_name = character(0), p_value = numeric(0))
# Loop through each protein_name
for (protein in protein_names) {
# Subset data for the current protein
subset_data = imputed_olink_ht_long[imputed_olink_ht_long$protein_name == protein, ]
# Fit the model
model = lmer(npx_ht ~ visit + (1 | subject_id), data = subset_data)
# Extract the p-value for 'visit'
p_value = anova(model)$`Pr(>F)`[1]
# Append results to the data frame
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = p_value))
}
any(is.na(imputed_olink_ht_long))
# Analysis of each protein level
# Get unique protein names
protein_names = unique(imputed_olink_ht_long$protein_name)
# Initialize results data frame
protein_results = data.frame(protein_name = character(0), p_value = numeric(0))
# Loop through each protein name
for (protein in protein_names) {
# Subset data for the current protein
subset_data = imputed_olink_ht_long[imputed_olink_ht_long$protein_name == protein, ]
# Fit the model with error handling
model = tryCatch({
lmer(npx_ht ~ visit + (1 | subject_id), data = subset_data)
}, error = function(e) NULL)  # Return NULL if model fitting fails
# If the model is NULL, skip this protein
if (is.null(model)) {
next
}
# Extract the p-value for 'visit' with error handling
p_value = tryCatch({
anova(model)$`Pr(>F)`[1]
}, error = function(e) NA)  # Return NA if p-value extraction fails
# Append results to the data frame
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = p_value))
}
# Get unique protein names
protein_names = unique(imputed_olink_ht_long$protein_name)
# Initialize results data frame
protein_results = data.frame(protein_name = character(0), p_value = numeric(0), reason = character(0))
# Loop through each protein
for (protein in protein_names) {
# Subset data for the current protein
subset_data = imputed_olink_ht_long[imputed_olink_ht_long$protein_name == protein, ]
# Check variance in `npx_ht`
if (var(subset_data$npx_ht) == 0) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'No variance in npx_ht'))
next
}
# Fit the model with error handling
model = tryCatch({
lmer(npx_ht ~ visit + (1 | subject_id), data = subset_data)
}, warning = function(w) {
NULL  # Treat warnings as failures
}, error = function(e) {
NULL  # Return NULL if model fitting fails
})
# If the model is NULL, record the failure reason
if (is.null(model)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Model fitting failed'))
next
}
# Check for singular fit
if (isSingular(model, tol = 1e-5)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Singular fit'))
next
}
# Extract the p-value for `visit`
p_value = tryCatch({
anova(model)$`Pr(>F)`[1]
}, error = function(e) {
NA  # Return NA if p-value extraction fails
})
# Add explanation for edge cases
if (is.na(p_value)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Edge case: ANOVA failed'))
next
}
# Append the result to the data frame
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = p_value, reason = 'Success'))
}
# Get unique protein names
protein_names = unique(imputed_olink_ht_long$protein_name)
# Initialize results data frame
protein_results = data.frame(protein_name = character(0), p_value = numeric(0), reason = character(0))
# Loop through each protein
for (protein in protein_names) {
# Subset data for the current protein
subset_data = imputed_olink_ht_long[imputed_olink_ht_long$protein_name == protein, ]
# Check variance in `npx_ht`
if (var(subset_data$npx_ht) == 0) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'No variance in npx_ht'))
next
}
# Fit the model with error handling
model = tryCatch({
lmer(npx_ht ~ visit + (1 | subject_id), data = subset_data)
}, warning = function(w) {
NULL  # Treat warnings as failures
}, error = function(e) {
NULL  # Return NULL if model fitting fails
})
# If the model is NULL, record the failure reason
if (is.null(model)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Model fitting failed'))
next
}
# Check for singular fit
if (isSingular(model, tol = 1e-5)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Singular fit'))
next
}
# Extract the p-value for `visit`
p_value = tryCatch({
result = anova(model)
if (!is.null(result) && 'Pr(>F)' %in% colnames(result)) {
result$`Pr(>F)`[1]
} else {
NA  # Assign NA if `Pr(>F)` column is missing
}
}, error = function(e) {
NA  # Return NA if p-value extraction fails
})
# Add explanation for edge cases
if (is.na(p_value)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Edge case: ANOVA failed'))
next
}
# Append the result to the data frame
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = p_value, reason = 'Success'))
}
class(imputed_olink_ht_long$subject_id)
imputed_olink_ht_long$subject_id = as.factor(imputed_olink_ht_long$subject_id)
# Loop through each protein
for (protein in protein_names) {
# Subset data for the current protein
subset_data = imputed_olink_ht_long[imputed_olink_ht_long$protein_name == protein, ]
# Check variance in `npx_ht`
if (var(subset_data$npx_ht) == 0) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'No variance in npx_ht'))
next
}
# Fit the model with error handling
model = tryCatch({
lmer(npx_ht ~ visit + (1 | subject_id), data = subset_data)
}, warning = function(w) {
NULL  # Treat warnings as failures
}, error = function(e) {
NULL  # Return NULL if model fitting fails
})
# If the model is NULL, record the failure reason
if (is.null(model)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Model fitting failed'))
next
}
# Check for singular fit
if (isSingular(model, tol = 1e-5)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Singular fit'))
next
}
# Extract the p-value for `visit`
p_value = tryCatch({
result = anova(model)
if (!is.null(result) && 'Pr(>F)' %in% colnames(result)) {
result$`Pr(>F)`[1]
} else {
NA  # Assign NA if `Pr(>F)` column is missing
}
}, error = function(e) {
NA  # Return NA if p-value extraction fails
})
# Add explanation for edge cases
if (is.na(p_value)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Edge case: ANOVA failed'))
next
}
# Append the result to the data frame
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = p_value, reason = 'Success'))
}
View(protein_results)
imputed_olink_ht_long %>%
group_by(protein_name, visit) %>%
summarize(mean_npx_ht = mean(npx_ht), .groups = 'drop') %>%
print()
# Subset for a specific protein
test_protein = imputed_olink_ht_long %>% filter(protein_name == 'A4D1B5')
# Fit the mixed-effects model
model = lmer(npx_ht ~ visit + (1 | subject_id), data = test_protein)
# Check model summary
summary(model)
# Check if the model is singular
is_singular = isSingular(model, tol = 1e-5)
print(paste('Is singular:', is_singular))
# Attempt ANOVA
anova_result = tryCatch({
anova(model)
}, error = function(e) {
print(paste('ANOVA failed with error:', e$message))
NULL
})
# Print ANOVA result
print(anova_result)
library(lmerTest)
install.packages("lmerTest")
library(lmerTest)
for (protein in protein_names) {
# Subset data
subset_data = imputed_olink_ht_long[imputed_olink_ht_long$protein_name == protein, ]
# Check variance
if (var(subset_data$npx_ht) == 0) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'No variance in npx_ht'))
next
}
# Fit mixed-effects model with `lmerTest`
model = tryCatch({
lmer(npx_ht ~ visit + (1 | subject_id), data = subset_data)
}, error = function(e) NULL)
if (is.null(model)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'Model fitting failed'))
next
}
# Extract p-value for `visit`
p_value = tryCatch({
anova_result = anova(model)
anova_result$`Pr(>F)`[1]
}, error = function(e) NA)
if (is.na(p_value)) {
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = NA, reason = 'ANOVA failed'))
next
}
protein_results = rbind(protein_results, data.frame(protein_name = protein, p_value = p_value, reason = 'Success'))
}
# Create a data frame to store results
results = data.frame(
Protein = character(),
Estimate = numeric(),
StdError = numeric(),
DF = numeric(),
Tvalue = numeric(),
Pvalue = numeric(),
stringsAsFactors = FALSE
)
View(result)
rm(result)
View(results)
View(imputed_olink_ht_long)
for (protein in imputed_olink_ht_long$protein_name) {
# Fit mixed-effects model for each protein
model = lmer(
formula = as.formula(paste(protein, "~ visit + (1 | subject_id)")),
data = imputed_olink_ht_long
)
# Extract fixed effects summary for 'visit'
summary_model = summary(model)
coef_visit = summary_model$coefficients["visit", , drop = FALSE]
# Append results
results = rbind(
results,
data.frame(
Protein = protein,
Estimate = coef_visit["Estimate"],
StdError = coef_visit["Std. Error"],
DF = coef_visit["df"],
Tvalue = coef_visit["t value"],
Pvalue = coef_visit["Pr(>|t|)"]
)
)
}
# Create a data frame to store results
results = data.frame(
Protein = character(),
Estimate = numeric(),
StdError = numeric(),
DF = numeric(),
Tvalue = numeric(),
Pvalue = numeric(),
stringsAsFactors = FALSE
)
# Loop over each unique protein
for (protein in unique(imputed_olink_ht_long$protein_name)) {
# Subset data for the current protein
protein_data = imputed_olink_ht_long[imputed_olink_ht_long$protein_name == protein, ]
# Fit mixed-effects model
model = lmer(
npx_ht ~ visit + (1 | subject_id),
data = protein_data
)
# Extract fixed effects summary for 'visit'
summary_model = summary(model)
coef_visit = summary_model$coefficients["visit", , drop = FALSE]
# Append results
results = rbind(
results,
data.frame(
Protein = protein,
Estimate = coef_visit["Estimate"],
StdError = coef_visit["Std. Error"],
DF = coef_visit["df"],
Tvalue = coef_visit["t value"],
Pvalue = coef_visit["Pr(>|t|)"]
)
)
}
protein_patient_summary = imputed_olink_ht_long %>%
group_by(protein_name, subject_id) %>%
summarize(VisitCount = n(), .groups = "drop")
View(protein_patient_summary)
print(imputed_olink_ht_long[which(protein_name == 'A4D1B5' & subject_id == 3614])
print(imputed_olink_ht_long[which(protein_name == 'A4D1B5' & subject_id == 3614)])
print(imputed_olink_ht_long[which(imputed_olink_ht_long$protein_name == 'A4D1B5' & imputed_olink_ht_long$subject_id == 3614)])
sub_df = imputed_olink_ht_long %>%
filter(protein_name == "A4D1B5", subject_id == 3614)
# Print the result
print(sub_df)
View(olink_ht)
sub_df = olink_ht %>%
filter(UniProt == "A4D1B5", subject_id == 3614)
# Print the result
print(sub_df)
visit_summary = olink_ht %>%
group_by(UniProt, subject_id) %>%
summarize(
VisitCount = n(),                # Count the number of visits
VisitsCollected = paste(sort(unique(visit)), collapse = " "), # List visits collected
.groups = "drop"
)
View(visit_summary)
sub_df = imputed_olink_ht_long %>%
filter(protein_name == "A4D1B5", subject_id == 3828)
# Print the result
print(sub_df)
sub_df = olink_ht %>%
filter(UniProt == "A4D1B5", subject_id == 3614)
# Print the result
print(sub_df)
sub_df = olink_ht %>%
filter(UniProt == "A4D1B5", subject_id == 3828)
# Print the result
print(sub_df)
repeated_measurements = olink_ht %>%
group_by(UniProt, subject_id, visit) %>%
filter(n() > 1)
View(repeated_measurements)
repeated_summary = olink_ht %>%
group_by(subject_id, visit) %>%
filter(n() > 1) %>%   # Keep only groups with more than 1 row
summarize(
RepeatedProteins = n_distinct(UniProt),  # Count unique proteins repeated
.groups = "drop"
) %>%
arrange(subject_id, visit)
repeated_summary = olink_ht %>%
group_by(subject_id, visit) %>%
filter(n() > 1) %>%   # Keep only groups with more than 1 row
summarize(
RepeatedProteins = n_distinct(UniProt),  # Count unique proteins repeated
.groups = "drop"
) %>%
arrange(subject_id, visit)
View(repeated_summary)
repeated_summary = olink_ht %>%
group_by(subject_id, visit, UniProt) %>%
filter(n() > 1) %>%   # Keep only rows where the combination is repeated
summarize(
RepeatedCount = n(),  # Count how many times this protein is repeated
.groups = "drop"
) %>%
group_by(subject_id, visit) %>%
summarize(
RepeatedProteins = n(),  # Count how many proteins are repeated
.groups = "drop"
) %>%
arrange(subject_id, visit)  # Arrange for easier inspection
View(repeated_summary)
View(olink_ht)
repeated_measurements = olink_ht %>%
group_by(subject_id, visit, DAid) %>%
filter(n() > 1) %>%   # Keep only rows where the combination is repeated
distinct(subject_id, visit, DAid, .keep_all = TRUE)
View(repeated_measurements)
# Analysis of each protein level
repeated_measurements = olink_ht %>%
group_by(subject_id, visit, DAid, UniProt) %>%
filter(n() > 1) %>%   # Detect repeated proteins
ungroup() %>%
distinct(subject_id, visit, DAid)
View(repeated_summary)
View(repeated_measurements)
# Analysis of each protein level
repeated_measurements = olink_ht %>%
group_by(subject_id, visit, DAid, UniProt) %>%
filter(n() > 1) %>%   # Detect repeated proteins
ungroup() %>%
distinct(subject_id, visit, DAid) %>%  # Keep unique combinations of subject_id, visit, and DAid
arrange(subject_id, visit, DAid)
View(repeated_measurements)
# Analysis of each protein level
repeated_measurements = olink_ht %>%
group_by(subject_id, visit, DAid, UniProt) %>%
filter(n() > 1) %>%   # Detect repeated proteins
)
# Analysis of each protein level
repeated_measurements = olink_ht %>%
group_by(subject_id, visit, DAid, UniProt) %>%
filter(n() > 1)
View(repeated_measurements)
View(olink_ht)
rm(repeated_measurements)
rm(repeated_summary)
repeated_measurements = olink_ht %>%
group_by(subject_id, visit, DAid, UniProt) %>%
filter(n() > 1) %>%   # Detect repeated proteins
ungroup() %>%
distinct(subject_id, visit, DAid) %>%  # Keep unique combinations of subject_id, visit, and DAid
arrange(subject_id, visit, DAid)
View(protein_warning_counts)
View(repeated_measurements)
repeated_measurements = olink_ht %>%
group_by(subject_id, visit, UniProt) %>%
filter(n() > 1) %>%   # Detect repeated proteins
ungroup() %>%
distinct(subject_id, visit, DAid)
repeated_measurements = olink_ht %>%
group_by(subject_id, visit, UniProt) %>%
filter(n() > 1) %>%   # Detect repeated proteins
ungroup() %>%
distinct(subject_id, visit, DAid) %>%  # Retain distinct DAid for repetitions
arrange(subject_id, visit, DAid)
filtered_df = olink_ht %>%
filter(DAid == "DA12126")
View(filtered_df)
filtered_df = olink_ht %>%
filter(DAid == "DA12127")
filtered_df = olink_ht %>%
filter(DAid == "DA12092")
rm(filtered_df)
View(olink_ht)
